
CESE/RTOS_1/C4/out/C4.elf:     file format elf32-littlearm
CESE/RTOS_1/C4/out/C4.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a00052d

Program Header:
0x70000001 off    0x00014bfc vaddr 0x1a004bfc paddr 0x1a004bfc align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x000100a4 vaddr 0x100000a4 paddr 0x100000a4 align 2**16
         filesz 0x00000000 memsz 0x00002200 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00004c04 memsz 0x00004c04 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a004c04 align 2**16
         filesz 0x000000a4 memsz 0x000000a4 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004bf8  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a4  10000000  1a004c04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200a4  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200a4  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200a4  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200a4  2**2
                  CONTENTS
  6 .bss          00002200  100000a4  100000a4  000100a4  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200a4  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200a4  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200a4  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200a4  2**2
                  CONTENTS
 11 .init_array   00000004  1a004bf8  1a004bf8  00014bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a004bfc  1a004bfc  00014bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000200a4  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000200a4  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000200a4  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000200a4  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000200a4  2**2
                  CONTENTS
 18 .noinit       00000000  100022a4  100022a4  000200a4  2**2
                  CONTENTS
 19 .debug_info   0002a63b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00005a93  00000000  00000000  0004a6df  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000c96a  00000000  00000000  00050172  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000ed0  00000000  00000000  0005cadc  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 000010f8  00000000  00000000  0005d9ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000f55c  00000000  00000000  0005eaa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   000197ea  00000000  00000000  0006e000  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0002f975  00000000  00000000  000877ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  000b715f  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  000b71c7  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00002d04  00000000  00000000  000b71fc  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000a4 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a004bf8 l    d  .init_array	00000000 .init_array
1a004bfc l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
100022a4 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 fsm_debounce.c
100000a4 l     O .bss	00000001 contFalling.14126
100000a5 l     O .bss	00000001 contRising.14127
00000000 l    df *ABS*	00000000 C4.c
100000a6 l     O .bss	00000001 debugPrint
00000000 l    df *ABS*	00000000 system.c
100000a8 l     O .bss	00000004 heap_end.5864
00000000 l    df *ABS*	00000000 heap_1.c
100000b0 l     O .bss	00002000 ucHeap
100000ac l     O .bss	00000004 pucAlignedHeap.11512
100020b0 l     O .bss	00000004 xNextFreeByte
00000000 l    df *ABS*	00000000 queue.c
1a000706 l     F .text	00000012 prvGetDisinheritPriorityAfterTimeout
1a000718 l     F .text	0000001e prvIsQueueFull
1a000736 l     F .text	0000001a prvIsQueueEmpty
1a000750 l     F .text	00000076 prvCopyDataToQueue
1a0007c6 l     F .text	00000024 prvCopyDataFromQueue
1a0007ea l     F .text	0000006e prvUnlockQueue
1a0008dc l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a00102c l     F .text	0000002c prvResetNextTaskUnblockTime
1a001058 l     F .text	00000012 prvDeleteTCB
1a00106a l     F .text	00000090 prvInitialiseNewTask
1a0010fc l     F .text	00000068 prvInitialiseTaskLists
1a001164 l     F .text	000000ac prvAddNewTaskToReadyList
1a001210 l     F .text	0000004c prvCheckTasksWaitingTermination
1a00125c l     F .text	00000028 prvIdleTask
1a001284 l     F .text	00000098 prvAddCurrentTaskToDelayedList
100020b8 l     O .bss	00000004 pxDelayedTaskList
100020bc l     O .bss	00000004 pxOverflowDelayedTaskList
100020c0 l     O .bss	0000008c pxReadyTasksLists
1000214c l     O .bss	00000004 uxCurrentNumberOfTasks
10002150 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10002154 l     O .bss	00000004 uxPendedTicks
10002158 l     O .bss	00000004 uxSchedulerSuspended
1000215c l     O .bss	00000004 uxTaskNumber
10002160 l     O .bss	00000004 uxTopReadyPriority
10002164 l     O .bss	00000014 xDelayedTaskList1
10002178 l     O .bss	00000014 xDelayedTaskList2
1000218c l     O .bss	00000004 xIdleTaskHandle
10002190 l     O .bss	00000004 xNextTaskUnblockTime
10002194 l     O .bss	00000004 xNumOfOverflows
10002198 l     O .bss	00000014 xPendingReadyList
100021ac l     O .bss	00000004 xSchedulerRunning
100021b0 l     O .bss	00000014 xSuspendedTaskList
100021c4 l     O .bss	00000014 xTasksWaitingTermination
100021d8 l     O .bss	00000004 xTickCount
100021dc l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a001bf8 l     F .text	00000020 prvGetNextExpireTime
1a001c18 l     F .text	00000048 prvInsertTimerInActiveList
1a001c60 l     F .text	0000005c prvCheckForValidListAndQueue
1a001fe4 l     F .text	00000016 prvTimerTask
1a001d78 l     F .text	00000078 prvSwitchTimerLists
1a001df0 l     F .text	0000002c prvSampleTimeNow
1a001e1c l     F .text	00000060 prvProcessExpiredTimer
1a001e7c l     F .text	00000074 prvProcessTimerOrBlockTask
1a001ef0 l     F .text	000000f4 prvProcessReceivedCommands
100021e0 l     O .bss	00000004 pxCurrentTimerList
100021e4 l     O .bss	00000004 pxOverflowTimerList
100021e8 l     O .bss	00000014 xActiveTimerList1
100021fc l     O .bss	00000014 xActiveTimerList2
10002210 l     O .bss	00000004 xLastTime.11818
10002214 l     O .bss	00000004 xTimerQueue
10002218 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a001ffc l     F .text	00000040 prvTaskExitError
1a00203c l     F .text	00000022 prvPortStartFirstTask
1a002064 l     F .text	0000000e vPortEnableVFP
1a0020d0 l       .text	00000000 pxCurrentTCBConst2
1a0021b0 l       .text	00000000 pxCurrentTCBConst
1000221c l     O .bss	00000001 ucMaxSysCallPriority
10002220 l     O .bss	00000004 ulMaxPRIGROUPValue
10000000 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 freertos_cm_support.c
00000000 l    df *ABS*	00000000 board.c
1a0023a4 l     F .text	00000044 Board_LED_Init
1a0023e8 l     F .text	00000040 Board_TEC_Init
1a002428 l     F .text	00000040 Board_GPIO_Init
1a002468 l     F .text	00000030 Board_ADC_Init
1a002498 l     F .text	00000038 Board_SPI_Init
1a0024d0 l     F .text	00000024 Board_I2C_Init
1a0048bc l     O .text	00000008 GpioButtons
1a0048c4 l     O .text	0000000c GpioLeds
1a0048d0 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a0048e8 l     O .text	00000004 InitClkStates
1a0048ec l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a002644 l     F .text	0000002c Chip_UART_GetIndex
1a004960 l     O .text	00000008 UART_BClock
1a004968 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a0027e0 l     F .text	00000014 Chip_ADC_GetClockIndex
1a0027f4 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0028bc l     F .text	000000a0 pll_calc_divs
1a00295c l     F .text	0000010c pll_get_frac
1a002a68 l     F .text	0000004c Chip_Clock_FindBaseClock
1a002cdc l     F .text	00000022 Chip_Clock_GetDivRate
10002228 l     O .bss	00000008 audio_usb_pll_freq
1a00497c l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000004 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a0049e8 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a003020 l     F .text	00000014 Chip_SSP_GetClockIndex
1a003034 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
1000003c l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_uart.c
1a004a30 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a0031a4 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10002230 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_print.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a003978 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a003d2c l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 impure.c
10000044 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a004bfc l       .init_array	00000000 __init_array_end
1a004bf8 l       .bss_RAM5	00000000 __preinit_array_end
1a004bf8 l       .init_array	00000000 __init_array_start
1a004bf8 l       .bss_RAM5	00000000 __preinit_array_start
1a002b00 g     F .text	0000001c Chip_Clock_GetDividerSource
1a0005cc g     F .text	00000012 _isatty_r
1a000310 g     F .text	00000034 buttonReleased
1a004314 g     F .text	000000dc _puts_r
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a0005de g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a002118 g     F .text	0000002c vPortExitCritical
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a0042e4 g     F .text	00000030 printf
1a00258a g     F .text	00000008 __stdio_init
10002298 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a00445a g     F .text	00000024 __sseek
1a003a28 g     F .text	00000070 __sinit
1a004488 g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a000ee8 g     F .text	00000052 vQueueWaitForMessageRestricted
1a0039cc g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a00289a g     F .text	0000000c Chip_ADC_SetResolution
1a00477c g     F .text	0000000c __malloc_unlock
1a0021b4 g     F .text	0000002c SysTick_Handler
1a0026c4 g     F .text	00000040 Chip_UART_SetBaud
10002299 g     O .bss	00000001 __lock___arc4random_mutex
1a000528  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a00252c g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a002150 g     F .text	00000064 PendSV_Handler
1a000ac8 g     F .text	000000ce xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a004c04 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
100020b4 g     O .bss	00000004 pxCurrentTCB
1a0005c2 g     F .text	0000000a _fstat_r
53ff7362 g       *ABS*	00000000 __valid_user_code_checksum
1a004c04 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1000223c g     O .bss	00000004 tiempo_down
1a0018e4 g     F .text	00000018 vTaskInternalSetTimeOutState
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a002d7e g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a002218 g     F .text	00000110 xPortStartScheduler
1a003bae g     F .text	0000001c memcpy
1a0017f0 g     F .text	00000030 vTaskPlaceOnEventList
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a0039c0 g     F .text	0000000c _cleanup_r
1a0021e0  w    F .text	00000038 vPortSetupTimerInterrupt
1a0034f0 g     F .text	00000000 .hidden __aeabi_uldivmod
100022a4 g       .noinit	00000000 _noinit
1a0043f0 g     F .text	00000010 puts
1a0006f0 g     F .text	00000016 vPortFree
10002290 g     O .bss	00000004 SystemCoreClock
1a000404 g     F .text	00000014 tarea_tecla
1a002670 g     F .text	00000054 Chip_UART_Init
1a000cf4 g     F .text	000001a4 xQueueSemaphoreTake
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a002328 g     F .text	0000005c vPortValidateInterruptPriority
1a000180  w    F .text	00000002 UsageFault_Handler
1a002dfc g     F .text	0000004c Chip_Clock_GetRate
1a000f56 g     F .text	00000016 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a0034e0 g     F .text	00000010 printInitUart
1a0025cc g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a003520 g     F .text	000002d0 .hidden __udivmoddi4
1a000660 g     F .text	00000020 _sbrk_r
1a0048b8 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a0005e8 g     F .text	0000004e _read_r
1a000f50 g     F .text	00000006 vListInitialiseItem
10002240 g     O .bss	00000004 tiempo_diff
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a000b98 g     F .text	0000015c xQueueReceive
10002250 g     O .bss	00000040 xQueueRegistry
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a004bfc g       .ARM.exidx	00000000 __exidx_start
1000229a g     O .bss	00000001 __lock___env_recursive_mutex
1a0002fc g     O .text	00000004 CRP_WORD
1000229b g     O .bss	00000001 __lock___sinit_recursive_mutex
1a004bc0 g     O .text	00000004 _global_impure_ptr
1a003b60 g     F .text	00000048 __libc_init_array
1000224c g     O .bss	00000004 sem_tec_pulsada
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a000680 g     F .text	00000070 pvPortMalloc
1a002548 g     F .text	00000030 Board_Init
1a0005b6  w    F .text	00000002 _init
1a000f3a g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a001414 g     F .text	0000000c xTaskGetTickCount
1a000948 g     F .text	00000180 xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
100022a4 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a00052c g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a002e8c g     F .text	00000038 Chip_I2C_SetClockRate
1a001a68 g     F .text	000000b4 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a002ab4 g     F .text	0000004c Chip_Clock_EnableCrystal
1000229c g     O .bss	00000001 __lock___malloc_recursive_mutex
10008000 g       *ABS*	00000000 __top_RamLoc32
1a001858 g     F .text	0000008c xTaskRemoveFromEventList
1a000ff4  w    F .text	0000001c vApplicationMallocFailedHook
1a00018a g     F .text	0000001e data_init
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a004b60 g     O .text	00000020 __sf_fake_stderr
1a002e68 g     F .text	00000024 Chip_I2C_Init
1a003bac g     F .text	00000002 __retarget_lock_release_recursive
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a002c70 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a004a78 g     O .text	000000e6 gpioPinsInit
1a000fc8  w    F .text	0000002c vAssertCalled
1a001bdc g     F .text	0000001c pvTaskIncrementMutexHeldCount
1a00304c g     F .text	00000012 Chip_SSP_SetClockRate
1a003d5a g     F .text	00000024 __sfputs_r
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a0039f8 g     F .text	0000000c __sfp_lock_acquire
1a0046d0 g     F .text	00000000 memchr
1a0018fc g     F .text	00000084 xTaskCheckForTimeOut
1a003bdc g     F .text	0000009c _free_r
1a002d58 g     F .text	00000026 Chip_Clock_GetBaseClock
1a0019ac g     F .text	000000bc xTaskPriorityInherit
100000a4 g       .bss	00000000 _bss
1a000344 g     F .text	0000000c fsmButtonError
1a002868 g     F .text	00000032 Chip_ADC_SetSampleRate
10002224 g     O .bss	00000004 freeRtosInterruptCallback
1a001404 g     F .text	00000010 vTaskSuspendAll
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a00305e g     F .text	0000003e Chip_SSP_SetBitRate
1a000fa0 g     F .text	00000026 uxListRemove
1a002ec4 g     F .text	00000002 Chip_GPIO_Init
1a0048e4 g     O .text	00000004 OscRateIn
1a003128 g     F .text	0000007c uartInit
100022a4 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a000418 g     F .text	00000070 tarea_led
1a001724 g     F .text	000000cc vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a001820 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a000300 g     F .text	00000010 buttonPressed
1a0005b8 g     F .text	0000000a _close_r
1a0031d8 g     F .text	000001ac gpioInit
1a001d0c g     F .text	0000006c xTimerGenericCommand
1a00452c g     F .text	000000dc __swsetup_r
1a001010  w    F .text	0000001c vApplicationStackOverflowHook
1a0037f0  w    F .text	00000002 .hidden __aeabi_ldiv0
1a003a98 g     F .text	0000008c __sfp
1a003a1c g     F .text	0000000c __sinit_lock_release
1a004400 g     F .text	00000022 __sread
1a003458 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a004770 g     F .text	0000000c __malloc_lock
1a002518 g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
10002244 g     O .bss	00000004 tiempo_up
1a003900 g     F .text	00000078 _fflush_r
10002248 g     O .bss	00000001 fsmButtonState
1a004b80 g     O .text	00000020 __sf_fake_stdin
1a002b1c g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a003baa g     F .text	00000002 __retarget_lock_acquire_recursive
1a003bca g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000488 g     F .text	000000a0 main
1a003ba8 g     F .text	00000002 __retarget_lock_init_recursive
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a000f6c g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a0020b0 g     F .text	00000024 SVC_Handler
1a00447e g     F .text	00000008 __sclose
1a001cbc g     F .text	00000050 xTimerCreateTimerTask
1a003c78 g     F .text	000000b4 _malloc_r
1a001634 g     F .text	000000a4 vTaskDelayUntil
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a002d8c g     F .text	0000003c Chip_Clock_EnableOpts
1a002582 g     F .text	00000008 __stdio_getchar
1a0008fe g     F .text	00000048 xQueueGenericCreate
1a002b38 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a002bf0 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a00035c g     F .text	000000a8 fsmButtonUpdate
1a0030d4 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a003384 g     F .text	0000006a gpioWrite
1a0005b4  w    F .text	00000002 _fini
1a0042e4 g     F .text	00000030 iprintf
1a001538 g     F .text	000000fc xTaskResumeAll
1a001380 g     F .text	00000084 vTaskStartScheduler
1a002828 g     F .text	00000040 Chip_ADC_Init
10002294 g     O .bss	00000004 g_pUsbApi
1a002594 g     F .text	00000038 Board_SetupMuxing
1a002704 g     F .text	000000dc Chip_UART_SetBaudFDR
1a000636 g     F .text	00000028 _write_r
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a003fd0 g     F .text	000000ea _printf_common
10000040 g     O .data	00000004 _impure_ptr
1a0037f4 g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a001980 g     F .text	0000000c vTaskMissedYield
100022a4 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a00309c g     F .text	00000038 Chip_SSP_Init
1a000e98 g     F .text	00000026 uxQueueMessagesWaiting
1a000ec0 g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a001420 g     F .text	00000118 xTaskIncrementTick
1a004608 g     F .text	00000048 __swhatbuf_r
1a002384 g     F .text	00000020 DAC_IRQHandler
1a0024f4 g     F .text	00000024 Board_Debug_Init
1a002578 g     F .text	0000000a __stdio_putchar
1a000858 g     F .text	00000084 xQueueGenericReset
100000a4 g       .data	00000000 _edata
1a002e48 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1000229d g     O .bss	00000001 __lock___at_quick_exit_mutex
1a00131c g     F .text	00000062 xTaskCreate
1a002ec8 g     F .text	00000158 Chip_SetupCoreClock
1a004422 g     F .text	00000038 __swrite
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a003d80 g     F .text	00000250 _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a003b24 g     F .text	0000003c _fwalk_reent
1a0028a8 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0016d8 g     F .text	0000004c vTaskDelay
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a003a04 g     F .text	0000000c __sfp_lock_release
1a004ba0 g     O .text	00000020 __sf_fake_stdout
1a00198c g     F .text	00000020 xTaskGetSchedulerState
1a001b1c g     F .text	000000c0 vTaskPriorityDisinheritAfterTimeout
1a0037f0  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1000229e g     O .bss	00000001 __lock___dd_hash_mutex
1a004650 g     F .text	00000080 __smakebuf_r
1000229f g     O .bss	00000001 __lock___tz_mutex
1a002078 g     F .text	0000002c pxPortInitialiseStack
1a0040bc g     F .text	00000228 _printf_i
1a002dc8 g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
10002238 g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a0033ee g     F .text	00000068 gpioRead
1a003474 g     F .text	0000006c boardInit
1a0020d4 g     F .text	00000044 vPortEnterCritical
10002234 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a003d80 g     F .text	00000250 _vfprintf_r
1a000350 g     F .text	0000000c fsmButtonInit
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a002d00 g     F .text	00000058 Chip_Clock_SetBaseClock
1a00310c g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
100022a0 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a003a10 g     F .text	0000000c __sinit_lock_acquire
1a002638 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 2d 05 00 1a 79 01 00 1a 7b 01 00 1a     ....-...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 62 73 ff 53     }...........bs.S
	...
1a00002c:	b1 20 00 1a 85 01 00 1a 00 00 00 00 51 21 00 1a     . ..........Q!..
1a00003c:	b5 21 00 1a                                         .!..

1a000040 <g_pfnVendorVectors>:
1a000040:	85 23 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     .#..............
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	59 34 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     Y4..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a004c04 	.word	0x1a004c04
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000a4 	.word	0x000000a4
1a000120:	1a004c04 	.word	0x1a004c04
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a004c04 	.word	0x1a004c04
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a004c04 	.word	0x1a004c04
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a004c04 	.word	0x1a004c04
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000a4 	.word	0x100000a4
1a000154:	00002200 	.word	0x00002200
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <buttonPressed>:
}


/* accion de el evento de tecla pulsada */
void buttonPressed( void )
{
1a000300:	b508      	push	{r3, lr}
	tiempo_down = xTaskGetTickCount();
1a000302:	f001 f887 	bl	1a001414 <xTaskGetTickCount>
1a000306:	4b01      	ldr	r3, [pc, #4]	; (1a00030c <buttonPressed+0xc>)
1a000308:	6018      	str	r0, [r3, #0]
}
1a00030a:	bd08      	pop	{r3, pc}
1a00030c:	1000223c 	.word	0x1000223c

1a000310 <buttonReleased>:

/* accion de el evento de tecla liberada */
void buttonReleased( void )
{
1a000310:	b508      	push	{r3, lr}
	tiempo_up = xTaskGetTickCount();
1a000312:	f001 f87f 	bl	1a001414 <xTaskGetTickCount>
1a000316:	4b07      	ldr	r3, [pc, #28]	; (1a000334 <buttonReleased+0x24>)
1a000318:	6018      	str	r0, [r3, #0]
	tiempo_diff = tiempo_up - tiempo_down;
1a00031a:	4b07      	ldr	r3, [pc, #28]	; (1a000338 <buttonReleased+0x28>)
1a00031c:	681b      	ldr	r3, [r3, #0]
1a00031e:	1ac0      	subs	r0, r0, r3
1a000320:	4b06      	ldr	r3, [pc, #24]	; (1a00033c <buttonReleased+0x2c>)
1a000322:	6018      	str	r0, [r3, #0]

	xSemaphoreGive(  sem_tec_pulsada );
1a000324:	2300      	movs	r3, #0
1a000326:	461a      	mov	r2, r3
1a000328:	4619      	mov	r1, r3
1a00032a:	4805      	ldr	r0, [pc, #20]	; (1a000340 <buttonReleased+0x30>)
1a00032c:	6800      	ldr	r0, [r0, #0]
1a00032e:	f000 fb0b 	bl	1a000948 <xQueueGenericSend>
}
1a000332:	bd08      	pop	{r3, pc}
1a000334:	10002244 	.word	0x10002244
1a000338:	1000223c 	.word	0x1000223c
1a00033c:	10002240 	.word	0x10002240
1a000340:	1000224c 	.word	0x1000224c

1a000344 <fsmButtonError>:

void fsmButtonError( void )
{
    fsmButtonState = BUTTON_UP;
1a000344:	4b01      	ldr	r3, [pc, #4]	; (1a00034c <fsmButtonError+0x8>)
1a000346:	2200      	movs	r2, #0
1a000348:	701a      	strb	r2, [r3, #0]
}
1a00034a:	4770      	bx	lr
1a00034c:	10002248 	.word	0x10002248

1a000350 <fsmButtonInit>:

void fsmButtonInit( void )
{
    fsmButtonState = BUTTON_UP;  // Set initial state
1a000350:	4b01      	ldr	r3, [pc, #4]	; (1a000358 <fsmButtonInit+0x8>)
1a000352:	2200      	movs	r2, #0
1a000354:	701a      	strb	r2, [r3, #0]
}
1a000356:	4770      	bx	lr
1a000358:	10002248 	.word	0x10002248

1a00035c <fsmButtonUpdate>:

#define DEBOUNCE_TIME 40

// FSM Update Sate Function
void fsmButtonUpdate( gpioMap_t tecla )
{
1a00035c:	b508      	push	{r3, lr}

    static uint8_t contFalling = 0;
    static uint8_t contRising = 0;

    switch( fsmButtonState )
1a00035e:	4b26      	ldr	r3, [pc, #152]	; (1a0003f8 <fsmButtonUpdate+0x9c>)
1a000360:	781b      	ldrb	r3, [r3, #0]
1a000362:	2b03      	cmp	r3, #3
1a000364:	d844      	bhi.n	1a0003f0 <fsmButtonUpdate+0x94>
1a000366:	e8df f003 	tbb	[pc, r3]
1a00036a:	2202      	.short	0x2202
1a00036c:	2a09      	.short	0x2a09
    {
        case STATE_BUTTON_UP:
            /* CHECK TRANSITION CONDITIONS */
            if( !gpioRead( tecla ) )
1a00036e:	f003 f83e 	bl	1a0033ee <gpioRead>
1a000372:	b958      	cbnz	r0, 1a00038c <fsmButtonUpdate+0x30>
            {
                fsmButtonState = STATE_BUTTON_FALLING;
1a000374:	4b20      	ldr	r3, [pc, #128]	; (1a0003f8 <fsmButtonUpdate+0x9c>)
1a000376:	2202      	movs	r2, #2
1a000378:	701a      	strb	r2, [r3, #0]
1a00037a:	e007      	b.n	1a00038c <fsmButtonUpdate+0x30>

        case STATE_BUTTON_FALLING:
            /* ENTRY */

            /* CHECK TRANSITION CONDITIONS */
            if( contFalling >= DEBOUNCE_TIME )
1a00037c:	4b1f      	ldr	r3, [pc, #124]	; (1a0003fc <fsmButtonUpdate+0xa0>)
1a00037e:	781b      	ldrb	r3, [r3, #0]
1a000380:	2b27      	cmp	r3, #39	; 0x27
1a000382:	d804      	bhi.n	1a00038e <fsmButtonUpdate+0x32>
                }

                contFalling = 0;
            }

            contFalling++;
1a000384:	4a1d      	ldr	r2, [pc, #116]	; (1a0003fc <fsmButtonUpdate+0xa0>)
1a000386:	7813      	ldrb	r3, [r2, #0]
1a000388:	3301      	adds	r3, #1
1a00038a:	7013      	strb	r3, [r2, #0]

        default:
            fsmButtonError();
            break;
    }
}
1a00038c:	bd08      	pop	{r3, pc}
                if( !gpioRead( tecla ) )
1a00038e:	f003 f82e 	bl	1a0033ee <gpioRead>
1a000392:	b130      	cbz	r0, 1a0003a2 <fsmButtonUpdate+0x46>
                    fsmButtonState = STATE_BUTTON_UP;
1a000394:	4b18      	ldr	r3, [pc, #96]	; (1a0003f8 <fsmButtonUpdate+0x9c>)
1a000396:	2200      	movs	r2, #0
1a000398:	701a      	strb	r2, [r3, #0]
                contFalling = 0;
1a00039a:	4b18      	ldr	r3, [pc, #96]	; (1a0003fc <fsmButtonUpdate+0xa0>)
1a00039c:	2200      	movs	r2, #0
1a00039e:	701a      	strb	r2, [r3, #0]
1a0003a0:	e7f0      	b.n	1a000384 <fsmButtonUpdate+0x28>
                    fsmButtonState = STATE_BUTTON_DOWN;
1a0003a2:	4b15      	ldr	r3, [pc, #84]	; (1a0003f8 <fsmButtonUpdate+0x9c>)
1a0003a4:	2201      	movs	r2, #1
1a0003a6:	701a      	strb	r2, [r3, #0]
                    buttonPressed();
1a0003a8:	f7ff ffaa 	bl	1a000300 <buttonPressed>
1a0003ac:	e7f5      	b.n	1a00039a <fsmButtonUpdate+0x3e>
			if( gpioRead( tecla ) )
1a0003ae:	f003 f81e 	bl	1a0033ee <gpioRead>
1a0003b2:	2800      	cmp	r0, #0
1a0003b4:	d0ea      	beq.n	1a00038c <fsmButtonUpdate+0x30>
				fsmButtonState = STATE_BUTTON_RISING;
1a0003b6:	4b10      	ldr	r3, [pc, #64]	; (1a0003f8 <fsmButtonUpdate+0x9c>)
1a0003b8:	2203      	movs	r2, #3
1a0003ba:	701a      	strb	r2, [r3, #0]
1a0003bc:	e7e6      	b.n	1a00038c <fsmButtonUpdate+0x30>
            if( contRising >= DEBOUNCE_TIME )
1a0003be:	4b10      	ldr	r3, [pc, #64]	; (1a000400 <fsmButtonUpdate+0xa4>)
1a0003c0:	781b      	ldrb	r3, [r3, #0]
1a0003c2:	2b27      	cmp	r3, #39	; 0x27
1a0003c4:	d804      	bhi.n	1a0003d0 <fsmButtonUpdate+0x74>
            contRising++;
1a0003c6:	4a0e      	ldr	r2, [pc, #56]	; (1a000400 <fsmButtonUpdate+0xa4>)
1a0003c8:	7813      	ldrb	r3, [r2, #0]
1a0003ca:	3301      	adds	r3, #1
1a0003cc:	7013      	strb	r3, [r2, #0]
            break;
1a0003ce:	e7dd      	b.n	1a00038c <fsmButtonUpdate+0x30>
                if( gpioRead( tecla ) )
1a0003d0:	f003 f80d 	bl	1a0033ee <gpioRead>
1a0003d4:	b930      	cbnz	r0, 1a0003e4 <fsmButtonUpdate+0x88>
                    fsmButtonState = STATE_BUTTON_DOWN;
1a0003d6:	4b08      	ldr	r3, [pc, #32]	; (1a0003f8 <fsmButtonUpdate+0x9c>)
1a0003d8:	2201      	movs	r2, #1
1a0003da:	701a      	strb	r2, [r3, #0]
                contRising = 0;
1a0003dc:	4b08      	ldr	r3, [pc, #32]	; (1a000400 <fsmButtonUpdate+0xa4>)
1a0003de:	2200      	movs	r2, #0
1a0003e0:	701a      	strb	r2, [r3, #0]
1a0003e2:	e7f0      	b.n	1a0003c6 <fsmButtonUpdate+0x6a>
                    fsmButtonState = STATE_BUTTON_UP;
1a0003e4:	4b04      	ldr	r3, [pc, #16]	; (1a0003f8 <fsmButtonUpdate+0x9c>)
1a0003e6:	2200      	movs	r2, #0
1a0003e8:	701a      	strb	r2, [r3, #0]
                    buttonReleased();
1a0003ea:	f7ff ff91 	bl	1a000310 <buttonReleased>
1a0003ee:	e7f5      	b.n	1a0003dc <fsmButtonUpdate+0x80>
            fsmButtonError();
1a0003f0:	f7ff ffa8 	bl	1a000344 <fsmButtonError>
}
1a0003f4:	e7ca      	b.n	1a00038c <fsmButtonUpdate+0x30>
1a0003f6:	bf00      	nop
1a0003f8:	10002248 	.word	0x10002248
1a0003fc:	100000a4 	.word	0x100000a4
1a000400:	100000a5 	.word	0x100000a5

1a000404 <tarea_tecla>:
/*==================[definiciones de funciones internas]=====================*/

/*==================[definiciones de funciones externas]=====================*/

void tarea_tecla( void* taskParmPtr )
{
1a000404:	b508      	push	{r3, lr}
	fsmButtonInit();
1a000406:	f7ff ffa3 	bl	1a000350 <fsmButtonInit>

	while( TRUE )
	{
		fsmButtonUpdate( TEC1 );
1a00040a:	2024      	movs	r0, #36	; 0x24
1a00040c:	f7ff ffa6 	bl	1a00035c <fsmButtonUpdate>
	 	vTaskDelay( BUTTON_RATE / portTICK_RATE_MS );
1a000410:	2001      	movs	r0, #1
1a000412:	f001 f961 	bl	1a0016d8 <vTaskDelay>
1a000416:	e7f8      	b.n	1a00040a <tarea_tecla+0x6>

1a000418 <tarea_led>:
	}
}

// Implementacion de funcion de la tarea
void tarea_led( void* taskParmPtr )
{
1a000418:	b500      	push	{lr}
1a00041a:	b083      	sub	sp, #12
    // ---------- CONFIGURACIONES ------------------------------
    TickType_t xPeriodicity =  LED_RATE / portTICK_RATE_MS;		// Tarea periodica cada LED_RATE ms
    TickType_t xLastWakeTime = xTaskGetTickCount();
1a00041c:	f000 fffa 	bl	1a001414 <xTaskGetTickCount>
1a000420:	9001      	str	r0, [sp, #4]
1a000422:	e010      	b.n	1a000446 <tarea_led+0x2e>
    		gpioWrite( LEDG , OFF );

    		vTaskDelayUntil( &xLastWakeTime , xPeriodicity );		// Espera a terminar el perìodo
    		}
    	else{														// si no hay semaforo
    		gpioWrite( LEDR , ON );									// Enciende led Rojo
1a000424:	2101      	movs	r1, #1
1a000426:	2028      	movs	r0, #40	; 0x28
1a000428:	f002 ffac 	bl	1a003384 <gpioWrite>
    		vTaskDelay( T_ON / portTICK_RATE_MS );
1a00042c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a000430:	f001 f952 	bl	1a0016d8 <vTaskDelay>
    		gpioWrite( LEDR , OFF );
1a000434:	2100      	movs	r1, #0
1a000436:	2028      	movs	r0, #40	; 0x28
1a000438:	f002 ffa4 	bl	1a003384 <gpioWrite>

    		vTaskDelayUntil( &xLastWakeTime , xPeriodicity );
1a00043c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
1a000440:	a801      	add	r0, sp, #4
1a000442:	f001 f8f7 	bl	1a001634 <vTaskDelayUntil>
    	if ((uxSemaphoreGetCount (sem_tec_pulsada))!=0){			// Si hay semàforo
1a000446:	4b0f      	ldr	r3, [pc, #60]	; (1a000484 <tarea_led+0x6c>)
1a000448:	6818      	ldr	r0, [r3, #0]
1a00044a:	f000 fd25 	bl	1a000e98 <uxQueueMessagesWaiting>
1a00044e:	2800      	cmp	r0, #0
1a000450:	d0e8      	beq.n	1a000424 <tarea_led+0xc>
    		xSemaphoreTake ( sem_tec_pulsada , portMAX_DELAY );		// Se toma el semaforo
1a000452:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000456:	4b0b      	ldr	r3, [pc, #44]	; (1a000484 <tarea_led+0x6c>)
1a000458:	6818      	ldr	r0, [r3, #0]
1a00045a:	f000 fc4b 	bl	1a000cf4 <xQueueSemaphoreTake>
    		gpioWrite( LEDG , ON );
1a00045e:	2101      	movs	r1, #1
1a000460:	2029      	movs	r0, #41	; 0x29
1a000462:	f002 ff8f 	bl	1a003384 <gpioWrite>
    		vTaskDelay(T_ON / portTICK_RATE_MS );
1a000466:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a00046a:	f001 f935 	bl	1a0016d8 <vTaskDelay>
    		gpioWrite( LEDG , OFF );
1a00046e:	2100      	movs	r1, #0
1a000470:	2029      	movs	r0, #41	; 0x29
1a000472:	f002 ff87 	bl	1a003384 <gpioWrite>
    		vTaskDelayUntil( &xLastWakeTime , xPeriodicity );		// Espera a terminar el perìodo
1a000476:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
1a00047a:	a801      	add	r0, sp, #4
1a00047c:	f001 f8da 	bl	1a001634 <vTaskDelayUntil>
1a000480:	e7e1      	b.n	1a000446 <tarea_led+0x2e>
1a000482:	bf00      	nop
1a000484:	1000224c 	.word	0x1000224c

1a000488 <main>:
{
1a000488:	b570      	push	{r4, r5, r6, lr}
1a00048a:	b082      	sub	sp, #8
	boardConfig();									// Inicializar y configurar la plataforma
1a00048c:	f002 fff2 	bl	1a003474 <boardInit>
	debugPrintConfigUart( UART_USB, 115200 );		// UART for debug messages
1a000490:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
1a000494:	2103      	movs	r1, #3
1a000496:	481b      	ldr	r0, [pc, #108]	; (1a000504 <main+0x7c>)
1a000498:	f003 f822 	bl	1a0034e0 <printInitUart>
	printf( "Ejercicio C_4.\r\n" );
1a00049c:	481a      	ldr	r0, [pc, #104]	; (1a000508 <main+0x80>)
1a00049e:	f003 ffa7 	bl	1a0043f0 <puts>
    xTaskCreate(
1a0004a2:	2400      	movs	r4, #0
1a0004a4:	9401      	str	r4, [sp, #4]
1a0004a6:	2501      	movs	r5, #1
1a0004a8:	9500      	str	r5, [sp, #0]
1a0004aa:	4623      	mov	r3, r4
1a0004ac:	22b4      	movs	r2, #180	; 0xb4
1a0004ae:	4917      	ldr	r1, [pc, #92]	; (1a00050c <main+0x84>)
1a0004b0:	4817      	ldr	r0, [pc, #92]	; (1a000510 <main+0x88>)
1a0004b2:	f000 ff33 	bl	1a00131c <xTaskCreate>
1a0004b6:	4606      	mov	r6, r0
    xTaskCreate(
1a0004b8:	9401      	str	r4, [sp, #4]
1a0004ba:	9500      	str	r5, [sp, #0]
1a0004bc:	4623      	mov	r3, r4
1a0004be:	22b4      	movs	r2, #180	; 0xb4
1a0004c0:	4914      	ldr	r1, [pc, #80]	; (1a000514 <main+0x8c>)
1a0004c2:	4815      	ldr	r0, [pc, #84]	; (1a000518 <main+0x90>)
1a0004c4:	f000 ff2a 	bl	1a00131c <xTaskCreate>
	if((res_A || res_B) == pdFAIL)
1a0004c8:	b906      	cbnz	r6, 1a0004cc <main+0x44>
1a0004ca:	b150      	cbz	r0, 1a0004e2 <main+0x5a>
	sem_tec_pulsada = xSemaphoreCreateBinary();
1a0004cc:	2203      	movs	r2, #3
1a0004ce:	2100      	movs	r1, #0
1a0004d0:	2001      	movs	r0, #1
1a0004d2:	f000 fa14 	bl	1a0008fe <xQueueGenericCreate>
1a0004d6:	4b11      	ldr	r3, [pc, #68]	; (1a00051c <main+0x94>)
1a0004d8:	6018      	str	r0, [r3, #0]
	if( sem_tec_pulsada == pdFALSE)
1a0004da:	b150      	cbz	r0, 1a0004f2 <main+0x6a>
    vTaskStartScheduler();					// Enciende tick | Crea idle y pone en ready | Evalua las tareas creadas | Prioridad mas alta pasa a running
1a0004dc:	f000 ff50 	bl	1a001380 <vTaskStartScheduler>
    }
1a0004e0:	e7fe      	b.n	1a0004e0 <main+0x58>
		gpioWrite( LEDR, ON );
1a0004e2:	4629      	mov	r1, r5
1a0004e4:	2028      	movs	r0, #40	; 0x28
1a0004e6:	f002 ff4d 	bl	1a003384 <gpioWrite>
		printf( "Error al crear las tareas.\r\n" );
1a0004ea:	480d      	ldr	r0, [pc, #52]	; (1a000520 <main+0x98>)
1a0004ec:	f003 ff80 	bl	1a0043f0 <puts>
		while(TRUE);						// VER ESTE LINK: https://pbs.twimg.com/media/BafQje7CcAAN5en.jpg
1a0004f0:	e7fe      	b.n	1a0004f0 <main+0x68>
		gpioWrite( LEDR, ON );
1a0004f2:	2101      	movs	r1, #1
1a0004f4:	2028      	movs	r0, #40	; 0x28
1a0004f6:	f002 ff45 	bl	1a003384 <gpioWrite>
		printf( "Error al crear los semaforos.\r\n" );
1a0004fa:	480a      	ldr	r0, [pc, #40]	; (1a000524 <main+0x9c>)
1a0004fc:	f003 ff78 	bl	1a0043f0 <puts>
		while(TRUE);						// VER ESTE LINK: https://pbs.twimg.com/media/BafQje7CcAAN5en.jpg
1a000500:	e7fe      	b.n	1a000500 <main+0x78>
1a000502:	bf00      	nop
1a000504:	100000a6 	.word	0x100000a6
1a000508:	1a004788 	.word	0x1a004788
1a00050c:	1a004798 	.word	0x1a004798
1a000510:	1a000419 	.word	0x1a000419
1a000514:	1a0047a4 	.word	0x1a0047a4
1a000518:	1a000405 	.word	0x1a000405
1a00051c:	1000224c 	.word	0x1000224c
1a000520:	1a0047b0 	.word	0x1a0047b0
1a000524:	1a0047cc 	.word	0x1a0047cc

1a000528 <initialise_monitor_handles>:
}
1a000528:	4770      	bx	lr
1a00052a:	Address 0x000000001a00052a is out of bounds.


1a00052c <Reset_Handler>:
void Reset_Handler(void) {
1a00052c:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a00052e:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000530:	4b19      	ldr	r3, [pc, #100]	; (1a000598 <Reset_Handler+0x6c>)
1a000532:	4a1a      	ldr	r2, [pc, #104]	; (1a00059c <Reset_Handler+0x70>)
1a000534:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000536:	3304      	adds	r3, #4
1a000538:	4a19      	ldr	r2, [pc, #100]	; (1a0005a0 <Reset_Handler+0x74>)
1a00053a:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00053c:	2300      	movs	r3, #0
1a00053e:	e005      	b.n	1a00054c <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000540:	4a18      	ldr	r2, [pc, #96]	; (1a0005a4 <Reset_Handler+0x78>)
1a000542:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000546:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00054a:	3301      	adds	r3, #1
1a00054c:	2b07      	cmp	r3, #7
1a00054e:	d9f7      	bls.n	1a000540 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a000550:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a000552:	4b15      	ldr	r3, [pc, #84]	; (1a0005a8 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000554:	e007      	b.n	1a000566 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a000556:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a00055a:	689a      	ldr	r2, [r3, #8]
1a00055c:	6859      	ldr	r1, [r3, #4]
1a00055e:	6818      	ldr	r0, [r3, #0]
1a000560:	f7ff fe13 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000564:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000566:	4a11      	ldr	r2, [pc, #68]	; (1a0005ac <Reset_Handler+0x80>)
1a000568:	4293      	cmp	r3, r2
1a00056a:	d3f4      	bcc.n	1a000556 <Reset_Handler+0x2a>
1a00056c:	e006      	b.n	1a00057c <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a00056e:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000570:	6859      	ldr	r1, [r3, #4]
1a000572:	f854 0b08 	ldr.w	r0, [r4], #8
1a000576:	f7ff fe17 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a00057a:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a00057c:	4a0c      	ldr	r2, [pc, #48]	; (1a0005b0 <Reset_Handler+0x84>)
1a00057e:	4293      	cmp	r3, r2
1a000580:	d3f5      	bcc.n	1a00056e <Reset_Handler+0x42>
    SystemInit();
1a000582:	f002 fda7 	bl	1a0030d4 <SystemInit>
    __libc_init_array();
1a000586:	f003 faeb 	bl	1a003b60 <__libc_init_array>
    initialise_monitor_handles();
1a00058a:	f7ff ffcd 	bl	1a000528 <initialise_monitor_handles>
    main();
1a00058e:	f7ff ff7b 	bl	1a000488 <main>
        __asm__ volatile("wfi");
1a000592:	bf30      	wfi
1a000594:	e7fd      	b.n	1a000592 <Reset_Handler+0x66>
1a000596:	bf00      	nop
1a000598:	40053100 	.word	0x40053100
1a00059c:	10df1000 	.word	0x10df1000
1a0005a0:	01dff7ff 	.word	0x01dff7ff
1a0005a4:	e000e280 	.word	0xe000e280
1a0005a8:	1a000114 	.word	0x1a000114
1a0005ac:	1a000150 	.word	0x1a000150
1a0005b0:	1a000178 	.word	0x1a000178

1a0005b4 <_fini>:
void _fini(void) {}
1a0005b4:	4770      	bx	lr

1a0005b6 <_init>:
void _init(void) {}
1a0005b6:	4770      	bx	lr

1a0005b8 <_close_r>:
   (void) __params__;
}

USED int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a0005b8:	2309      	movs	r3, #9
1a0005ba:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0005bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0005c0:	4770      	bx	lr

1a0005c2 <_fstat_r>:
}

USED int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a0005c2:	2358      	movs	r3, #88	; 0x58
1a0005c4:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0005c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0005ca:	4770      	bx	lr

1a0005cc <_isatty_r>:
   UNUSED(r);
   return 1;
}

USED int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a0005cc:	2902      	cmp	r1, #2
1a0005ce:	d904      	bls.n	1a0005da <_isatty_r+0xe>
   case 0:
   case 1:
   case 2:
       return 1;
   default:
       SET_ERR(EBADF);
1a0005d0:	2309      	movs	r3, #9
1a0005d2:	6003      	str	r3, [r0, #0]
       return -1;
1a0005d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0005d8:	4770      	bx	lr
       return 1;
1a0005da:	2001      	movs	r0, #1
   }
}
1a0005dc:	4770      	bx	lr

1a0005de <_lseek_r>:

USED _off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a0005de:	2358      	movs	r3, #88	; 0x58
1a0005e0:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0005e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0005e6:	4770      	bx	lr

1a0005e8 <_read_r>:
   }
}
*/
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a0005e8:	2902      	cmp	r1, #2
1a0005ea:	d81f      	bhi.n	1a00062c <_read_r+0x44>
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a0005ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0005f0:	461d      	mov	r5, r3
1a0005f2:	4617      	mov	r7, r2
1a0005f4:	4606      	mov	r6, r0
  size_t i = 0;
1a0005f6:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a0005f8:	42ac      	cmp	r4, r5
1a0005fa:	d211      	bcs.n	1a000620 <_read_r+0x38>
         int c = __stdio_getchar();
1a0005fc:	f001 ffc1 	bl	1a002582 <__stdio_getchar>
         if( c != -1 ){
1a000600:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a000604:	d0f8      	beq.n	1a0005f8 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a000606:	f104 0801 	add.w	r8, r4, #1
1a00060a:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a00060c:	280d      	cmp	r0, #13
1a00060e:	d003      	beq.n	1a000618 <_read_r+0x30>
1a000610:	280a      	cmp	r0, #10
1a000612:	d001      	beq.n	1a000618 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a000614:	4644      	mov	r4, r8
1a000616:	e7ef      	b.n	1a0005f8 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a000618:	f001 ffb3 	bl	1a002582 <__stdio_getchar>
               return i;
1a00061c:	4640      	mov	r0, r8
1a00061e:	e003      	b.n	1a000628 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a000620:	2313      	movs	r3, #19
1a000622:	6033      	str	r3, [r6, #0]
      return -1;
1a000624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a000628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a00062c:	2313      	movs	r3, #19
1a00062e:	6003      	str	r3, [r0, #0]
      return -1;
1a000630:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000634:	4770      	bx	lr

1a000636 <_write_r>:
   return -1;
}

USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a000636:	2902      	cmp	r1, #2
1a000638:	d80c      	bhi.n	1a000654 <_write_r+0x1e>
USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a00063a:	b570      	push	{r4, r5, r6, lr}
1a00063c:	461d      	mov	r5, r3
1a00063e:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a000640:	2400      	movs	r4, #0
1a000642:	42ac      	cmp	r4, r5
1a000644:	d204      	bcs.n	1a000650 <_write_r+0x1a>
           __stdio_putchar(((char*) b)[i]);
1a000646:	5d30      	ldrb	r0, [r6, r4]
1a000648:	f001 ff96 	bl	1a002578 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a00064c:	3401      	adds	r4, #1
1a00064e:	e7f8      	b.n	1a000642 <_write_r+0xc>
       return n;
1a000650:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a000652:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a000654:	2313      	movs	r3, #19
1a000656:	6003      	str	r3, [r0, #0]
       return -1;
1a000658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a00065c:	4770      	bx	lr
1a00065e:	Address 0x000000001a00065e is out of bounds.


1a000660 <_sbrk_r>:

USED void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a000660:	4b05      	ldr	r3, [pc, #20]	; (1a000678 <_sbrk_r+0x18>)
1a000662:	681b      	ldr	r3, [r3, #0]
1a000664:	b123      	cbz	r3, 1a000670 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a000666:	4b04      	ldr	r3, [pc, #16]	; (1a000678 <_sbrk_r+0x18>)
1a000668:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a00066a:	4401      	add	r1, r0
1a00066c:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a00066e:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a000670:	4b01      	ldr	r3, [pc, #4]	; (1a000678 <_sbrk_r+0x18>)
1a000672:	4a02      	ldr	r2, [pc, #8]	; (1a00067c <_sbrk_r+0x1c>)
1a000674:	601a      	str	r2, [r3, #0]
1a000676:	e7f6      	b.n	1a000666 <_sbrk_r+0x6>
1a000678:	100000a8 	.word	0x100000a8
1a00067c:	100022a4 	.word	0x100022a4

1a000680 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
1a000680:	b538      	push	{r3, r4, r5, lr}
1a000682:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
1a000684:	f010 0f07 	tst.w	r0, #7
1a000688:	d002      	beq.n	1a000690 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a00068a:	f020 0407 	bic.w	r4, r0, #7
1a00068e:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
1a000690:	f000 feb8 	bl	1a001404 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
1a000694:	4b13      	ldr	r3, [pc, #76]	; (1a0006e4 <pvPortMalloc+0x64>)
1a000696:	681b      	ldr	r3, [r3, #0]
1a000698:	b17b      	cbz	r3, 1a0006ba <pvPortMalloc+0x3a>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
1a00069a:	4b13      	ldr	r3, [pc, #76]	; (1a0006e8 <pvPortMalloc+0x68>)
1a00069c:	681b      	ldr	r3, [r3, #0]
1a00069e:	441c      	add	r4, r3
1a0006a0:	f641 72f7 	movw	r2, #8183	; 0x1ff7
1a0006a4:	4294      	cmp	r4, r2
1a0006a6:	d80e      	bhi.n	1a0006c6 <pvPortMalloc+0x46>
1a0006a8:	42a3      	cmp	r3, r4
1a0006aa:	d310      	bcc.n	1a0006ce <pvPortMalloc+0x4e>
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1a0006ac:	f000 ff44 	bl	1a001538 <xTaskResumeAll>
void *pvReturn = NULL;
1a0006b0:	2500      	movs	r5, #0
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
1a0006b2:	f000 fc9f 	bl	1a000ff4 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
1a0006b6:	4628      	mov	r0, r5
1a0006b8:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
1a0006ba:	4b0c      	ldr	r3, [pc, #48]	; (1a0006ec <pvPortMalloc+0x6c>)
1a0006bc:	f023 0307 	bic.w	r3, r3, #7
1a0006c0:	4a08      	ldr	r2, [pc, #32]	; (1a0006e4 <pvPortMalloc+0x64>)
1a0006c2:	6013      	str	r3, [r2, #0]
1a0006c4:	e7e9      	b.n	1a00069a <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
1a0006c6:	f000 ff37 	bl	1a001538 <xTaskResumeAll>
void *pvReturn = NULL;
1a0006ca:	2500      	movs	r5, #0
1a0006cc:	e7f1      	b.n	1a0006b2 <pvPortMalloc+0x32>
			pvReturn = pucAlignedHeap + xNextFreeByte;
1a0006ce:	4a05      	ldr	r2, [pc, #20]	; (1a0006e4 <pvPortMalloc+0x64>)
1a0006d0:	6815      	ldr	r5, [r2, #0]
1a0006d2:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
1a0006d4:	4b04      	ldr	r3, [pc, #16]	; (1a0006e8 <pvPortMalloc+0x68>)
1a0006d6:	601c      	str	r4, [r3, #0]
	( void ) xTaskResumeAll();
1a0006d8:	f000 ff2e 	bl	1a001538 <xTaskResumeAll>
		if( pvReturn == NULL )
1a0006dc:	2d00      	cmp	r5, #0
1a0006de:	d1ea      	bne.n	1a0006b6 <pvPortMalloc+0x36>
1a0006e0:	e7e7      	b.n	1a0006b2 <pvPortMalloc+0x32>
1a0006e2:	bf00      	nop
1a0006e4:	100000ac 	.word	0x100000ac
1a0006e8:	100020b0 	.word	0x100020b0
1a0006ec:	100000b8 	.word	0x100000b8

1a0006f0 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
1a0006f0:	b140      	cbz	r0, 1a000704 <vPortFree+0x14>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a0006f2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0006f6:	f383 8811 	msr	BASEPRI, r3
1a0006fa:	f3bf 8f6f 	isb	sy
1a0006fe:	f3bf 8f4f 	dsb	sy
1a000702:	e7fe      	b.n	1a000702 <vPortFree+0x12>
}
1a000704:	4770      	bx	lr

1a000706 <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
1a000706:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a000708:	b123      	cbz	r3, 1a000714 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
1a00070a:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a00070c:	6818      	ldr	r0, [r3, #0]
1a00070e:	f1c0 0007 	rsb	r0, r0, #7
1a000712:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
1a000714:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
1a000716:	4770      	bx	lr

1a000718 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a000718:	b510      	push	{r4, lr}
1a00071a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a00071c:	f001 fcda 	bl	1a0020d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a000720:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000722:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000724:	429a      	cmp	r2, r3
1a000726:	d004      	beq.n	1a000732 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a000728:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a00072a:	f001 fcf5 	bl	1a002118 <vPortExitCritical>

	return xReturn;
}
1a00072e:	4620      	mov	r0, r4
1a000730:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a000732:	2401      	movs	r4, #1
1a000734:	e7f9      	b.n	1a00072a <prvIsQueueFull+0x12>

1a000736 <prvIsQueueEmpty>:
{
1a000736:	b510      	push	{r4, lr}
1a000738:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a00073a:	f001 fccb 	bl	1a0020d4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a00073e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000740:	b923      	cbnz	r3, 1a00074c <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
1a000742:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
1a000744:	f001 fce8 	bl	1a002118 <vPortExitCritical>
}
1a000748:	4620      	mov	r0, r4
1a00074a:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
1a00074c:	2400      	movs	r4, #0
1a00074e:	e7f9      	b.n	1a000744 <prvIsQueueEmpty+0xe>

1a000750 <prvCopyDataToQueue>:
{
1a000750:	b570      	push	{r4, r5, r6, lr}
1a000752:	4604      	mov	r4, r0
1a000754:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000756:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a000758:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a00075a:	b95a      	cbnz	r2, 1a000774 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a00075c:	6803      	ldr	r3, [r0, #0]
1a00075e:	b11b      	cbz	r3, 1a000768 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a000760:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a000762:	3501      	adds	r5, #1
1a000764:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a000766:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a000768:	6840      	ldr	r0, [r0, #4]
1a00076a:	f001 f97d 	bl	1a001a68 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a00076e:	2300      	movs	r3, #0
1a000770:	6063      	str	r3, [r4, #4]
1a000772:	e7f6      	b.n	1a000762 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a000774:	b96e      	cbnz	r6, 1a000792 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a000776:	6880      	ldr	r0, [r0, #8]
1a000778:	f003 fa19 	bl	1a003bae <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a00077c:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a00077e:	68a3      	ldr	r3, [r4, #8]
1a000780:	4413      	add	r3, r2
1a000782:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000784:	6862      	ldr	r2, [r4, #4]
1a000786:	4293      	cmp	r3, r2
1a000788:	d319      	bcc.n	1a0007be <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a00078a:	6823      	ldr	r3, [r4, #0]
1a00078c:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a00078e:	2000      	movs	r0, #0
1a000790:	e7e7      	b.n	1a000762 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000792:	68c0      	ldr	r0, [r0, #12]
1a000794:	f003 fa0b 	bl	1a003bae <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a000798:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a00079a:	4252      	negs	r2, r2
1a00079c:	68e3      	ldr	r3, [r4, #12]
1a00079e:	4413      	add	r3, r2
1a0007a0:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a0007a2:	6821      	ldr	r1, [r4, #0]
1a0007a4:	428b      	cmp	r3, r1
1a0007a6:	d202      	bcs.n	1a0007ae <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a0007a8:	6863      	ldr	r3, [r4, #4]
1a0007aa:	441a      	add	r2, r3
1a0007ac:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a0007ae:	2e02      	cmp	r6, #2
1a0007b0:	d001      	beq.n	1a0007b6 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a0007b2:	2000      	movs	r0, #0
1a0007b4:	e7d5      	b.n	1a000762 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a0007b6:	b125      	cbz	r5, 1a0007c2 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a0007b8:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a0007ba:	2000      	movs	r0, #0
1a0007bc:	e7d1      	b.n	1a000762 <prvCopyDataToQueue+0x12>
1a0007be:	2000      	movs	r0, #0
1a0007c0:	e7cf      	b.n	1a000762 <prvCopyDataToQueue+0x12>
1a0007c2:	2000      	movs	r0, #0
1a0007c4:	e7cd      	b.n	1a000762 <prvCopyDataToQueue+0x12>

1a0007c6 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a0007c6:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a0007c8:	b172      	cbz	r2, 1a0007e8 <prvCopyDataFromQueue+0x22>
{
1a0007ca:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a0007cc:	68c3      	ldr	r3, [r0, #12]
1a0007ce:	4413      	add	r3, r2
1a0007d0:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a0007d2:	6844      	ldr	r4, [r0, #4]
1a0007d4:	42a3      	cmp	r3, r4
1a0007d6:	d301      	bcc.n	1a0007dc <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a0007d8:	6803      	ldr	r3, [r0, #0]
1a0007da:	60c3      	str	r3, [r0, #12]
1a0007dc:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a0007de:	68c1      	ldr	r1, [r0, #12]
1a0007e0:	4620      	mov	r0, r4
1a0007e2:	f003 f9e4 	bl	1a003bae <memcpy>
}
1a0007e6:	bd10      	pop	{r4, pc}
1a0007e8:	4770      	bx	lr

1a0007ea <prvUnlockQueue>:
{
1a0007ea:	b538      	push	{r3, r4, r5, lr}
1a0007ec:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a0007ee:	f001 fc71 	bl	1a0020d4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a0007f2:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a0007f6:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a0007f8:	e003      	b.n	1a000802 <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a0007fa:	f001 f8c1 	bl	1a001980 <vTaskMissedYield>
			--cTxLock;
1a0007fe:	3c01      	subs	r4, #1
1a000800:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000802:	2c00      	cmp	r4, #0
1a000804:	dd08      	ble.n	1a000818 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000806:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a000808:	b133      	cbz	r3, 1a000818 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a00080a:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a00080e:	f001 f823 	bl	1a001858 <xTaskRemoveFromEventList>
1a000812:	2800      	cmp	r0, #0
1a000814:	d0f3      	beq.n	1a0007fe <prvUnlockQueue+0x14>
1a000816:	e7f0      	b.n	1a0007fa <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a000818:	23ff      	movs	r3, #255	; 0xff
1a00081a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a00081e:	f001 fc7b 	bl	1a002118 <vPortExitCritical>
	taskENTER_CRITICAL();
1a000822:	f001 fc57 	bl	1a0020d4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a000826:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a00082a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a00082c:	e003      	b.n	1a000836 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a00082e:	f001 f8a7 	bl	1a001980 <vTaskMissedYield>
				--cRxLock;
1a000832:	3c01      	subs	r4, #1
1a000834:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000836:	2c00      	cmp	r4, #0
1a000838:	dd08      	ble.n	1a00084c <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a00083a:	692b      	ldr	r3, [r5, #16]
1a00083c:	b133      	cbz	r3, 1a00084c <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a00083e:	f105 0010 	add.w	r0, r5, #16
1a000842:	f001 f809 	bl	1a001858 <xTaskRemoveFromEventList>
1a000846:	2800      	cmp	r0, #0
1a000848:	d0f3      	beq.n	1a000832 <prvUnlockQueue+0x48>
1a00084a:	e7f0      	b.n	1a00082e <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a00084c:	23ff      	movs	r3, #255	; 0xff
1a00084e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a000852:	f001 fc61 	bl	1a002118 <vPortExitCritical>
}
1a000856:	bd38      	pop	{r3, r4, r5, pc}

1a000858 <xQueueGenericReset>:
{
1a000858:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a00085a:	b1e0      	cbz	r0, 1a000896 <xQueueGenericReset+0x3e>
1a00085c:	4604      	mov	r4, r0
1a00085e:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a000860:	f001 fc38 	bl	1a0020d4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a000864:	6821      	ldr	r1, [r4, #0]
1a000866:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000868:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a00086a:	fb03 1002 	mla	r0, r3, r2, r1
1a00086e:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a000870:	2000      	movs	r0, #0
1a000872:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a000874:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a000876:	3a01      	subs	r2, #1
1a000878:	fb02 1303 	mla	r3, r2, r3, r1
1a00087c:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a00087e:	23ff      	movs	r3, #255	; 0xff
1a000880:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a000884:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a000888:	b9ed      	cbnz	r5, 1a0008c6 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a00088a:	6923      	ldr	r3, [r4, #16]
1a00088c:	b963      	cbnz	r3, 1a0008a8 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a00088e:	f001 fc43 	bl	1a002118 <vPortExitCritical>
}
1a000892:	2001      	movs	r0, #1
1a000894:	bd38      	pop	{r3, r4, r5, pc}
1a000896:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00089a:	f383 8811 	msr	BASEPRI, r3
1a00089e:	f3bf 8f6f 	isb	sy
1a0008a2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a0008a6:	e7fe      	b.n	1a0008a6 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0008a8:	f104 0010 	add.w	r0, r4, #16
1a0008ac:	f000 ffd4 	bl	1a001858 <xTaskRemoveFromEventList>
1a0008b0:	2800      	cmp	r0, #0
1a0008b2:	d0ec      	beq.n	1a00088e <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
1a0008b4:	4b08      	ldr	r3, [pc, #32]	; (1a0008d8 <xQueueGenericReset+0x80>)
1a0008b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0008ba:	601a      	str	r2, [r3, #0]
1a0008bc:	f3bf 8f4f 	dsb	sy
1a0008c0:	f3bf 8f6f 	isb	sy
1a0008c4:	e7e3      	b.n	1a00088e <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a0008c6:	f104 0010 	add.w	r0, r4, #16
1a0008ca:	f000 fb36 	bl	1a000f3a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a0008ce:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0008d2:	f000 fb32 	bl	1a000f3a <vListInitialise>
1a0008d6:	e7da      	b.n	1a00088e <xQueueGenericReset+0x36>
1a0008d8:	e000ed04 	.word	0xe000ed04

1a0008dc <prvInitialiseNewQueue>:
{
1a0008dc:	b538      	push	{r3, r4, r5, lr}
1a0008de:	461d      	mov	r5, r3
1a0008e0:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a0008e2:	460b      	mov	r3, r1
1a0008e4:	b949      	cbnz	r1, 1a0008fa <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a0008e6:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a0008e8:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a0008ea:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a0008ec:	2101      	movs	r1, #1
1a0008ee:	4620      	mov	r0, r4
1a0008f0:	f7ff ffb2 	bl	1a000858 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a0008f4:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a0008f8:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a0008fa:	6022      	str	r2, [r4, #0]
1a0008fc:	e7f4      	b.n	1a0008e8 <prvInitialiseNewQueue+0xc>

1a0008fe <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a0008fe:	b940      	cbnz	r0, 1a000912 <xQueueGenericCreate+0x14>
1a000900:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000904:	f383 8811 	msr	BASEPRI, r3
1a000908:	f3bf 8f6f 	isb	sy
1a00090c:	f3bf 8f4f 	dsb	sy
1a000910:	e7fe      	b.n	1a000910 <xQueueGenericCreate+0x12>
	{
1a000912:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000914:	b083      	sub	sp, #12
1a000916:	4605      	mov	r5, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a000918:	b199      	cbz	r1, 1a000942 <xQueueGenericCreate+0x44>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00091a:	fb01 f000 	mul.w	r0, r1, r0
1a00091e:	4617      	mov	r7, r2
1a000920:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a000922:	3050      	adds	r0, #80	; 0x50
1a000924:	f7ff feac 	bl	1a000680 <pvPortMalloc>
		if( pxNewQueue != NULL )
1a000928:	4606      	mov	r6, r0
1a00092a:	b138      	cbz	r0, 1a00093c <xQueueGenericCreate+0x3e>
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a00092c:	9000      	str	r0, [sp, #0]
1a00092e:	463b      	mov	r3, r7
1a000930:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a000934:	4621      	mov	r1, r4
1a000936:	4628      	mov	r0, r5
1a000938:	f7ff ffd0 	bl	1a0008dc <prvInitialiseNewQueue>
	}
1a00093c:	4630      	mov	r0, r6
1a00093e:	b003      	add	sp, #12
1a000940:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) 0;
1a000942:	2000      	movs	r0, #0
1a000944:	e7eb      	b.n	1a00091e <xQueueGenericCreate+0x20>
1a000946:	Address 0x000000001a000946 is out of bounds.


1a000948 <xQueueGenericSend>:
{
1a000948:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00094a:	b085      	sub	sp, #20
1a00094c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a00094e:	b178      	cbz	r0, 1a000970 <xQueueGenericSend+0x28>
1a000950:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000952:	b1b1      	cbz	r1, 1a000982 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000954:	2b02      	cmp	r3, #2
1a000956:	d120      	bne.n	1a00099a <xQueueGenericSend+0x52>
1a000958:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a00095a:	2a01      	cmp	r2, #1
1a00095c:	d01d      	beq.n	1a00099a <xQueueGenericSend+0x52>
1a00095e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000962:	f383 8811 	msr	BASEPRI, r3
1a000966:	f3bf 8f6f 	isb	sy
1a00096a:	f3bf 8f4f 	dsb	sy
1a00096e:	e7fe      	b.n	1a00096e <xQueueGenericSend+0x26>
1a000970:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000974:	f383 8811 	msr	BASEPRI, r3
1a000978:	f3bf 8f6f 	isb	sy
1a00097c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a000980:	e7fe      	b.n	1a000980 <xQueueGenericSend+0x38>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000982:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000984:	2a00      	cmp	r2, #0
1a000986:	d0e5      	beq.n	1a000954 <xQueueGenericSend+0xc>
1a000988:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00098c:	f383 8811 	msr	BASEPRI, r3
1a000990:	f3bf 8f6f 	isb	sy
1a000994:	f3bf 8f4f 	dsb	sy
1a000998:	e7fe      	b.n	1a000998 <xQueueGenericSend+0x50>
1a00099a:	461e      	mov	r6, r3
1a00099c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a00099e:	f000 fff5 	bl	1a00198c <xTaskGetSchedulerState>
1a0009a2:	b950      	cbnz	r0, 1a0009ba <xQueueGenericSend+0x72>
1a0009a4:	9b01      	ldr	r3, [sp, #4]
1a0009a6:	b153      	cbz	r3, 1a0009be <xQueueGenericSend+0x76>
1a0009a8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0009ac:	f383 8811 	msr	BASEPRI, r3
1a0009b0:	f3bf 8f6f 	isb	sy
1a0009b4:	f3bf 8f4f 	dsb	sy
1a0009b8:	e7fe      	b.n	1a0009b8 <xQueueGenericSend+0x70>
1a0009ba:	2500      	movs	r5, #0
1a0009bc:	e03b      	b.n	1a000a36 <xQueueGenericSend+0xee>
1a0009be:	2500      	movs	r5, #0
1a0009c0:	e039      	b.n	1a000a36 <xQueueGenericSend+0xee>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a0009c2:	4632      	mov	r2, r6
1a0009c4:	4639      	mov	r1, r7
1a0009c6:	4620      	mov	r0, r4
1a0009c8:	f7ff fec2 	bl	1a000750 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a0009cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0009ce:	b96b      	cbnz	r3, 1a0009ec <xQueueGenericSend+0xa4>
					else if( xYieldRequired != pdFALSE )
1a0009d0:	b138      	cbz	r0, 1a0009e2 <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
1a0009d2:	4b3c      	ldr	r3, [pc, #240]	; (1a000ac4 <xQueueGenericSend+0x17c>)
1a0009d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0009d8:	601a      	str	r2, [r3, #0]
1a0009da:	f3bf 8f4f 	dsb	sy
1a0009de:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a0009e2:	f001 fb99 	bl	1a002118 <vPortExitCritical>
				return pdPASS;
1a0009e6:	2001      	movs	r0, #1
}
1a0009e8:	b005      	add	sp, #20
1a0009ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a0009ec:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0009f0:	f000 ff32 	bl	1a001858 <xTaskRemoveFromEventList>
1a0009f4:	2800      	cmp	r0, #0
1a0009f6:	d0f4      	beq.n	1a0009e2 <xQueueGenericSend+0x9a>
							queueYIELD_IF_USING_PREEMPTION();
1a0009f8:	4b32      	ldr	r3, [pc, #200]	; (1a000ac4 <xQueueGenericSend+0x17c>)
1a0009fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0009fe:	601a      	str	r2, [r3, #0]
1a000a00:	f3bf 8f4f 	dsb	sy
1a000a04:	f3bf 8f6f 	isb	sy
1a000a08:	e7eb      	b.n	1a0009e2 <xQueueGenericSend+0x9a>
					taskEXIT_CRITICAL();
1a000a0a:	f001 fb85 	bl	1a002118 <vPortExitCritical>
					return errQUEUE_FULL;
1a000a0e:	2000      	movs	r0, #0
1a000a10:	e7ea      	b.n	1a0009e8 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000a12:	a802      	add	r0, sp, #8
1a000a14:	f000 ff66 	bl	1a0018e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000a18:	2501      	movs	r5, #1
1a000a1a:	e019      	b.n	1a000a50 <xQueueGenericSend+0x108>
		prvLockQueue( pxQueue );
1a000a1c:	2300      	movs	r3, #0
1a000a1e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000a22:	e021      	b.n	1a000a68 <xQueueGenericSend+0x120>
1a000a24:	2300      	movs	r3, #0
1a000a26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000a2a:	e023      	b.n	1a000a74 <xQueueGenericSend+0x12c>
				prvUnlockQueue( pxQueue );
1a000a2c:	4620      	mov	r0, r4
1a000a2e:	f7ff fedc 	bl	1a0007ea <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000a32:	f000 fd81 	bl	1a001538 <xTaskResumeAll>
		taskENTER_CRITICAL();
1a000a36:	f001 fb4d 	bl	1a0020d4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000a3a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000a3c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000a3e:	429a      	cmp	r2, r3
1a000a40:	d3bf      	bcc.n	1a0009c2 <xQueueGenericSend+0x7a>
1a000a42:	2e02      	cmp	r6, #2
1a000a44:	d0bd      	beq.n	1a0009c2 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000a46:	9b01      	ldr	r3, [sp, #4]
1a000a48:	2b00      	cmp	r3, #0
1a000a4a:	d0de      	beq.n	1a000a0a <xQueueGenericSend+0xc2>
				else if( xEntryTimeSet == pdFALSE )
1a000a4c:	2d00      	cmp	r5, #0
1a000a4e:	d0e0      	beq.n	1a000a12 <xQueueGenericSend+0xca>
		taskEXIT_CRITICAL();
1a000a50:	f001 fb62 	bl	1a002118 <vPortExitCritical>
		vTaskSuspendAll();
1a000a54:	f000 fcd6 	bl	1a001404 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000a58:	f001 fb3c 	bl	1a0020d4 <vPortEnterCritical>
1a000a5c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000a60:	b25b      	sxtb	r3, r3
1a000a62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000a66:	d0d9      	beq.n	1a000a1c <xQueueGenericSend+0xd4>
1a000a68:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000a6c:	b25b      	sxtb	r3, r3
1a000a6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000a72:	d0d7      	beq.n	1a000a24 <xQueueGenericSend+0xdc>
1a000a74:	f001 fb50 	bl	1a002118 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000a78:	a901      	add	r1, sp, #4
1a000a7a:	a802      	add	r0, sp, #8
1a000a7c:	f000 ff3e 	bl	1a0018fc <xTaskCheckForTimeOut>
1a000a80:	b9c8      	cbnz	r0, 1a000ab6 <xQueueGenericSend+0x16e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a000a82:	4620      	mov	r0, r4
1a000a84:	f7ff fe48 	bl	1a000718 <prvIsQueueFull>
1a000a88:	2800      	cmp	r0, #0
1a000a8a:	d0cf      	beq.n	1a000a2c <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a000a8c:	9901      	ldr	r1, [sp, #4]
1a000a8e:	f104 0010 	add.w	r0, r4, #16
1a000a92:	f000 fead 	bl	1a0017f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000a96:	4620      	mov	r0, r4
1a000a98:	f7ff fea7 	bl	1a0007ea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000a9c:	f000 fd4c 	bl	1a001538 <xTaskResumeAll>
1a000aa0:	2800      	cmp	r0, #0
1a000aa2:	d1c8      	bne.n	1a000a36 <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
1a000aa4:	4b07      	ldr	r3, [pc, #28]	; (1a000ac4 <xQueueGenericSend+0x17c>)
1a000aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000aaa:	601a      	str	r2, [r3, #0]
1a000aac:	f3bf 8f4f 	dsb	sy
1a000ab0:	f3bf 8f6f 	isb	sy
1a000ab4:	e7bf      	b.n	1a000a36 <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
1a000ab6:	4620      	mov	r0, r4
1a000ab8:	f7ff fe97 	bl	1a0007ea <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000abc:	f000 fd3c 	bl	1a001538 <xTaskResumeAll>
			return errQUEUE_FULL;
1a000ac0:	2000      	movs	r0, #0
1a000ac2:	e791      	b.n	1a0009e8 <xQueueGenericSend+0xa0>
1a000ac4:	e000ed04 	.word	0xe000ed04

1a000ac8 <xQueueGenericSendFromISR>:
{
1a000ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a000acc:	b178      	cbz	r0, 1a000aee <xQueueGenericSendFromISR+0x26>
1a000ace:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000ad0:	b1b1      	cbz	r1, 1a000b00 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000ad2:	2b02      	cmp	r3, #2
1a000ad4:	d120      	bne.n	1a000b18 <xQueueGenericSendFromISR+0x50>
1a000ad6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a000ad8:	2801      	cmp	r0, #1
1a000ada:	d01d      	beq.n	1a000b18 <xQueueGenericSendFromISR+0x50>
1a000adc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ae0:	f383 8811 	msr	BASEPRI, r3
1a000ae4:	f3bf 8f6f 	isb	sy
1a000ae8:	f3bf 8f4f 	dsb	sy
1a000aec:	e7fe      	b.n	1a000aec <xQueueGenericSendFromISR+0x24>
1a000aee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000af2:	f383 8811 	msr	BASEPRI, r3
1a000af6:	f3bf 8f6f 	isb	sy
1a000afa:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a000afe:	e7fe      	b.n	1a000afe <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000b00:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a000b02:	2800      	cmp	r0, #0
1a000b04:	d0e5      	beq.n	1a000ad2 <xQueueGenericSendFromISR+0xa>
1a000b06:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b0a:	f383 8811 	msr	BASEPRI, r3
1a000b0e:	f3bf 8f6f 	isb	sy
1a000b12:	f3bf 8f4f 	dsb	sy
1a000b16:	e7fe      	b.n	1a000b16 <xQueueGenericSendFromISR+0x4e>
1a000b18:	461f      	mov	r7, r3
1a000b1a:	4690      	mov	r8, r2
1a000b1c:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a000b1e:	f001 fc03 	bl	1a002328 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a000b22:	f3ef 8611 	mrs	r6, BASEPRI
1a000b26:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b2a:	f383 8811 	msr	BASEPRI, r3
1a000b2e:	f3bf 8f6f 	isb	sy
1a000b32:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000b36:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000b38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000b3a:	429a      	cmp	r2, r3
1a000b3c:	d306      	bcc.n	1a000b4c <xQueueGenericSendFromISR+0x84>
1a000b3e:	2f02      	cmp	r7, #2
1a000b40:	d004      	beq.n	1a000b4c <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
1a000b42:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a000b44:	f386 8811 	msr	BASEPRI, r6
}
1a000b48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
1a000b4c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a000b50:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000b52:	463a      	mov	r2, r7
1a000b54:	4649      	mov	r1, r9
1a000b56:	4620      	mov	r0, r4
1a000b58:	f7ff fdfa 	bl	1a000750 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a000b5c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a000b60:	d005      	beq.n	1a000b6e <xQueueGenericSendFromISR+0xa6>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a000b62:	1c6b      	adds	r3, r5, #1
1a000b64:	b25b      	sxtb	r3, r3
1a000b66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a000b6a:	2001      	movs	r0, #1
1a000b6c:	e7ea      	b.n	1a000b44 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000b6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000b70:	b90b      	cbnz	r3, 1a000b76 <xQueueGenericSendFromISR+0xae>
			xReturn = pdPASS;
1a000b72:	2001      	movs	r0, #1
1a000b74:	e7e6      	b.n	1a000b44 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000b76:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000b7a:	f000 fe6d 	bl	1a001858 <xTaskRemoveFromEventList>
1a000b7e:	b130      	cbz	r0, 1a000b8e <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
1a000b80:	f1b8 0f00 	cmp.w	r8, #0
1a000b84:	d005      	beq.n	1a000b92 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a000b86:	2001      	movs	r0, #1
1a000b88:	f8c8 0000 	str.w	r0, [r8]
1a000b8c:	e7da      	b.n	1a000b44 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
1a000b8e:	2001      	movs	r0, #1
1a000b90:	e7d8      	b.n	1a000b44 <xQueueGenericSendFromISR+0x7c>
1a000b92:	2001      	movs	r0, #1
1a000b94:	e7d6      	b.n	1a000b44 <xQueueGenericSendFromISR+0x7c>
1a000b96:	Address 0x000000001a000b96 is out of bounds.


1a000b98 <xQueueReceive>:
{
1a000b98:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000b9a:	b085      	sub	sp, #20
1a000b9c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a000b9e:	b180      	cbz	r0, 1a000bc2 <xQueueReceive+0x2a>
1a000ba0:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000ba2:	b1b9      	cbz	r1, 1a000bd4 <xQueueReceive+0x3c>
1a000ba4:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000ba6:	f000 fef1 	bl	1a00198c <xTaskGetSchedulerState>
1a000baa:	b9f8      	cbnz	r0, 1a000bec <xQueueReceive+0x54>
1a000bac:	9b01      	ldr	r3, [sp, #4]
1a000bae:	b1fb      	cbz	r3, 1a000bf0 <xQueueReceive+0x58>
	__asm volatile
1a000bb0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000bb4:	f383 8811 	msr	BASEPRI, r3
1a000bb8:	f3bf 8f6f 	isb	sy
1a000bbc:	f3bf 8f4f 	dsb	sy
1a000bc0:	e7fe      	b.n	1a000bc0 <xQueueReceive+0x28>
1a000bc2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000bc6:	f383 8811 	msr	BASEPRI, r3
1a000bca:	f3bf 8f6f 	isb	sy
1a000bce:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
1a000bd2:	e7fe      	b.n	1a000bd2 <xQueueReceive+0x3a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000bd4:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a000bd6:	2b00      	cmp	r3, #0
1a000bd8:	d0e4      	beq.n	1a000ba4 <xQueueReceive+0xc>
1a000bda:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000bde:	f383 8811 	msr	BASEPRI, r3
1a000be2:	f3bf 8f6f 	isb	sy
1a000be6:	f3bf 8f4f 	dsb	sy
1a000bea:	e7fe      	b.n	1a000bea <xQueueReceive+0x52>
1a000bec:	2600      	movs	r6, #0
1a000bee:	e03e      	b.n	1a000c6e <xQueueReceive+0xd6>
1a000bf0:	2600      	movs	r6, #0
1a000bf2:	e03c      	b.n	1a000c6e <xQueueReceive+0xd6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a000bf4:	4639      	mov	r1, r7
1a000bf6:	4620      	mov	r0, r4
1a000bf8:	f7ff fde5 	bl	1a0007c6 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a000bfc:	3d01      	subs	r5, #1
1a000bfe:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000c00:	6923      	ldr	r3, [r4, #16]
1a000c02:	b923      	cbnz	r3, 1a000c0e <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
1a000c04:	f001 fa88 	bl	1a002118 <vPortExitCritical>
				return pdPASS;
1a000c08:	2001      	movs	r0, #1
}
1a000c0a:	b005      	add	sp, #20
1a000c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000c0e:	f104 0010 	add.w	r0, r4, #16
1a000c12:	f000 fe21 	bl	1a001858 <xTaskRemoveFromEventList>
1a000c16:	2800      	cmp	r0, #0
1a000c18:	d0f4      	beq.n	1a000c04 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
1a000c1a:	4b35      	ldr	r3, [pc, #212]	; (1a000cf0 <xQueueReceive+0x158>)
1a000c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000c20:	601a      	str	r2, [r3, #0]
1a000c22:	f3bf 8f4f 	dsb	sy
1a000c26:	f3bf 8f6f 	isb	sy
1a000c2a:	e7eb      	b.n	1a000c04 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
1a000c2c:	f001 fa74 	bl	1a002118 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a000c30:	2000      	movs	r0, #0
1a000c32:	e7ea      	b.n	1a000c0a <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000c34:	a802      	add	r0, sp, #8
1a000c36:	f000 fe55 	bl	1a0018e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000c3a:	2601      	movs	r6, #1
1a000c3c:	e021      	b.n	1a000c82 <xQueueReceive+0xea>
		prvLockQueue( pxQueue );
1a000c3e:	2300      	movs	r3, #0
1a000c40:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000c44:	e029      	b.n	1a000c9a <xQueueReceive+0x102>
1a000c46:	2300      	movs	r3, #0
1a000c48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000c4c:	e02b      	b.n	1a000ca6 <xQueueReceive+0x10e>
				prvUnlockQueue( pxQueue );
1a000c4e:	4620      	mov	r0, r4
1a000c50:	f7ff fdcb 	bl	1a0007ea <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000c54:	f000 fc70 	bl	1a001538 <xTaskResumeAll>
1a000c58:	e009      	b.n	1a000c6e <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
1a000c5a:	4620      	mov	r0, r4
1a000c5c:	f7ff fdc5 	bl	1a0007ea <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000c60:	f000 fc6a 	bl	1a001538 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000c64:	4620      	mov	r0, r4
1a000c66:	f7ff fd66 	bl	1a000736 <prvIsQueueEmpty>
1a000c6a:	2800      	cmp	r0, #0
1a000c6c:	d13d      	bne.n	1a000cea <xQueueReceive+0x152>
		taskENTER_CRITICAL();
1a000c6e:	f001 fa31 	bl	1a0020d4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000c72:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000c74:	2d00      	cmp	r5, #0
1a000c76:	d1bd      	bne.n	1a000bf4 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000c78:	9b01      	ldr	r3, [sp, #4]
1a000c7a:	2b00      	cmp	r3, #0
1a000c7c:	d0d6      	beq.n	1a000c2c <xQueueReceive+0x94>
				else if( xEntryTimeSet == pdFALSE )
1a000c7e:	2e00      	cmp	r6, #0
1a000c80:	d0d8      	beq.n	1a000c34 <xQueueReceive+0x9c>
		taskEXIT_CRITICAL();
1a000c82:	f001 fa49 	bl	1a002118 <vPortExitCritical>
		vTaskSuspendAll();
1a000c86:	f000 fbbd 	bl	1a001404 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000c8a:	f001 fa23 	bl	1a0020d4 <vPortEnterCritical>
1a000c8e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000c92:	b25b      	sxtb	r3, r3
1a000c94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000c98:	d0d1      	beq.n	1a000c3e <xQueueReceive+0xa6>
1a000c9a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000c9e:	b25b      	sxtb	r3, r3
1a000ca0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000ca4:	d0cf      	beq.n	1a000c46 <xQueueReceive+0xae>
1a000ca6:	f001 fa37 	bl	1a002118 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000caa:	a901      	add	r1, sp, #4
1a000cac:	a802      	add	r0, sp, #8
1a000cae:	f000 fe25 	bl	1a0018fc <xTaskCheckForTimeOut>
1a000cb2:	2800      	cmp	r0, #0
1a000cb4:	d1d1      	bne.n	1a000c5a <xQueueReceive+0xc2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000cb6:	4620      	mov	r0, r4
1a000cb8:	f7ff fd3d 	bl	1a000736 <prvIsQueueEmpty>
1a000cbc:	2800      	cmp	r0, #0
1a000cbe:	d0c6      	beq.n	1a000c4e <xQueueReceive+0xb6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a000cc0:	9901      	ldr	r1, [sp, #4]
1a000cc2:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000cc6:	f000 fd93 	bl	1a0017f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000cca:	4620      	mov	r0, r4
1a000ccc:	f7ff fd8d 	bl	1a0007ea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000cd0:	f000 fc32 	bl	1a001538 <xTaskResumeAll>
1a000cd4:	2800      	cmp	r0, #0
1a000cd6:	d1ca      	bne.n	1a000c6e <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
1a000cd8:	4b05      	ldr	r3, [pc, #20]	; (1a000cf0 <xQueueReceive+0x158>)
1a000cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000cde:	601a      	str	r2, [r3, #0]
1a000ce0:	f3bf 8f4f 	dsb	sy
1a000ce4:	f3bf 8f6f 	isb	sy
1a000ce8:	e7c1      	b.n	1a000c6e <xQueueReceive+0xd6>
				return errQUEUE_EMPTY;
1a000cea:	2000      	movs	r0, #0
1a000cec:	e78d      	b.n	1a000c0a <xQueueReceive+0x72>
1a000cee:	bf00      	nop
1a000cf0:	e000ed04 	.word	0xe000ed04

1a000cf4 <xQueueSemaphoreTake>:
{
1a000cf4:	b570      	push	{r4, r5, r6, lr}
1a000cf6:	b084      	sub	sp, #16
1a000cf8:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
1a000cfa:	b158      	cbz	r0, 1a000d14 <xQueueSemaphoreTake+0x20>
1a000cfc:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
1a000cfe:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a000d00:	b18b      	cbz	r3, 1a000d26 <xQueueSemaphoreTake+0x32>
1a000d02:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d06:	f383 8811 	msr	BASEPRI, r3
1a000d0a:	f3bf 8f6f 	isb	sy
1a000d0e:	f3bf 8f4f 	dsb	sy
1a000d12:	e7fe      	b.n	1a000d12 <xQueueSemaphoreTake+0x1e>
1a000d14:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d18:	f383 8811 	msr	BASEPRI, r3
1a000d1c:	f3bf 8f6f 	isb	sy
1a000d20:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
1a000d24:	e7fe      	b.n	1a000d24 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000d26:	f000 fe31 	bl	1a00198c <xTaskGetSchedulerState>
1a000d2a:	b950      	cbnz	r0, 1a000d42 <xQueueSemaphoreTake+0x4e>
1a000d2c:	9b01      	ldr	r3, [sp, #4]
1a000d2e:	b15b      	cbz	r3, 1a000d48 <xQueueSemaphoreTake+0x54>
1a000d30:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d34:	f383 8811 	msr	BASEPRI, r3
1a000d38:	f3bf 8f6f 	isb	sy
1a000d3c:	f3bf 8f4f 	dsb	sy
1a000d40:	e7fe      	b.n	1a000d40 <xQueueSemaphoreTake+0x4c>
1a000d42:	2500      	movs	r5, #0
1a000d44:	462e      	mov	r6, r5
1a000d46:	e054      	b.n	1a000df2 <xQueueSemaphoreTake+0xfe>
1a000d48:	2500      	movs	r5, #0
1a000d4a:	462e      	mov	r6, r5
1a000d4c:	e051      	b.n	1a000df2 <xQueueSemaphoreTake+0xfe>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1a000d4e:	3b01      	subs	r3, #1
1a000d50:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000d52:	6823      	ldr	r3, [r4, #0]
1a000d54:	b13b      	cbz	r3, 1a000d66 <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000d56:	6923      	ldr	r3, [r4, #16]
1a000d58:	b94b      	cbnz	r3, 1a000d6e <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
1a000d5a:	f001 f9dd 	bl	1a002118 <vPortExitCritical>
				return pdPASS;
1a000d5e:	2501      	movs	r5, #1
}
1a000d60:	4628      	mov	r0, r5
1a000d62:	b004      	add	sp, #16
1a000d64:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
1a000d66:	f000 ff39 	bl	1a001bdc <pvTaskIncrementMutexHeldCount>
1a000d6a:	6060      	str	r0, [r4, #4]
1a000d6c:	e7f3      	b.n	1a000d56 <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000d6e:	f104 0010 	add.w	r0, r4, #16
1a000d72:	f000 fd71 	bl	1a001858 <xTaskRemoveFromEventList>
1a000d76:	2800      	cmp	r0, #0
1a000d78:	d0ef      	beq.n	1a000d5a <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
1a000d7a:	4b46      	ldr	r3, [pc, #280]	; (1a000e94 <xQueueSemaphoreTake+0x1a0>)
1a000d7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000d80:	601a      	str	r2, [r3, #0]
1a000d82:	f3bf 8f4f 	dsb	sy
1a000d86:	f3bf 8f6f 	isb	sy
1a000d8a:	e7e6      	b.n	1a000d5a <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
1a000d8c:	b145      	cbz	r5, 1a000da0 <xQueueSemaphoreTake+0xac>
1a000d8e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d92:	f383 8811 	msr	BASEPRI, r3
1a000d96:	f3bf 8f6f 	isb	sy
1a000d9a:	f3bf 8f4f 	dsb	sy
1a000d9e:	e7fe      	b.n	1a000d9e <xQueueSemaphoreTake+0xaa>
					taskEXIT_CRITICAL();
1a000da0:	f001 f9ba 	bl	1a002118 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a000da4:	e7dc      	b.n	1a000d60 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000da6:	a802      	add	r0, sp, #8
1a000da8:	f000 fd9c 	bl	1a0018e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000dac:	2601      	movs	r6, #1
1a000dae:	e02a      	b.n	1a000e06 <xQueueSemaphoreTake+0x112>
		prvLockQueue( pxQueue );
1a000db0:	2300      	movs	r3, #0
1a000db2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000db6:	e032      	b.n	1a000e1e <xQueueSemaphoreTake+0x12a>
1a000db8:	2300      	movs	r3, #0
1a000dba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000dbe:	e034      	b.n	1a000e2a <xQueueSemaphoreTake+0x136>
						taskENTER_CRITICAL();
1a000dc0:	f001 f988 	bl	1a0020d4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1a000dc4:	6860      	ldr	r0, [r4, #4]
1a000dc6:	f000 fdf1 	bl	1a0019ac <xTaskPriorityInherit>
1a000dca:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
1a000dcc:	f001 f9a4 	bl	1a002118 <vPortExitCritical>
1a000dd0:	e03b      	b.n	1a000e4a <xQueueSemaphoreTake+0x156>
				prvUnlockQueue( pxQueue );
1a000dd2:	4620      	mov	r0, r4
1a000dd4:	f7ff fd09 	bl	1a0007ea <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000dd8:	f000 fbae 	bl	1a001538 <xTaskResumeAll>
1a000ddc:	e009      	b.n	1a000df2 <xQueueSemaphoreTake+0xfe>
			prvUnlockQueue( pxQueue );
1a000dde:	4620      	mov	r0, r4
1a000de0:	f7ff fd03 	bl	1a0007ea <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000de4:	f000 fba8 	bl	1a001538 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000de8:	4620      	mov	r0, r4
1a000dea:	f7ff fca4 	bl	1a000736 <prvIsQueueEmpty>
1a000dee:	2800      	cmp	r0, #0
1a000df0:	d140      	bne.n	1a000e74 <xQueueSemaphoreTake+0x180>
		taskENTER_CRITICAL();
1a000df2:	f001 f96f 	bl	1a0020d4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1a000df6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1a000df8:	2b00      	cmp	r3, #0
1a000dfa:	d1a8      	bne.n	1a000d4e <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000dfc:	9b01      	ldr	r3, [sp, #4]
1a000dfe:	2b00      	cmp	r3, #0
1a000e00:	d0c4      	beq.n	1a000d8c <xQueueSemaphoreTake+0x98>
				else if( xEntryTimeSet == pdFALSE )
1a000e02:	2e00      	cmp	r6, #0
1a000e04:	d0cf      	beq.n	1a000da6 <xQueueSemaphoreTake+0xb2>
		taskEXIT_CRITICAL();
1a000e06:	f001 f987 	bl	1a002118 <vPortExitCritical>
		vTaskSuspendAll();
1a000e0a:	f000 fafb 	bl	1a001404 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000e0e:	f001 f961 	bl	1a0020d4 <vPortEnterCritical>
1a000e12:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000e16:	b25b      	sxtb	r3, r3
1a000e18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000e1c:	d0c8      	beq.n	1a000db0 <xQueueSemaphoreTake+0xbc>
1a000e1e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000e22:	b25b      	sxtb	r3, r3
1a000e24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000e28:	d0c6      	beq.n	1a000db8 <xQueueSemaphoreTake+0xc4>
1a000e2a:	f001 f975 	bl	1a002118 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000e2e:	a901      	add	r1, sp, #4
1a000e30:	a802      	add	r0, sp, #8
1a000e32:	f000 fd63 	bl	1a0018fc <xTaskCheckForTimeOut>
1a000e36:	2800      	cmp	r0, #0
1a000e38:	d1d1      	bne.n	1a000dde <xQueueSemaphoreTake+0xea>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000e3a:	4620      	mov	r0, r4
1a000e3c:	f7ff fc7b 	bl	1a000736 <prvIsQueueEmpty>
1a000e40:	2800      	cmp	r0, #0
1a000e42:	d0c6      	beq.n	1a000dd2 <xQueueSemaphoreTake+0xde>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000e44:	6823      	ldr	r3, [r4, #0]
1a000e46:	2b00      	cmp	r3, #0
1a000e48:	d0ba      	beq.n	1a000dc0 <xQueueSemaphoreTake+0xcc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a000e4a:	9901      	ldr	r1, [sp, #4]
1a000e4c:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000e50:	f000 fcce 	bl	1a0017f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000e54:	4620      	mov	r0, r4
1a000e56:	f7ff fcc8 	bl	1a0007ea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000e5a:	f000 fb6d 	bl	1a001538 <xTaskResumeAll>
1a000e5e:	2800      	cmp	r0, #0
1a000e60:	d1c7      	bne.n	1a000df2 <xQueueSemaphoreTake+0xfe>
					portYIELD_WITHIN_API();
1a000e62:	4b0c      	ldr	r3, [pc, #48]	; (1a000e94 <xQueueSemaphoreTake+0x1a0>)
1a000e64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000e68:	601a      	str	r2, [r3, #0]
1a000e6a:	f3bf 8f4f 	dsb	sy
1a000e6e:	f3bf 8f6f 	isb	sy
1a000e72:	e7be      	b.n	1a000df2 <xQueueSemaphoreTake+0xfe>
					if( xInheritanceOccurred != pdFALSE )
1a000e74:	b90d      	cbnz	r5, 1a000e7a <xQueueSemaphoreTake+0x186>
				return errQUEUE_EMPTY;
1a000e76:	2500      	movs	r5, #0
1a000e78:	e772      	b.n	1a000d60 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
1a000e7a:	f001 f92b 	bl	1a0020d4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1a000e7e:	4620      	mov	r0, r4
1a000e80:	f7ff fc41 	bl	1a000706 <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
1a000e84:	4601      	mov	r1, r0
1a000e86:	6860      	ldr	r0, [r4, #4]
1a000e88:	f000 fe48 	bl	1a001b1c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
1a000e8c:	f001 f944 	bl	1a002118 <vPortExitCritical>
1a000e90:	e7f1      	b.n	1a000e76 <xQueueSemaphoreTake+0x182>
1a000e92:	bf00      	nop
1a000e94:	e000ed04 	.word	0xe000ed04

1a000e98 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
1a000e98:	b140      	cbz	r0, 1a000eac <uxQueueMessagesWaiting+0x14>
{
1a000e9a:	b510      	push	{r4, lr}
1a000e9c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a000e9e:	f001 f919 	bl	1a0020d4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1a000ea2:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
1a000ea4:	f001 f938 	bl	1a002118 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1a000ea8:	4620      	mov	r0, r4
1a000eaa:	bd10      	pop	{r4, pc}
1a000eac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000eb0:	f383 8811 	msr	BASEPRI, r3
1a000eb4:	f3bf 8f6f 	isb	sy
1a000eb8:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
1a000ebc:	e7fe      	b.n	1a000ebc <uxQueueMessagesWaiting+0x24>
1a000ebe:	Address 0x000000001a000ebe is out of bounds.


1a000ec0 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a000ec0:	2300      	movs	r3, #0
1a000ec2:	2b07      	cmp	r3, #7
1a000ec4:	d80c      	bhi.n	1a000ee0 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a000ec6:	4a07      	ldr	r2, [pc, #28]	; (1a000ee4 <vQueueAddToRegistry+0x24>)
1a000ec8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a000ecc:	b10a      	cbz	r2, 1a000ed2 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a000ece:	3301      	adds	r3, #1
1a000ed0:	e7f7      	b.n	1a000ec2 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a000ed2:	4a04      	ldr	r2, [pc, #16]	; (1a000ee4 <vQueueAddToRegistry+0x24>)
1a000ed4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a000ed8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a000edc:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a000ede:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a000ee0:	4770      	bx	lr
1a000ee2:	bf00      	nop
1a000ee4:	10002250 	.word	0x10002250

1a000ee8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a000ee8:	b570      	push	{r4, r5, r6, lr}
1a000eea:	4604      	mov	r4, r0
1a000eec:	460d      	mov	r5, r1
1a000eee:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a000ef0:	f001 f8f0 	bl	1a0020d4 <vPortEnterCritical>
1a000ef4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000ef8:	b25b      	sxtb	r3, r3
1a000efa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000efe:	d00d      	beq.n	1a000f1c <vQueueWaitForMessageRestricted+0x34>
1a000f00:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000f04:	b25b      	sxtb	r3, r3
1a000f06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000f0a:	d00b      	beq.n	1a000f24 <vQueueWaitForMessageRestricted+0x3c>
1a000f0c:	f001 f904 	bl	1a002118 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a000f10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000f12:	b15b      	cbz	r3, 1a000f2c <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a000f14:	4620      	mov	r0, r4
1a000f16:	f7ff fc68 	bl	1a0007ea <prvUnlockQueue>
	}
1a000f1a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a000f1c:	2300      	movs	r3, #0
1a000f1e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000f22:	e7ed      	b.n	1a000f00 <vQueueWaitForMessageRestricted+0x18>
1a000f24:	2300      	movs	r3, #0
1a000f26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000f2a:	e7ef      	b.n	1a000f0c <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a000f2c:	4632      	mov	r2, r6
1a000f2e:	4629      	mov	r1, r5
1a000f30:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000f34:	f000 fc74 	bl	1a001820 <vTaskPlaceOnEventListRestricted>
1a000f38:	e7ec      	b.n	1a000f14 <vQueueWaitForMessageRestricted+0x2c>

1a000f3a <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000f3a:	f100 0308 	add.w	r3, r0, #8
1a000f3e:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a000f40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000f44:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000f46:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000f48:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a000f4a:	2300      	movs	r3, #0
1a000f4c:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a000f4e:	4770      	bx	lr

1a000f50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a000f50:	2300      	movs	r3, #0
1a000f52:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a000f54:	4770      	bx	lr

1a000f56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a000f56:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a000f58:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a000f5a:	689a      	ldr	r2, [r3, #8]
1a000f5c:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a000f5e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a000f60:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a000f62:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a000f64:	6803      	ldr	r3, [r0, #0]
1a000f66:	3301      	adds	r3, #1
1a000f68:	6003      	str	r3, [r0, #0]
}
1a000f6a:	4770      	bx	lr

1a000f6c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a000f6c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a000f6e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a000f70:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a000f74:	d002      	beq.n	1a000f7c <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000f76:	f100 0208 	add.w	r2, r0, #8
1a000f7a:	e002      	b.n	1a000f82 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a000f7c:	6902      	ldr	r2, [r0, #16]
1a000f7e:	e004      	b.n	1a000f8a <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000f80:	461a      	mov	r2, r3
1a000f82:	6853      	ldr	r3, [r2, #4]
1a000f84:	681c      	ldr	r4, [r3, #0]
1a000f86:	42ac      	cmp	r4, r5
1a000f88:	d9fa      	bls.n	1a000f80 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a000f8a:	6853      	ldr	r3, [r2, #4]
1a000f8c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a000f8e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a000f90:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a000f92:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a000f94:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a000f96:	6803      	ldr	r3, [r0, #0]
1a000f98:	3301      	adds	r3, #1
1a000f9a:	6003      	str	r3, [r0, #0]
}
1a000f9c:	bc30      	pop	{r4, r5}
1a000f9e:	4770      	bx	lr

1a000fa0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a000fa0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a000fa2:	6841      	ldr	r1, [r0, #4]
1a000fa4:	6882      	ldr	r2, [r0, #8]
1a000fa6:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a000fa8:	6841      	ldr	r1, [r0, #4]
1a000faa:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a000fac:	685a      	ldr	r2, [r3, #4]
1a000fae:	4282      	cmp	r2, r0
1a000fb0:	d006      	beq.n	1a000fc0 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a000fb2:	2200      	movs	r2, #0
1a000fb4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a000fb6:	681a      	ldr	r2, [r3, #0]
1a000fb8:	3a01      	subs	r2, #1
1a000fba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a000fbc:	6818      	ldr	r0, [r3, #0]
}
1a000fbe:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a000fc0:	6882      	ldr	r2, [r0, #8]
1a000fc2:	605a      	str	r2, [r3, #4]
1a000fc4:	e7f5      	b.n	1a000fb2 <uxListRemove+0x12>
1a000fc6:	Address 0x000000001a000fc6 is out of bounds.


1a000fc8 <vAssertCalled>:
#include <task.h>

#define WEAK __attribute__ ((weak))

WEAK void vAssertCalled( uint32_t ulLine, const char * const pcFile )
{
1a000fc8:	b510      	push	{r4, lr}
1a000fca:	b082      	sub	sp, #8
1a000fcc:	460c      	mov	r4, r1
// The following two variables are just to ensure the parameters are not
// optimised away and therefore unavailable when viewed in the debugger.
   volatile uint32_t ulLineNumber = ulLine, ulSetNonZeroInDebuggerToReturn = 0;
1a000fce:	9001      	str	r0, [sp, #4]
1a000fd0:	2300      	movs	r3, #0
1a000fd2:	9300      	str	r3, [sp, #0]
   volatile const char * const pcFileName = pcFile;

   taskENTER_CRITICAL();
1a000fd4:	f001 f87e 	bl	1a0020d4 <vPortEnterCritical>
   {
      printf( "\r\nvAssertCalled()\r\n   LLine Number = %d\r\n   File Name = %s\r\n\r\n",
1a000fd8:	9901      	ldr	r1, [sp, #4]
1a000fda:	4622      	mov	r2, r4
1a000fdc:	4804      	ldr	r0, [pc, #16]	; (1a000ff0 <vAssertCalled+0x28>)
1a000fde:	f003 f981 	bl	1a0042e4 <iprintf>
              ulLineNumber, pcFileName ); // @Eric
      while( ulSetNonZeroInDebuggerToReturn == 0 ) {
1a000fe2:	9b00      	ldr	r3, [sp, #0]
1a000fe4:	2b00      	cmp	r3, #0
1a000fe6:	d0fc      	beq.n	1a000fe2 <vAssertCalled+0x1a>
         // If you want to set out of this function in the debugger to see
         // the assert() location then set ulSetNonZeroInDebuggerToReturn to a
         // non-zero value.
      }
   }
   taskEXIT_CRITICAL();
1a000fe8:	f001 f896 	bl	1a002118 <vPortExitCritical>

//   printf( "Stop in a while(1)\r\n\r\n" ); // @Eric
//   while(1); // @Eric
}
1a000fec:	b002      	add	sp, #8
1a000fee:	bd10      	pop	{r4, pc}
1a000ff0:	1a004860 	.word	0x1a004860

1a000ff4 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

WEAK void vApplicationMallocFailedHook( void )
{
1a000ff4:	b508      	push	{r3, lr}
   // parts of the demo application.  If heap_1.c, heap_2.c or heap_4.c are used,
   // then the size of the heap available to pvPortMalloc() is defined by
   // configTOTAL_HEAP_SIZE in FreeRTOSConfig.h, and the xPortGetFreeHeapSize()
   // API function can be used to query the size of free heap space that remains.
   // More information is provided in the book text.
   printf( "Application Malloc Failed Hook!\r\n" );
1a000ff6:	4804      	ldr	r0, [pc, #16]	; (1a001008 <vApplicationMallocFailedHook+0x14>)
1a000ff8:	f003 f9fa 	bl	1a0043f0 <puts>
   vAssertCalled( __LINE__, __FILE__ );
1a000ffc:	4903      	ldr	r1, [pc, #12]	; (1a00100c <vApplicationMallocFailedHook+0x18>)
1a000ffe:	202c      	movs	r0, #44	; 0x2c
1a001000:	f7ff ffe2 	bl	1a000fc8 <vAssertCalled>
}
1a001004:	bd08      	pop	{r3, pc}
1a001006:	bf00      	nop
1a001008:	1a0047ec 	.word	0x1a0047ec
1a00100c:	1a004810 	.word	0x1a004810

1a001010 <vApplicationStackOverflowHook>:
}
#endif /* 0 */
/*-----------------------------------------------------------*/

WEAK void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
1a001010:	b508      	push	{r3, lr}

   // Run time stack overflow checking is performed if
   // configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   // called if a stack overflow is detected. More information is provided in the
   // book text.
   printf( "\r\nApplication Stack Overflow!! on Task: %s\r\n", (char*)pcTaskName );
1a001012:	4804      	ldr	r0, [pc, #16]	; (1a001024 <vApplicationStackOverflowHook+0x14>)
1a001014:	f003 f966 	bl	1a0042e4 <iprintf>
   vAssertCalled( __LINE__, __FILE__ );
1a001018:	4903      	ldr	r1, [pc, #12]	; (1a001028 <vApplicationStackOverflowHook+0x18>)
1a00101a:	2050      	movs	r0, #80	; 0x50
1a00101c:	f7ff ffd4 	bl	1a000fc8 <vAssertCalled>
}
1a001020:	bd08      	pop	{r3, pc}
1a001022:	bf00      	nop
1a001024:	1a004830 	.word	0x1a004830
1a001028:	1a004810 	.word	0x1a004810

1a00102c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a00102c:	4b08      	ldr	r3, [pc, #32]	; (1a001050 <prvResetNextTaskUnblockTime+0x24>)
1a00102e:	681b      	ldr	r3, [r3, #0]
1a001030:	681b      	ldr	r3, [r3, #0]
1a001032:	b923      	cbnz	r3, 1a00103e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
1a001034:	4b07      	ldr	r3, [pc, #28]	; (1a001054 <prvResetNextTaskUnblockTime+0x28>)
1a001036:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00103a:	601a      	str	r2, [r3, #0]
1a00103c:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a00103e:	4b04      	ldr	r3, [pc, #16]	; (1a001050 <prvResetNextTaskUnblockTime+0x24>)
1a001040:	681b      	ldr	r3, [r3, #0]
1a001042:	68db      	ldr	r3, [r3, #12]
1a001044:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a001046:	685a      	ldr	r2, [r3, #4]
1a001048:	4b02      	ldr	r3, [pc, #8]	; (1a001054 <prvResetNextTaskUnblockTime+0x28>)
1a00104a:	601a      	str	r2, [r3, #0]
	}
}
1a00104c:	4770      	bx	lr
1a00104e:	bf00      	nop
1a001050:	100020b8 	.word	0x100020b8
1a001054:	10002190 	.word	0x10002190

1a001058 <prvDeleteTCB>:
	{
1a001058:	b510      	push	{r4, lr}
1a00105a:	4604      	mov	r4, r0
			vPortFree( pxTCB->pxStack );
1a00105c:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a00105e:	f7ff fb47 	bl	1a0006f0 <vPortFree>
			vPortFree( pxTCB );
1a001062:	4620      	mov	r0, r4
1a001064:	f7ff fb44 	bl	1a0006f0 <vPortFree>
	}
1a001068:	bd10      	pop	{r4, pc}

1a00106a <prvInitialiseNewTask>:
{
1a00106a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00106e:	4681      	mov	r9, r0
1a001070:	460d      	mov	r5, r1
1a001072:	4617      	mov	r7, r2
1a001074:	469a      	mov	sl, r3
1a001076:	9e08      	ldr	r6, [sp, #32]
1a001078:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a00107c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a00107e:	0092      	lsls	r2, r2, #2
1a001080:	21a5      	movs	r1, #165	; 0xa5
1a001082:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a001084:	f002 fda1 	bl	1a003bca <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a001088:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a00108a:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a00108e:	3a01      	subs	r2, #1
1a001090:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a001094:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a001098:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a00109a:	2300      	movs	r3, #0
1a00109c:	2b0f      	cmp	r3, #15
1a00109e:	d806      	bhi.n	1a0010ae <prvInitialiseNewTask+0x44>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a0010a0:	5cea      	ldrb	r2, [r5, r3]
1a0010a2:	18e1      	adds	r1, r4, r3
1a0010a4:	f881 2034 	strb.w	r2, [r1, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a0010a8:	b10a      	cbz	r2, 1a0010ae <prvInitialiseNewTask+0x44>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a0010aa:	3301      	adds	r3, #1
1a0010ac:	e7f6      	b.n	1a00109c <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a0010ae:	2300      	movs	r3, #0
1a0010b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a0010b4:	2e06      	cmp	r6, #6
1a0010b6:	d900      	bls.n	1a0010ba <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a0010b8:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a0010ba:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a0010bc:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a0010be:	2500      	movs	r5, #0
1a0010c0:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a0010c2:	1d20      	adds	r0, r4, #4
1a0010c4:	f7ff ff44 	bl	1a000f50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a0010c8:	f104 0018 	add.w	r0, r4, #24
1a0010cc:	f7ff ff40 	bl	1a000f50 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a0010d0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0010d2:	f1c6 0607 	rsb	r6, r6, #7
1a0010d6:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a0010d8:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a0010da:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a0010dc:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a0010e0:	4652      	mov	r2, sl
1a0010e2:	4649      	mov	r1, r9
1a0010e4:	4638      	mov	r0, r7
1a0010e6:	f000 ffc7 	bl	1a002078 <pxPortInitialiseStack>
1a0010ea:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a0010ec:	f1b8 0f00 	cmp.w	r8, #0
1a0010f0:	d001      	beq.n	1a0010f6 <prvInitialiseNewTask+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a0010f2:	f8c8 4000 	str.w	r4, [r8]
}
1a0010f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0010fa:	Address 0x000000001a0010fa is out of bounds.


1a0010fc <prvInitialiseTaskLists>:
{
1a0010fc:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a0010fe:	2400      	movs	r4, #0
1a001100:	2c06      	cmp	r4, #6
1a001102:	d808      	bhi.n	1a001116 <prvInitialiseTaskLists+0x1a>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a001104:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a001108:	0093      	lsls	r3, r2, #2
1a00110a:	480e      	ldr	r0, [pc, #56]	; (1a001144 <prvInitialiseTaskLists+0x48>)
1a00110c:	4418      	add	r0, r3
1a00110e:	f7ff ff14 	bl	1a000f3a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001112:	3401      	adds	r4, #1
1a001114:	e7f4      	b.n	1a001100 <prvInitialiseTaskLists+0x4>
	vListInitialise( &xDelayedTaskList1 );
1a001116:	4d0c      	ldr	r5, [pc, #48]	; (1a001148 <prvInitialiseTaskLists+0x4c>)
1a001118:	4628      	mov	r0, r5
1a00111a:	f7ff ff0e 	bl	1a000f3a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a00111e:	4c0b      	ldr	r4, [pc, #44]	; (1a00114c <prvInitialiseTaskLists+0x50>)
1a001120:	4620      	mov	r0, r4
1a001122:	f7ff ff0a 	bl	1a000f3a <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a001126:	480a      	ldr	r0, [pc, #40]	; (1a001150 <prvInitialiseTaskLists+0x54>)
1a001128:	f7ff ff07 	bl	1a000f3a <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a00112c:	4809      	ldr	r0, [pc, #36]	; (1a001154 <prvInitialiseTaskLists+0x58>)
1a00112e:	f7ff ff04 	bl	1a000f3a <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a001132:	4809      	ldr	r0, [pc, #36]	; (1a001158 <prvInitialiseTaskLists+0x5c>)
1a001134:	f7ff ff01 	bl	1a000f3a <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a001138:	4b08      	ldr	r3, [pc, #32]	; (1a00115c <prvInitialiseTaskLists+0x60>)
1a00113a:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a00113c:	4b08      	ldr	r3, [pc, #32]	; (1a001160 <prvInitialiseTaskLists+0x64>)
1a00113e:	601c      	str	r4, [r3, #0]
}
1a001140:	bd38      	pop	{r3, r4, r5, pc}
1a001142:	bf00      	nop
1a001144:	100020c0 	.word	0x100020c0
1a001148:	10002164 	.word	0x10002164
1a00114c:	10002178 	.word	0x10002178
1a001150:	10002198 	.word	0x10002198
1a001154:	100021c4 	.word	0x100021c4
1a001158:	100021b0 	.word	0x100021b0
1a00115c:	100020b8 	.word	0x100020b8
1a001160:	100020bc 	.word	0x100020bc

1a001164 <prvAddNewTaskToReadyList>:
{
1a001164:	b510      	push	{r4, lr}
1a001166:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a001168:	f000 ffb4 	bl	1a0020d4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a00116c:	4a21      	ldr	r2, [pc, #132]	; (1a0011f4 <prvAddNewTaskToReadyList+0x90>)
1a00116e:	6813      	ldr	r3, [r2, #0]
1a001170:	3301      	adds	r3, #1
1a001172:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a001174:	4b20      	ldr	r3, [pc, #128]	; (1a0011f8 <prvAddNewTaskToReadyList+0x94>)
1a001176:	681b      	ldr	r3, [r3, #0]
1a001178:	b15b      	cbz	r3, 1a001192 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a00117a:	4b20      	ldr	r3, [pc, #128]	; (1a0011fc <prvAddNewTaskToReadyList+0x98>)
1a00117c:	681b      	ldr	r3, [r3, #0]
1a00117e:	b96b      	cbnz	r3, 1a00119c <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a001180:	4b1d      	ldr	r3, [pc, #116]	; (1a0011f8 <prvAddNewTaskToReadyList+0x94>)
1a001182:	681b      	ldr	r3, [r3, #0]
1a001184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001186:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001188:	429a      	cmp	r2, r3
1a00118a:	d807      	bhi.n	1a00119c <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a00118c:	4b1a      	ldr	r3, [pc, #104]	; (1a0011f8 <prvAddNewTaskToReadyList+0x94>)
1a00118e:	601c      	str	r4, [r3, #0]
1a001190:	e004      	b.n	1a00119c <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a001192:	4b19      	ldr	r3, [pc, #100]	; (1a0011f8 <prvAddNewTaskToReadyList+0x94>)
1a001194:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a001196:	6813      	ldr	r3, [r2, #0]
1a001198:	2b01      	cmp	r3, #1
1a00119a:	d027      	beq.n	1a0011ec <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a00119c:	4a18      	ldr	r2, [pc, #96]	; (1a001200 <prvAddNewTaskToReadyList+0x9c>)
1a00119e:	6813      	ldr	r3, [r2, #0]
1a0011a0:	3301      	adds	r3, #1
1a0011a2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a0011a4:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a0011a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0011a8:	2201      	movs	r2, #1
1a0011aa:	409a      	lsls	r2, r3
1a0011ac:	4915      	ldr	r1, [pc, #84]	; (1a001204 <prvAddNewTaskToReadyList+0xa0>)
1a0011ae:	6808      	ldr	r0, [r1, #0]
1a0011b0:	4302      	orrs	r2, r0
1a0011b2:	600a      	str	r2, [r1, #0]
1a0011b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0011b8:	009a      	lsls	r2, r3, #2
1a0011ba:	1d21      	adds	r1, r4, #4
1a0011bc:	4812      	ldr	r0, [pc, #72]	; (1a001208 <prvAddNewTaskToReadyList+0xa4>)
1a0011be:	4410      	add	r0, r2
1a0011c0:	f7ff fec9 	bl	1a000f56 <vListInsertEnd>
	taskEXIT_CRITICAL();
1a0011c4:	f000 ffa8 	bl	1a002118 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a0011c8:	4b0c      	ldr	r3, [pc, #48]	; (1a0011fc <prvAddNewTaskToReadyList+0x98>)
1a0011ca:	681b      	ldr	r3, [r3, #0]
1a0011cc:	b16b      	cbz	r3, 1a0011ea <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a0011ce:	4b0a      	ldr	r3, [pc, #40]	; (1a0011f8 <prvAddNewTaskToReadyList+0x94>)
1a0011d0:	681b      	ldr	r3, [r3, #0]
1a0011d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0011d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0011d6:	429a      	cmp	r2, r3
1a0011d8:	d207      	bcs.n	1a0011ea <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a0011da:	4b0c      	ldr	r3, [pc, #48]	; (1a00120c <prvAddNewTaskToReadyList+0xa8>)
1a0011dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0011e0:	601a      	str	r2, [r3, #0]
1a0011e2:	f3bf 8f4f 	dsb	sy
1a0011e6:	f3bf 8f6f 	isb	sy
}
1a0011ea:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a0011ec:	f7ff ff86 	bl	1a0010fc <prvInitialiseTaskLists>
1a0011f0:	e7d4      	b.n	1a00119c <prvAddNewTaskToReadyList+0x38>
1a0011f2:	bf00      	nop
1a0011f4:	1000214c 	.word	0x1000214c
1a0011f8:	100020b4 	.word	0x100020b4
1a0011fc:	100021ac 	.word	0x100021ac
1a001200:	1000215c 	.word	0x1000215c
1a001204:	10002160 	.word	0x10002160
1a001208:	100020c0 	.word	0x100020c0
1a00120c:	e000ed04 	.word	0xe000ed04

1a001210 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001210:	4b0f      	ldr	r3, [pc, #60]	; (1a001250 <prvCheckTasksWaitingTermination+0x40>)
1a001212:	681b      	ldr	r3, [r3, #0]
1a001214:	b1d3      	cbz	r3, 1a00124c <prvCheckTasksWaitingTermination+0x3c>
{
1a001216:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a001218:	f000 ff5c 	bl	1a0020d4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a00121c:	4b0d      	ldr	r3, [pc, #52]	; (1a001254 <prvCheckTasksWaitingTermination+0x44>)
1a00121e:	68db      	ldr	r3, [r3, #12]
1a001220:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001222:	1d20      	adds	r0, r4, #4
1a001224:	f7ff febc 	bl	1a000fa0 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a001228:	4a0b      	ldr	r2, [pc, #44]	; (1a001258 <prvCheckTasksWaitingTermination+0x48>)
1a00122a:	6813      	ldr	r3, [r2, #0]
1a00122c:	3b01      	subs	r3, #1
1a00122e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a001230:	4a07      	ldr	r2, [pc, #28]	; (1a001250 <prvCheckTasksWaitingTermination+0x40>)
1a001232:	6813      	ldr	r3, [r2, #0]
1a001234:	3b01      	subs	r3, #1
1a001236:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a001238:	f000 ff6e 	bl	1a002118 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a00123c:	4620      	mov	r0, r4
1a00123e:	f7ff ff0b 	bl	1a001058 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001242:	4b03      	ldr	r3, [pc, #12]	; (1a001250 <prvCheckTasksWaitingTermination+0x40>)
1a001244:	681b      	ldr	r3, [r3, #0]
1a001246:	2b00      	cmp	r3, #0
1a001248:	d1e6      	bne.n	1a001218 <prvCheckTasksWaitingTermination+0x8>
}
1a00124a:	bd10      	pop	{r4, pc}
1a00124c:	4770      	bx	lr
1a00124e:	bf00      	nop
1a001250:	10002150 	.word	0x10002150
1a001254:	100021c4 	.word	0x100021c4
1a001258:	1000214c 	.word	0x1000214c

1a00125c <prvIdleTask>:
{
1a00125c:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a00125e:	f7ff ffd7 	bl	1a001210 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a001262:	4b06      	ldr	r3, [pc, #24]	; (1a00127c <prvIdleTask+0x20>)
1a001264:	681b      	ldr	r3, [r3, #0]
1a001266:	2b01      	cmp	r3, #1
1a001268:	d9f9      	bls.n	1a00125e <prvIdleTask+0x2>
				taskYIELD();
1a00126a:	4b05      	ldr	r3, [pc, #20]	; (1a001280 <prvIdleTask+0x24>)
1a00126c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001270:	601a      	str	r2, [r3, #0]
1a001272:	f3bf 8f4f 	dsb	sy
1a001276:	f3bf 8f6f 	isb	sy
1a00127a:	e7f0      	b.n	1a00125e <prvIdleTask+0x2>
1a00127c:	100020c0 	.word	0x100020c0
1a001280:	e000ed04 	.word	0xe000ed04

1a001284 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a001284:	b570      	push	{r4, r5, r6, lr}
1a001286:	4604      	mov	r4, r0
1a001288:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a00128a:	4b1d      	ldr	r3, [pc, #116]	; (1a001300 <prvAddCurrentTaskToDelayedList+0x7c>)
1a00128c:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a00128e:	4b1d      	ldr	r3, [pc, #116]	; (1a001304 <prvAddCurrentTaskToDelayedList+0x80>)
1a001290:	6818      	ldr	r0, [r3, #0]
1a001292:	3004      	adds	r0, #4
1a001294:	f7ff fe84 	bl	1a000fa0 <uxListRemove>
1a001298:	b950      	cbnz	r0, 1a0012b0 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a00129a:	4b1a      	ldr	r3, [pc, #104]	; (1a001304 <prvAddCurrentTaskToDelayedList+0x80>)
1a00129c:	681b      	ldr	r3, [r3, #0]
1a00129e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0012a0:	2301      	movs	r3, #1
1a0012a2:	fa03 f202 	lsl.w	r2, r3, r2
1a0012a6:	4918      	ldr	r1, [pc, #96]	; (1a001308 <prvAddCurrentTaskToDelayedList+0x84>)
1a0012a8:	680b      	ldr	r3, [r1, #0]
1a0012aa:	ea23 0302 	bic.w	r3, r3, r2
1a0012ae:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a0012b0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a0012b4:	d00d      	beq.n	1a0012d2 <prvAddCurrentTaskToDelayedList+0x4e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a0012b6:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a0012b8:	4b12      	ldr	r3, [pc, #72]	; (1a001304 <prvAddCurrentTaskToDelayedList+0x80>)
1a0012ba:	681b      	ldr	r3, [r3, #0]
1a0012bc:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a0012be:	42a5      	cmp	r5, r4
1a0012c0:	d910      	bls.n	1a0012e4 <prvAddCurrentTaskToDelayedList+0x60>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0012c2:	4b12      	ldr	r3, [pc, #72]	; (1a00130c <prvAddCurrentTaskToDelayedList+0x88>)
1a0012c4:	6818      	ldr	r0, [r3, #0]
1a0012c6:	4b0f      	ldr	r3, [pc, #60]	; (1a001304 <prvAddCurrentTaskToDelayedList+0x80>)
1a0012c8:	6819      	ldr	r1, [r3, #0]
1a0012ca:	3104      	adds	r1, #4
1a0012cc:	f7ff fe4e 	bl	1a000f6c <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a0012d0:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a0012d2:	2e00      	cmp	r6, #0
1a0012d4:	d0ef      	beq.n	1a0012b6 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0012d6:	4b0b      	ldr	r3, [pc, #44]	; (1a001304 <prvAddCurrentTaskToDelayedList+0x80>)
1a0012d8:	6819      	ldr	r1, [r3, #0]
1a0012da:	3104      	adds	r1, #4
1a0012dc:	480c      	ldr	r0, [pc, #48]	; (1a001310 <prvAddCurrentTaskToDelayedList+0x8c>)
1a0012de:	f7ff fe3a 	bl	1a000f56 <vListInsertEnd>
1a0012e2:	e7f5      	b.n	1a0012d0 <prvAddCurrentTaskToDelayedList+0x4c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0012e4:	4b0b      	ldr	r3, [pc, #44]	; (1a001314 <prvAddCurrentTaskToDelayedList+0x90>)
1a0012e6:	6818      	ldr	r0, [r3, #0]
1a0012e8:	4b06      	ldr	r3, [pc, #24]	; (1a001304 <prvAddCurrentTaskToDelayedList+0x80>)
1a0012ea:	6819      	ldr	r1, [r3, #0]
1a0012ec:	3104      	adds	r1, #4
1a0012ee:	f7ff fe3d 	bl	1a000f6c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
1a0012f2:	4b09      	ldr	r3, [pc, #36]	; (1a001318 <prvAddCurrentTaskToDelayedList+0x94>)
1a0012f4:	681b      	ldr	r3, [r3, #0]
1a0012f6:	42a3      	cmp	r3, r4
1a0012f8:	d9ea      	bls.n	1a0012d0 <prvAddCurrentTaskToDelayedList+0x4c>
					xNextTaskUnblockTime = xTimeToWake;
1a0012fa:	4b07      	ldr	r3, [pc, #28]	; (1a001318 <prvAddCurrentTaskToDelayedList+0x94>)
1a0012fc:	601c      	str	r4, [r3, #0]
}
1a0012fe:	e7e7      	b.n	1a0012d0 <prvAddCurrentTaskToDelayedList+0x4c>
1a001300:	100021d8 	.word	0x100021d8
1a001304:	100020b4 	.word	0x100020b4
1a001308:	10002160 	.word	0x10002160
1a00130c:	100020bc 	.word	0x100020bc
1a001310:	100021b0 	.word	0x100021b0
1a001314:	100020b8 	.word	0x100020b8
1a001318:	10002190 	.word	0x10002190

1a00131c <xTaskCreate>:
	{
1a00131c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a001320:	b085      	sub	sp, #20
1a001322:	4607      	mov	r7, r0
1a001324:	4688      	mov	r8, r1
1a001326:	4614      	mov	r4, r2
1a001328:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00132a:	0090      	lsls	r0, r2, #2
1a00132c:	f7ff f9a8 	bl	1a000680 <pvPortMalloc>
			if( pxStack != NULL )
1a001330:	b1e8      	cbz	r0, 1a00136e <xTaskCreate+0x52>
1a001332:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a001334:	2060      	movs	r0, #96	; 0x60
1a001336:	f7ff f9a3 	bl	1a000680 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a00133a:	4605      	mov	r5, r0
1a00133c:	b198      	cbz	r0, 1a001366 <xTaskCreate+0x4a>
					pxNewTCB->pxStack = pxStack;
1a00133e:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a001340:	b1d5      	cbz	r5, 1a001378 <xTaskCreate+0x5c>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a001342:	2300      	movs	r3, #0
1a001344:	9303      	str	r3, [sp, #12]
1a001346:	9502      	str	r5, [sp, #8]
1a001348:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a00134a:	9301      	str	r3, [sp, #4]
1a00134c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a00134e:	9300      	str	r3, [sp, #0]
1a001350:	464b      	mov	r3, r9
1a001352:	4622      	mov	r2, r4
1a001354:	4641      	mov	r1, r8
1a001356:	4638      	mov	r0, r7
1a001358:	f7ff fe87 	bl	1a00106a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a00135c:	4628      	mov	r0, r5
1a00135e:	f7ff ff01 	bl	1a001164 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a001362:	2001      	movs	r0, #1
1a001364:	e005      	b.n	1a001372 <xTaskCreate+0x56>
					vPortFree( pxStack );
1a001366:	4630      	mov	r0, r6
1a001368:	f7ff f9c2 	bl	1a0006f0 <vPortFree>
1a00136c:	e7e8      	b.n	1a001340 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a00136e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
1a001372:	b005      	add	sp, #20
1a001374:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a001378:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a00137c:	e7f9      	b.n	1a001372 <xTaskCreate+0x56>
1a00137e:	Address 0x000000001a00137e is out of bounds.


1a001380 <vTaskStartScheduler>:
{
1a001380:	b500      	push	{lr}
1a001382:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
1a001384:	4b19      	ldr	r3, [pc, #100]	; (1a0013ec <vTaskStartScheduler+0x6c>)
1a001386:	9301      	str	r3, [sp, #4]
1a001388:	2300      	movs	r3, #0
1a00138a:	9300      	str	r3, [sp, #0]
1a00138c:	225a      	movs	r2, #90	; 0x5a
1a00138e:	4918      	ldr	r1, [pc, #96]	; (1a0013f0 <vTaskStartScheduler+0x70>)
1a001390:	4818      	ldr	r0, [pc, #96]	; (1a0013f4 <vTaskStartScheduler+0x74>)
1a001392:	f7ff ffc3 	bl	1a00131c <xTaskCreate>
		if( xReturn == pdPASS )
1a001396:	2801      	cmp	r0, #1
1a001398:	d007      	beq.n	1a0013aa <vTaskStartScheduler+0x2a>
	if( xReturn == pdPASS )
1a00139a:	2801      	cmp	r0, #1
1a00139c:	d008      	beq.n	1a0013b0 <vTaskStartScheduler+0x30>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a00139e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0013a2:	d01a      	beq.n	1a0013da <vTaskStartScheduler+0x5a>
}
1a0013a4:	b003      	add	sp, #12
1a0013a6:	f85d fb04 	ldr.w	pc, [sp], #4
			xReturn = xTimerCreateTimerTask();
1a0013aa:	f000 fc87 	bl	1a001cbc <xTimerCreateTimerTask>
1a0013ae:	e7f4      	b.n	1a00139a <vTaskStartScheduler+0x1a>
1a0013b0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013b4:	f383 8811 	msr	BASEPRI, r3
1a0013b8:	f3bf 8f6f 	isb	sy
1a0013bc:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a0013c0:	4b0d      	ldr	r3, [pc, #52]	; (1a0013f8 <vTaskStartScheduler+0x78>)
1a0013c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0013c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a0013c8:	4b0c      	ldr	r3, [pc, #48]	; (1a0013fc <vTaskStartScheduler+0x7c>)
1a0013ca:	2201      	movs	r2, #1
1a0013cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a0013ce:	4b0c      	ldr	r3, [pc, #48]	; (1a001400 <vTaskStartScheduler+0x80>)
1a0013d0:	2200      	movs	r2, #0
1a0013d2:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a0013d4:	f000 ff20 	bl	1a002218 <xPortStartScheduler>
1a0013d8:	e7e4      	b.n	1a0013a4 <vTaskStartScheduler+0x24>
1a0013da:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013de:	f383 8811 	msr	BASEPRI, r3
1a0013e2:	f3bf 8f6f 	isb	sy
1a0013e6:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a0013ea:	e7fe      	b.n	1a0013ea <vTaskStartScheduler+0x6a>
1a0013ec:	1000218c 	.word	0x1000218c
1a0013f0:	1a0048a0 	.word	0x1a0048a0
1a0013f4:	1a00125d 	.word	0x1a00125d
1a0013f8:	10002190 	.word	0x10002190
1a0013fc:	100021ac 	.word	0x100021ac
1a001400:	100021d8 	.word	0x100021d8

1a001404 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a001404:	4a02      	ldr	r2, [pc, #8]	; (1a001410 <vTaskSuspendAll+0xc>)
1a001406:	6813      	ldr	r3, [r2, #0]
1a001408:	3301      	adds	r3, #1
1a00140a:	6013      	str	r3, [r2, #0]
}
1a00140c:	4770      	bx	lr
1a00140e:	bf00      	nop
1a001410:	10002158 	.word	0x10002158

1a001414 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a001414:	4b01      	ldr	r3, [pc, #4]	; (1a00141c <xTaskGetTickCount+0x8>)
1a001416:	6818      	ldr	r0, [r3, #0]
}
1a001418:	4770      	bx	lr
1a00141a:	bf00      	nop
1a00141c:	100021d8 	.word	0x100021d8

1a001420 <xTaskIncrementTick>:
{
1a001420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001422:	4b3a      	ldr	r3, [pc, #232]	; (1a00150c <xTaskIncrementTick+0xec>)
1a001424:	681b      	ldr	r3, [r3, #0]
1a001426:	2b00      	cmp	r3, #0
1a001428:	d164      	bne.n	1a0014f4 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a00142a:	4b39      	ldr	r3, [pc, #228]	; (1a001510 <xTaskIncrementTick+0xf0>)
1a00142c:	681d      	ldr	r5, [r3, #0]
1a00142e:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a001430:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a001432:	b9c5      	cbnz	r5, 1a001466 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a001434:	4b37      	ldr	r3, [pc, #220]	; (1a001514 <xTaskIncrementTick+0xf4>)
1a001436:	681b      	ldr	r3, [r3, #0]
1a001438:	681b      	ldr	r3, [r3, #0]
1a00143a:	b143      	cbz	r3, 1a00144e <xTaskIncrementTick+0x2e>
1a00143c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001440:	f383 8811 	msr	BASEPRI, r3
1a001444:	f3bf 8f6f 	isb	sy
1a001448:	f3bf 8f4f 	dsb	sy
1a00144c:	e7fe      	b.n	1a00144c <xTaskIncrementTick+0x2c>
1a00144e:	4a31      	ldr	r2, [pc, #196]	; (1a001514 <xTaskIncrementTick+0xf4>)
1a001450:	6811      	ldr	r1, [r2, #0]
1a001452:	4b31      	ldr	r3, [pc, #196]	; (1a001518 <xTaskIncrementTick+0xf8>)
1a001454:	6818      	ldr	r0, [r3, #0]
1a001456:	6010      	str	r0, [r2, #0]
1a001458:	6019      	str	r1, [r3, #0]
1a00145a:	4a30      	ldr	r2, [pc, #192]	; (1a00151c <xTaskIncrementTick+0xfc>)
1a00145c:	6813      	ldr	r3, [r2, #0]
1a00145e:	3301      	adds	r3, #1
1a001460:	6013      	str	r3, [r2, #0]
1a001462:	f7ff fde3 	bl	1a00102c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a001466:	4b2e      	ldr	r3, [pc, #184]	; (1a001520 <xTaskIncrementTick+0x100>)
1a001468:	681b      	ldr	r3, [r3, #0]
1a00146a:	42ab      	cmp	r3, r5
1a00146c:	d938      	bls.n	1a0014e0 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a00146e:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a001470:	4b2c      	ldr	r3, [pc, #176]	; (1a001524 <xTaskIncrementTick+0x104>)
1a001472:	681b      	ldr	r3, [r3, #0]
1a001474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001476:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00147a:	009a      	lsls	r2, r3, #2
1a00147c:	4b2a      	ldr	r3, [pc, #168]	; (1a001528 <xTaskIncrementTick+0x108>)
1a00147e:	589b      	ldr	r3, [r3, r2]
1a001480:	2b01      	cmp	r3, #1
1a001482:	d93c      	bls.n	1a0014fe <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a001484:	2401      	movs	r4, #1
1a001486:	e03a      	b.n	1a0014fe <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a001488:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a00148a:	4b22      	ldr	r3, [pc, #136]	; (1a001514 <xTaskIncrementTick+0xf4>)
1a00148c:	681b      	ldr	r3, [r3, #0]
1a00148e:	681b      	ldr	r3, [r3, #0]
1a001490:	b343      	cbz	r3, 1a0014e4 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001492:	4b20      	ldr	r3, [pc, #128]	; (1a001514 <xTaskIncrementTick+0xf4>)
1a001494:	681b      	ldr	r3, [r3, #0]
1a001496:	68db      	ldr	r3, [r3, #12]
1a001498:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a00149a:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a00149c:	429d      	cmp	r5, r3
1a00149e:	d326      	bcc.n	1a0014ee <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0014a0:	1d37      	adds	r7, r6, #4
1a0014a2:	4638      	mov	r0, r7
1a0014a4:	f7ff fd7c 	bl	1a000fa0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a0014a8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a0014aa:	b11b      	cbz	r3, 1a0014b4 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a0014ac:	f106 0018 	add.w	r0, r6, #24
1a0014b0:	f7ff fd76 	bl	1a000fa0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a0014b4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a0014b6:	2201      	movs	r2, #1
1a0014b8:	409a      	lsls	r2, r3
1a0014ba:	491c      	ldr	r1, [pc, #112]	; (1a00152c <xTaskIncrementTick+0x10c>)
1a0014bc:	6808      	ldr	r0, [r1, #0]
1a0014be:	4302      	orrs	r2, r0
1a0014c0:	600a      	str	r2, [r1, #0]
1a0014c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0014c6:	009a      	lsls	r2, r3, #2
1a0014c8:	4639      	mov	r1, r7
1a0014ca:	4817      	ldr	r0, [pc, #92]	; (1a001528 <xTaskIncrementTick+0x108>)
1a0014cc:	4410      	add	r0, r2
1a0014ce:	f7ff fd42 	bl	1a000f56 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a0014d2:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a0014d4:	4b13      	ldr	r3, [pc, #76]	; (1a001524 <xTaskIncrementTick+0x104>)
1a0014d6:	681b      	ldr	r3, [r3, #0]
1a0014d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0014da:	429a      	cmp	r2, r3
1a0014dc:	d2d4      	bcs.n	1a001488 <xTaskIncrementTick+0x68>
1a0014de:	e7d4      	b.n	1a00148a <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a0014e0:	2400      	movs	r4, #0
1a0014e2:	e7d2      	b.n	1a00148a <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0014e4:	4b0e      	ldr	r3, [pc, #56]	; (1a001520 <xTaskIncrementTick+0x100>)
1a0014e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0014ea:	601a      	str	r2, [r3, #0]
					break;
1a0014ec:	e7c0      	b.n	1a001470 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a0014ee:	4a0c      	ldr	r2, [pc, #48]	; (1a001520 <xTaskIncrementTick+0x100>)
1a0014f0:	6013      	str	r3, [r2, #0]
						break;
1a0014f2:	e7bd      	b.n	1a001470 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a0014f4:	4a0e      	ldr	r2, [pc, #56]	; (1a001530 <xTaskIncrementTick+0x110>)
1a0014f6:	6813      	ldr	r3, [r2, #0]
1a0014f8:	3301      	adds	r3, #1
1a0014fa:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a0014fc:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a0014fe:	4b0d      	ldr	r3, [pc, #52]	; (1a001534 <xTaskIncrementTick+0x114>)
1a001500:	681b      	ldr	r3, [r3, #0]
1a001502:	b103      	cbz	r3, 1a001506 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a001504:	2401      	movs	r4, #1
}
1a001506:	4620      	mov	r0, r4
1a001508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00150a:	bf00      	nop
1a00150c:	10002158 	.word	0x10002158
1a001510:	100021d8 	.word	0x100021d8
1a001514:	100020b8 	.word	0x100020b8
1a001518:	100020bc 	.word	0x100020bc
1a00151c:	10002194 	.word	0x10002194
1a001520:	10002190 	.word	0x10002190
1a001524:	100020b4 	.word	0x100020b4
1a001528:	100020c0 	.word	0x100020c0
1a00152c:	10002160 	.word	0x10002160
1a001530:	10002154 	.word	0x10002154
1a001534:	100021dc 	.word	0x100021dc

1a001538 <xTaskResumeAll>:
{
1a001538:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a00153a:	4b35      	ldr	r3, [pc, #212]	; (1a001610 <xTaskResumeAll+0xd8>)
1a00153c:	681b      	ldr	r3, [r3, #0]
1a00153e:	b943      	cbnz	r3, 1a001552 <xTaskResumeAll+0x1a>
1a001540:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001544:	f383 8811 	msr	BASEPRI, r3
1a001548:	f3bf 8f6f 	isb	sy
1a00154c:	f3bf 8f4f 	dsb	sy
1a001550:	e7fe      	b.n	1a001550 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a001552:	f000 fdbf 	bl	1a0020d4 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a001556:	4b2e      	ldr	r3, [pc, #184]	; (1a001610 <xTaskResumeAll+0xd8>)
1a001558:	681a      	ldr	r2, [r3, #0]
1a00155a:	3a01      	subs	r2, #1
1a00155c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00155e:	681b      	ldr	r3, [r3, #0]
1a001560:	2b00      	cmp	r3, #0
1a001562:	d14d      	bne.n	1a001600 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a001564:	4b2b      	ldr	r3, [pc, #172]	; (1a001614 <xTaskResumeAll+0xdc>)
1a001566:	681b      	ldr	r3, [r3, #0]
1a001568:	b90b      	cbnz	r3, 1a00156e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
1a00156a:	2400      	movs	r4, #0
1a00156c:	e049      	b.n	1a001602 <xTaskResumeAll+0xca>
TCB_t *pxTCB = NULL;
1a00156e:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a001570:	4b29      	ldr	r3, [pc, #164]	; (1a001618 <xTaskResumeAll+0xe0>)
1a001572:	681b      	ldr	r3, [r3, #0]
1a001574:	b31b      	cbz	r3, 1a0015be <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a001576:	4b28      	ldr	r3, [pc, #160]	; (1a001618 <xTaskResumeAll+0xe0>)
1a001578:	68db      	ldr	r3, [r3, #12]
1a00157a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a00157c:	f104 0018 	add.w	r0, r4, #24
1a001580:	f7ff fd0e 	bl	1a000fa0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001584:	1d25      	adds	r5, r4, #4
1a001586:	4628      	mov	r0, r5
1a001588:	f7ff fd0a 	bl	1a000fa0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a00158c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00158e:	2201      	movs	r2, #1
1a001590:	409a      	lsls	r2, r3
1a001592:	4922      	ldr	r1, [pc, #136]	; (1a00161c <xTaskResumeAll+0xe4>)
1a001594:	6808      	ldr	r0, [r1, #0]
1a001596:	4302      	orrs	r2, r0
1a001598:	600a      	str	r2, [r1, #0]
1a00159a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00159e:	009a      	lsls	r2, r3, #2
1a0015a0:	4629      	mov	r1, r5
1a0015a2:	481f      	ldr	r0, [pc, #124]	; (1a001620 <xTaskResumeAll+0xe8>)
1a0015a4:	4410      	add	r0, r2
1a0015a6:	f7ff fcd6 	bl	1a000f56 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a0015aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0015ac:	4b1d      	ldr	r3, [pc, #116]	; (1a001624 <xTaskResumeAll+0xec>)
1a0015ae:	681b      	ldr	r3, [r3, #0]
1a0015b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0015b2:	429a      	cmp	r2, r3
1a0015b4:	d3dc      	bcc.n	1a001570 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
1a0015b6:	4b1c      	ldr	r3, [pc, #112]	; (1a001628 <xTaskResumeAll+0xf0>)
1a0015b8:	2201      	movs	r2, #1
1a0015ba:	601a      	str	r2, [r3, #0]
1a0015bc:	e7d8      	b.n	1a001570 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
1a0015be:	b10c      	cbz	r4, 1a0015c4 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
1a0015c0:	f7ff fd34 	bl	1a00102c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a0015c4:	4b19      	ldr	r3, [pc, #100]	; (1a00162c <xTaskResumeAll+0xf4>)
1a0015c6:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a0015c8:	b974      	cbnz	r4, 1a0015e8 <xTaskResumeAll+0xb0>
				if( xYieldPending != pdFALSE )
1a0015ca:	4b17      	ldr	r3, [pc, #92]	; (1a001628 <xTaskResumeAll+0xf0>)
1a0015cc:	681b      	ldr	r3, [r3, #0]
1a0015ce:	b1e3      	cbz	r3, 1a00160a <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
1a0015d0:	4b17      	ldr	r3, [pc, #92]	; (1a001630 <xTaskResumeAll+0xf8>)
1a0015d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0015d6:	601a      	str	r2, [r3, #0]
1a0015d8:	f3bf 8f4f 	dsb	sy
1a0015dc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a0015e0:	2401      	movs	r4, #1
1a0015e2:	e00e      	b.n	1a001602 <xTaskResumeAll+0xca>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a0015e4:	3c01      	subs	r4, #1
1a0015e6:	d007      	beq.n	1a0015f8 <xTaskResumeAll+0xc0>
							if( xTaskIncrementTick() != pdFALSE )
1a0015e8:	f7ff ff1a 	bl	1a001420 <xTaskIncrementTick>
1a0015ec:	2800      	cmp	r0, #0
1a0015ee:	d0f9      	beq.n	1a0015e4 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
1a0015f0:	4b0d      	ldr	r3, [pc, #52]	; (1a001628 <xTaskResumeAll+0xf0>)
1a0015f2:	2201      	movs	r2, #1
1a0015f4:	601a      	str	r2, [r3, #0]
1a0015f6:	e7f5      	b.n	1a0015e4 <xTaskResumeAll+0xac>
						uxPendedTicks = 0;
1a0015f8:	4b0c      	ldr	r3, [pc, #48]	; (1a00162c <xTaskResumeAll+0xf4>)
1a0015fa:	2200      	movs	r2, #0
1a0015fc:	601a      	str	r2, [r3, #0]
1a0015fe:	e7e4      	b.n	1a0015ca <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
1a001600:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001602:	f000 fd89 	bl	1a002118 <vPortExitCritical>
}
1a001606:	4620      	mov	r0, r4
1a001608:	bd38      	pop	{r3, r4, r5, pc}
BaseType_t xAlreadyYielded = pdFALSE;
1a00160a:	2400      	movs	r4, #0
1a00160c:	e7f9      	b.n	1a001602 <xTaskResumeAll+0xca>
1a00160e:	bf00      	nop
1a001610:	10002158 	.word	0x10002158
1a001614:	1000214c 	.word	0x1000214c
1a001618:	10002198 	.word	0x10002198
1a00161c:	10002160 	.word	0x10002160
1a001620:	100020c0 	.word	0x100020c0
1a001624:	100020b4 	.word	0x100020b4
1a001628:	100021dc 	.word	0x100021dc
1a00162c:	10002154 	.word	0x10002154
1a001630:	e000ed04 	.word	0xe000ed04

1a001634 <vTaskDelayUntil>:
	{
1a001634:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
1a001636:	b150      	cbz	r0, 1a00164e <vTaskDelayUntil+0x1a>
1a001638:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
1a00163a:	b989      	cbnz	r1, 1a001660 <vTaskDelayUntil+0x2c>
1a00163c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001640:	f383 8811 	msr	BASEPRI, r3
1a001644:	f3bf 8f6f 	isb	sy
1a001648:	f3bf 8f4f 	dsb	sy
1a00164c:	e7fe      	b.n	1a00164c <vTaskDelayUntil+0x18>
1a00164e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001652:	f383 8811 	msr	BASEPRI, r3
1a001656:	f3bf 8f6f 	isb	sy
1a00165a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxPreviousWakeTime );
1a00165e:	e7fe      	b.n	1a00165e <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
1a001660:	4b1a      	ldr	r3, [pc, #104]	; (1a0016cc <vTaskDelayUntil+0x98>)
1a001662:	681b      	ldr	r3, [r3, #0]
1a001664:	b143      	cbz	r3, 1a001678 <vTaskDelayUntil+0x44>
1a001666:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00166a:	f383 8811 	msr	BASEPRI, r3
1a00166e:	f3bf 8f6f 	isb	sy
1a001672:	f3bf 8f4f 	dsb	sy
1a001676:	e7fe      	b.n	1a001676 <vTaskDelayUntil+0x42>
1a001678:	460c      	mov	r4, r1
		vTaskSuspendAll();
1a00167a:	f7ff fec3 	bl	1a001404 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
1a00167e:	4b14      	ldr	r3, [pc, #80]	; (1a0016d0 <vTaskDelayUntil+0x9c>)
1a001680:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1a001682:	682a      	ldr	r2, [r5, #0]
1a001684:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
1a001686:	4282      	cmp	r2, r0
1a001688:	d909      	bls.n	1a00169e <vTaskDelayUntil+0x6a>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a00168a:	42a2      	cmp	r2, r4
1a00168c:	d801      	bhi.n	1a001692 <vTaskDelayUntil+0x5e>
			*pxPreviousWakeTime = xTimeToWake;
1a00168e:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
1a001690:	e00e      	b.n	1a0016b0 <vTaskDelayUntil+0x7c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a001692:	42a0      	cmp	r0, r4
1a001694:	d301      	bcc.n	1a00169a <vTaskDelayUntil+0x66>
			*pxPreviousWakeTime = xTimeToWake;
1a001696:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
1a001698:	e00a      	b.n	1a0016b0 <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
1a00169a:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
1a00169c:	e004      	b.n	1a0016a8 <vTaskDelayUntil+0x74>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1a00169e:	42a2      	cmp	r2, r4
1a0016a0:	d801      	bhi.n	1a0016a6 <vTaskDelayUntil+0x72>
1a0016a2:	42a0      	cmp	r0, r4
1a0016a4:	d210      	bcs.n	1a0016c8 <vTaskDelayUntil+0x94>
			*pxPreviousWakeTime = xTimeToWake;
1a0016a6:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1a0016a8:	2100      	movs	r1, #0
1a0016aa:	1a20      	subs	r0, r4, r0
1a0016ac:	f7ff fdea 	bl	1a001284 <prvAddCurrentTaskToDelayedList>
		xAlreadyYielded = xTaskResumeAll();
1a0016b0:	f7ff ff42 	bl	1a001538 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a0016b4:	b938      	cbnz	r0, 1a0016c6 <vTaskDelayUntil+0x92>
			portYIELD_WITHIN_API();
1a0016b6:	4b07      	ldr	r3, [pc, #28]	; (1a0016d4 <vTaskDelayUntil+0xa0>)
1a0016b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0016bc:	601a      	str	r2, [r3, #0]
1a0016be:	f3bf 8f4f 	dsb	sy
1a0016c2:	f3bf 8f6f 	isb	sy
	}
1a0016c6:	bd38      	pop	{r3, r4, r5, pc}
			*pxPreviousWakeTime = xTimeToWake;
1a0016c8:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
1a0016ca:	e7f1      	b.n	1a0016b0 <vTaskDelayUntil+0x7c>
1a0016cc:	10002158 	.word	0x10002158
1a0016d0:	100021d8 	.word	0x100021d8
1a0016d4:	e000ed04 	.word	0xe000ed04

1a0016d8 <vTaskDelay>:
	{
1a0016d8:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a0016da:	b1a8      	cbz	r0, 1a001708 <vTaskDelay+0x30>
1a0016dc:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a0016de:	4b0f      	ldr	r3, [pc, #60]	; (1a00171c <vTaskDelay+0x44>)
1a0016e0:	681b      	ldr	r3, [r3, #0]
1a0016e2:	b143      	cbz	r3, 1a0016f6 <vTaskDelay+0x1e>
1a0016e4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0016e8:	f383 8811 	msr	BASEPRI, r3
1a0016ec:	f3bf 8f6f 	isb	sy
1a0016f0:	f3bf 8f4f 	dsb	sy
1a0016f4:	e7fe      	b.n	1a0016f4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a0016f6:	f7ff fe85 	bl	1a001404 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a0016fa:	2100      	movs	r1, #0
1a0016fc:	4620      	mov	r0, r4
1a0016fe:	f7ff fdc1 	bl	1a001284 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a001702:	f7ff ff19 	bl	1a001538 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a001706:	b938      	cbnz	r0, 1a001718 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a001708:	4b05      	ldr	r3, [pc, #20]	; (1a001720 <vTaskDelay+0x48>)
1a00170a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00170e:	601a      	str	r2, [r3, #0]
1a001710:	f3bf 8f4f 	dsb	sy
1a001714:	f3bf 8f6f 	isb	sy
	}
1a001718:	bd10      	pop	{r4, pc}
1a00171a:	bf00      	nop
1a00171c:	10002158 	.word	0x10002158
1a001720:	e000ed04 	.word	0xe000ed04

1a001724 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a001724:	4b2d      	ldr	r3, [pc, #180]	; (1a0017dc <vTaskSwitchContext+0xb8>)
1a001726:	681b      	ldr	r3, [r3, #0]
1a001728:	b11b      	cbz	r3, 1a001732 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a00172a:	4b2d      	ldr	r3, [pc, #180]	; (1a0017e0 <vTaskSwitchContext+0xbc>)
1a00172c:	2201      	movs	r2, #1
1a00172e:	601a      	str	r2, [r3, #0]
1a001730:	4770      	bx	lr
{
1a001732:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a001734:	4b2a      	ldr	r3, [pc, #168]	; (1a0017e0 <vTaskSwitchContext+0xbc>)
1a001736:	2200      	movs	r2, #0
1a001738:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a00173a:	4b2a      	ldr	r3, [pc, #168]	; (1a0017e4 <vTaskSwitchContext+0xc0>)
1a00173c:	681b      	ldr	r3, [r3, #0]
1a00173e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001740:	681a      	ldr	r2, [r3, #0]
1a001742:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001746:	d103      	bne.n	1a001750 <vTaskSwitchContext+0x2c>
1a001748:	685a      	ldr	r2, [r3, #4]
1a00174a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a00174e:	d01b      	beq.n	1a001788 <vTaskSwitchContext+0x64>
1a001750:	4b24      	ldr	r3, [pc, #144]	; (1a0017e4 <vTaskSwitchContext+0xc0>)
1a001752:	6818      	ldr	r0, [r3, #0]
1a001754:	6819      	ldr	r1, [r3, #0]
1a001756:	3134      	adds	r1, #52	; 0x34
1a001758:	f7ff fc5a 	bl	1a001010 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a00175c:	4b22      	ldr	r3, [pc, #136]	; (1a0017e8 <vTaskSwitchContext+0xc4>)
1a00175e:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a001760:	fab3 f383 	clz	r3, r3
1a001764:	b2db      	uxtb	r3, r3
1a001766:	f1c3 031f 	rsb	r3, r3, #31
1a00176a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a00176e:	008a      	lsls	r2, r1, #2
1a001770:	491e      	ldr	r1, [pc, #120]	; (1a0017ec <vTaskSwitchContext+0xc8>)
1a001772:	588a      	ldr	r2, [r1, r2]
1a001774:	b98a      	cbnz	r2, 1a00179a <vTaskSwitchContext+0x76>
	__asm volatile
1a001776:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00177a:	f383 8811 	msr	BASEPRI, r3
1a00177e:	f3bf 8f6f 	isb	sy
1a001782:	f3bf 8f4f 	dsb	sy
1a001786:	e7fe      	b.n	1a001786 <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a001788:	689a      	ldr	r2, [r3, #8]
1a00178a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a00178e:	d1df      	bne.n	1a001750 <vTaskSwitchContext+0x2c>
1a001790:	68db      	ldr	r3, [r3, #12]
1a001792:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a001796:	d1db      	bne.n	1a001750 <vTaskSwitchContext+0x2c>
1a001798:	e7e0      	b.n	1a00175c <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a00179a:	4814      	ldr	r0, [pc, #80]	; (1a0017ec <vTaskSwitchContext+0xc8>)
1a00179c:	009a      	lsls	r2, r3, #2
1a00179e:	18d4      	adds	r4, r2, r3
1a0017a0:	00a1      	lsls	r1, r4, #2
1a0017a2:	4401      	add	r1, r0
1a0017a4:	684c      	ldr	r4, [r1, #4]
1a0017a6:	6864      	ldr	r4, [r4, #4]
1a0017a8:	604c      	str	r4, [r1, #4]
1a0017aa:	441a      	add	r2, r3
1a0017ac:	0091      	lsls	r1, r2, #2
1a0017ae:	3108      	adds	r1, #8
1a0017b0:	4408      	add	r0, r1
1a0017b2:	4284      	cmp	r4, r0
1a0017b4:	d009      	beq.n	1a0017ca <vTaskSwitchContext+0xa6>
1a0017b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0017ba:	009a      	lsls	r2, r3, #2
1a0017bc:	4b0b      	ldr	r3, [pc, #44]	; (1a0017ec <vTaskSwitchContext+0xc8>)
1a0017be:	4413      	add	r3, r2
1a0017c0:	685b      	ldr	r3, [r3, #4]
1a0017c2:	68da      	ldr	r2, [r3, #12]
1a0017c4:	4b07      	ldr	r3, [pc, #28]	; (1a0017e4 <vTaskSwitchContext+0xc0>)
1a0017c6:	601a      	str	r2, [r3, #0]
}
1a0017c8:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0017ca:	6860      	ldr	r0, [r4, #4]
1a0017cc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
1a0017d0:	0091      	lsls	r1, r2, #2
1a0017d2:	4a06      	ldr	r2, [pc, #24]	; (1a0017ec <vTaskSwitchContext+0xc8>)
1a0017d4:	440a      	add	r2, r1
1a0017d6:	6050      	str	r0, [r2, #4]
1a0017d8:	e7ed      	b.n	1a0017b6 <vTaskSwitchContext+0x92>
1a0017da:	bf00      	nop
1a0017dc:	10002158 	.word	0x10002158
1a0017e0:	100021dc 	.word	0x100021dc
1a0017e4:	100020b4 	.word	0x100020b4
1a0017e8:	10002160 	.word	0x10002160
1a0017ec:	100020c0 	.word	0x100020c0

1a0017f0 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a0017f0:	b158      	cbz	r0, 1a00180a <vTaskPlaceOnEventList+0x1a>
{
1a0017f2:	b510      	push	{r4, lr}
1a0017f4:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a0017f6:	4b09      	ldr	r3, [pc, #36]	; (1a00181c <vTaskPlaceOnEventList+0x2c>)
1a0017f8:	6819      	ldr	r1, [r3, #0]
1a0017fa:	3118      	adds	r1, #24
1a0017fc:	f7ff fbb6 	bl	1a000f6c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a001800:	2101      	movs	r1, #1
1a001802:	4620      	mov	r0, r4
1a001804:	f7ff fd3e 	bl	1a001284 <prvAddCurrentTaskToDelayedList>
}
1a001808:	bd10      	pop	{r4, pc}
1a00180a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00180e:	f383 8811 	msr	BASEPRI, r3
1a001812:	f3bf 8f6f 	isb	sy
1a001816:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
1a00181a:	e7fe      	b.n	1a00181a <vTaskPlaceOnEventList+0x2a>
1a00181c:	100020b4 	.word	0x100020b4

1a001820 <vTaskPlaceOnEventListRestricted>:
	{
1a001820:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a001822:	b170      	cbz	r0, 1a001842 <vTaskPlaceOnEventListRestricted+0x22>
1a001824:	460c      	mov	r4, r1
1a001826:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001828:	4a0a      	ldr	r2, [pc, #40]	; (1a001854 <vTaskPlaceOnEventListRestricted+0x34>)
1a00182a:	6811      	ldr	r1, [r2, #0]
1a00182c:	3118      	adds	r1, #24
1a00182e:	f7ff fb92 	bl	1a000f56 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a001832:	b10d      	cbz	r5, 1a001838 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
1a001834:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a001838:	4629      	mov	r1, r5
1a00183a:	4620      	mov	r0, r4
1a00183c:	f7ff fd22 	bl	1a001284 <prvAddCurrentTaskToDelayedList>
	}
1a001840:	bd38      	pop	{r3, r4, r5, pc}
1a001842:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001846:	f383 8811 	msr	BASEPRI, r3
1a00184a:	f3bf 8f6f 	isb	sy
1a00184e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
1a001852:	e7fe      	b.n	1a001852 <vTaskPlaceOnEventListRestricted+0x32>
1a001854:	100020b4 	.word	0x100020b4

1a001858 <xTaskRemoveFromEventList>:
{
1a001858:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a00185a:	68c3      	ldr	r3, [r0, #12]
1a00185c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a00185e:	b324      	cbz	r4, 1a0018aa <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a001860:	f104 0518 	add.w	r5, r4, #24
1a001864:	4628      	mov	r0, r5
1a001866:	f7ff fb9b 	bl	1a000fa0 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00186a:	4b18      	ldr	r3, [pc, #96]	; (1a0018cc <xTaskRemoveFromEventList+0x74>)
1a00186c:	681b      	ldr	r3, [r3, #0]
1a00186e:	bb2b      	cbnz	r3, 1a0018bc <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a001870:	1d25      	adds	r5, r4, #4
1a001872:	4628      	mov	r0, r5
1a001874:	f7ff fb94 	bl	1a000fa0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a001878:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00187a:	2201      	movs	r2, #1
1a00187c:	409a      	lsls	r2, r3
1a00187e:	4914      	ldr	r1, [pc, #80]	; (1a0018d0 <xTaskRemoveFromEventList+0x78>)
1a001880:	6808      	ldr	r0, [r1, #0]
1a001882:	4302      	orrs	r2, r0
1a001884:	600a      	str	r2, [r1, #0]
1a001886:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00188a:	009a      	lsls	r2, r3, #2
1a00188c:	4629      	mov	r1, r5
1a00188e:	4811      	ldr	r0, [pc, #68]	; (1a0018d4 <xTaskRemoveFromEventList+0x7c>)
1a001890:	4410      	add	r0, r2
1a001892:	f7ff fb60 	bl	1a000f56 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a001896:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001898:	4b0f      	ldr	r3, [pc, #60]	; (1a0018d8 <xTaskRemoveFromEventList+0x80>)
1a00189a:	681b      	ldr	r3, [r3, #0]
1a00189c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00189e:	429a      	cmp	r2, r3
1a0018a0:	d911      	bls.n	1a0018c6 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a0018a2:	2001      	movs	r0, #1
1a0018a4:	4b0d      	ldr	r3, [pc, #52]	; (1a0018dc <xTaskRemoveFromEventList+0x84>)
1a0018a6:	6018      	str	r0, [r3, #0]
1a0018a8:	e00e      	b.n	1a0018c8 <xTaskRemoveFromEventList+0x70>
1a0018aa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018ae:	f383 8811 	msr	BASEPRI, r3
1a0018b2:	f3bf 8f6f 	isb	sy
1a0018b6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
1a0018ba:	e7fe      	b.n	1a0018ba <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a0018bc:	4629      	mov	r1, r5
1a0018be:	4808      	ldr	r0, [pc, #32]	; (1a0018e0 <xTaskRemoveFromEventList+0x88>)
1a0018c0:	f7ff fb49 	bl	1a000f56 <vListInsertEnd>
1a0018c4:	e7e7      	b.n	1a001896 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
1a0018c6:	2000      	movs	r0, #0
}
1a0018c8:	bd38      	pop	{r3, r4, r5, pc}
1a0018ca:	bf00      	nop
1a0018cc:	10002158 	.word	0x10002158
1a0018d0:	10002160 	.word	0x10002160
1a0018d4:	100020c0 	.word	0x100020c0
1a0018d8:	100020b4 	.word	0x100020b4
1a0018dc:	100021dc 	.word	0x100021dc
1a0018e0:	10002198 	.word	0x10002198

1a0018e4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a0018e4:	4b03      	ldr	r3, [pc, #12]	; (1a0018f4 <vTaskInternalSetTimeOutState+0x10>)
1a0018e6:	681b      	ldr	r3, [r3, #0]
1a0018e8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a0018ea:	4b03      	ldr	r3, [pc, #12]	; (1a0018f8 <vTaskInternalSetTimeOutState+0x14>)
1a0018ec:	681b      	ldr	r3, [r3, #0]
1a0018ee:	6043      	str	r3, [r0, #4]
}
1a0018f0:	4770      	bx	lr
1a0018f2:	bf00      	nop
1a0018f4:	10002194 	.word	0x10002194
1a0018f8:	100021d8 	.word	0x100021d8

1a0018fc <xTaskCheckForTimeOut>:
{
1a0018fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a0018fe:	b1c8      	cbz	r0, 1a001934 <xTaskCheckForTimeOut+0x38>
1a001900:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a001902:	b301      	cbz	r1, 1a001946 <xTaskCheckForTimeOut+0x4a>
1a001904:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a001906:	f000 fbe5 	bl	1a0020d4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a00190a:	4b1b      	ldr	r3, [pc, #108]	; (1a001978 <xTaskCheckForTimeOut+0x7c>)
1a00190c:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a00190e:	686b      	ldr	r3, [r5, #4]
1a001910:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
1a001912:	6822      	ldr	r2, [r4, #0]
1a001914:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
1a001918:	d026      	beq.n	1a001968 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a00191a:	682f      	ldr	r7, [r5, #0]
1a00191c:	4e17      	ldr	r6, [pc, #92]	; (1a00197c <xTaskCheckForTimeOut+0x80>)
1a00191e:	6836      	ldr	r6, [r6, #0]
1a001920:	42b7      	cmp	r7, r6
1a001922:	d001      	beq.n	1a001928 <xTaskCheckForTimeOut+0x2c>
1a001924:	428b      	cmp	r3, r1
1a001926:	d924      	bls.n	1a001972 <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a001928:	4282      	cmp	r2, r0
1a00192a:	d815      	bhi.n	1a001958 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a00192c:	2300      	movs	r3, #0
1a00192e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a001930:	2401      	movs	r4, #1
1a001932:	e01a      	b.n	1a00196a <xTaskCheckForTimeOut+0x6e>
1a001934:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001938:	f383 8811 	msr	BASEPRI, r3
1a00193c:	f3bf 8f6f 	isb	sy
1a001940:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
1a001944:	e7fe      	b.n	1a001944 <xTaskCheckForTimeOut+0x48>
1a001946:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00194a:	f383 8811 	msr	BASEPRI, r3
1a00194e:	f3bf 8f6f 	isb	sy
1a001952:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
1a001956:	e7fe      	b.n	1a001956 <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
1a001958:	1a5b      	subs	r3, r3, r1
1a00195a:	4413      	add	r3, r2
1a00195c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a00195e:	4628      	mov	r0, r5
1a001960:	f7ff ffc0 	bl	1a0018e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a001964:	2400      	movs	r4, #0
1a001966:	e000      	b.n	1a00196a <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
1a001968:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a00196a:	f000 fbd5 	bl	1a002118 <vPortExitCritical>
}
1a00196e:	4620      	mov	r0, r4
1a001970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
1a001972:	2401      	movs	r4, #1
1a001974:	e7f9      	b.n	1a00196a <xTaskCheckForTimeOut+0x6e>
1a001976:	bf00      	nop
1a001978:	100021d8 	.word	0x100021d8
1a00197c:	10002194 	.word	0x10002194

1a001980 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a001980:	4b01      	ldr	r3, [pc, #4]	; (1a001988 <vTaskMissedYield+0x8>)
1a001982:	2201      	movs	r2, #1
1a001984:	601a      	str	r2, [r3, #0]
}
1a001986:	4770      	bx	lr
1a001988:	100021dc 	.word	0x100021dc

1a00198c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a00198c:	4b05      	ldr	r3, [pc, #20]	; (1a0019a4 <xTaskGetSchedulerState+0x18>)
1a00198e:	681b      	ldr	r3, [r3, #0]
1a001990:	b133      	cbz	r3, 1a0019a0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001992:	4b05      	ldr	r3, [pc, #20]	; (1a0019a8 <xTaskGetSchedulerState+0x1c>)
1a001994:	681b      	ldr	r3, [r3, #0]
1a001996:	b10b      	cbz	r3, 1a00199c <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a001998:	2000      	movs	r0, #0
	}
1a00199a:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a00199c:	2002      	movs	r0, #2
1a00199e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a0019a0:	2001      	movs	r0, #1
1a0019a2:	4770      	bx	lr
1a0019a4:	100021ac 	.word	0x100021ac
1a0019a8:	10002158 	.word	0x10002158

1a0019ac <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
1a0019ac:	2800      	cmp	r0, #0
1a0019ae:	d050      	beq.n	1a001a52 <xTaskPriorityInherit+0xa6>
	{
1a0019b0:	b538      	push	{r3, r4, r5, lr}
1a0019b2:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
1a0019b4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
1a0019b6:	4929      	ldr	r1, [pc, #164]	; (1a001a5c <xTaskPriorityInherit+0xb0>)
1a0019b8:	6809      	ldr	r1, [r1, #0]
1a0019ba:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a0019bc:	428a      	cmp	r2, r1
1a0019be:	d240      	bcs.n	1a001a42 <xTaskPriorityInherit+0x96>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a0019c0:	6981      	ldr	r1, [r0, #24]
1a0019c2:	2900      	cmp	r1, #0
1a0019c4:	db05      	blt.n	1a0019d2 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0019c6:	4925      	ldr	r1, [pc, #148]	; (1a001a5c <xTaskPriorityInherit+0xb0>)
1a0019c8:	6809      	ldr	r1, [r1, #0]
1a0019ca:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a0019cc:	f1c1 0107 	rsb	r1, r1, #7
1a0019d0:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
1a0019d2:	6960      	ldr	r0, [r4, #20]
1a0019d4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a0019d8:	0091      	lsls	r1, r2, #2
1a0019da:	4a21      	ldr	r2, [pc, #132]	; (1a001a60 <xTaskPriorityInherit+0xb4>)
1a0019dc:	440a      	add	r2, r1
1a0019de:	4290      	cmp	r0, r2
1a0019e0:	d005      	beq.n	1a0019ee <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a0019e2:	4a1e      	ldr	r2, [pc, #120]	; (1a001a5c <xTaskPriorityInherit+0xb0>)
1a0019e4:	6812      	ldr	r2, [r2, #0]
1a0019e6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1a0019e8:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
1a0019ea:	2001      	movs	r0, #1
	}
1a0019ec:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0019ee:	1d25      	adds	r5, r4, #4
1a0019f0:	4628      	mov	r0, r5
1a0019f2:	f7ff fad5 	bl	1a000fa0 <uxListRemove>
1a0019f6:	b1a0      	cbz	r0, 1a001a22 <xTaskPriorityInherit+0x76>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a0019f8:	4b18      	ldr	r3, [pc, #96]	; (1a001a5c <xTaskPriorityInherit+0xb0>)
1a0019fa:	681b      	ldr	r3, [r3, #0]
1a0019fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0019fe:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
1a001a00:	2401      	movs	r4, #1
1a001a02:	fa04 f203 	lsl.w	r2, r4, r3
1a001a06:	4917      	ldr	r1, [pc, #92]	; (1a001a64 <xTaskPriorityInherit+0xb8>)
1a001a08:	6808      	ldr	r0, [r1, #0]
1a001a0a:	4302      	orrs	r2, r0
1a001a0c:	600a      	str	r2, [r1, #0]
1a001a0e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001a12:	009a      	lsls	r2, r3, #2
1a001a14:	4629      	mov	r1, r5
1a001a16:	4812      	ldr	r0, [pc, #72]	; (1a001a60 <xTaskPriorityInherit+0xb4>)
1a001a18:	4410      	add	r0, r2
1a001a1a:	f7ff fa9c 	bl	1a000f56 <vListInsertEnd>
				xReturn = pdTRUE;
1a001a1e:	4620      	mov	r0, r4
1a001a20:	e7e4      	b.n	1a0019ec <xTaskPriorityInherit+0x40>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
1a001a22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001a24:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a001a28:	008a      	lsls	r2, r1, #2
1a001a2a:	490d      	ldr	r1, [pc, #52]	; (1a001a60 <xTaskPriorityInherit+0xb4>)
1a001a2c:	588a      	ldr	r2, [r1, r2]
1a001a2e:	2a00      	cmp	r2, #0
1a001a30:	d1e2      	bne.n	1a0019f8 <xTaskPriorityInherit+0x4c>
1a001a32:	2201      	movs	r2, #1
1a001a34:	409a      	lsls	r2, r3
1a001a36:	490b      	ldr	r1, [pc, #44]	; (1a001a64 <xTaskPriorityInherit+0xb8>)
1a001a38:	680b      	ldr	r3, [r1, #0]
1a001a3a:	ea23 0302 	bic.w	r3, r3, r2
1a001a3e:	600b      	str	r3, [r1, #0]
1a001a40:	e7da      	b.n	1a0019f8 <xTaskPriorityInherit+0x4c>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
1a001a42:	6d02      	ldr	r2, [r0, #80]	; 0x50
1a001a44:	4b05      	ldr	r3, [pc, #20]	; (1a001a5c <xTaskPriorityInherit+0xb0>)
1a001a46:	681b      	ldr	r3, [r3, #0]
1a001a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001a4a:	429a      	cmp	r2, r3
1a001a4c:	d303      	bcc.n	1a001a56 <xTaskPriorityInherit+0xaa>
	BaseType_t xReturn = pdFALSE;
1a001a4e:	2000      	movs	r0, #0
1a001a50:	e7cc      	b.n	1a0019ec <xTaskPriorityInherit+0x40>
1a001a52:	2000      	movs	r0, #0
	}
1a001a54:	4770      	bx	lr
					xReturn = pdTRUE;
1a001a56:	2001      	movs	r0, #1
		return xReturn;
1a001a58:	e7c8      	b.n	1a0019ec <xTaskPriorityInherit+0x40>
1a001a5a:	bf00      	nop
1a001a5c:	100020b4 	.word	0x100020b4
1a001a60:	100020c0 	.word	0x100020c0
1a001a64:	10002160 	.word	0x10002160

1a001a68 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a001a68:	2800      	cmp	r0, #0
1a001a6a:	d04c      	beq.n	1a001b06 <xTaskPriorityDisinherit+0x9e>
	{
1a001a6c:	b538      	push	{r3, r4, r5, lr}
1a001a6e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a001a70:	4a27      	ldr	r2, [pc, #156]	; (1a001b10 <xTaskPriorityDisinherit+0xa8>)
1a001a72:	6812      	ldr	r2, [r2, #0]
1a001a74:	4282      	cmp	r2, r0
1a001a76:	d008      	beq.n	1a001a8a <xTaskPriorityDisinherit+0x22>
1a001a78:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a7c:	f383 8811 	msr	BASEPRI, r3
1a001a80:	f3bf 8f6f 	isb	sy
1a001a84:	f3bf 8f4f 	dsb	sy
1a001a88:	e7fe      	b.n	1a001a88 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a001a8a:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a001a8c:	b942      	cbnz	r2, 1a001aa0 <xTaskPriorityDisinherit+0x38>
1a001a8e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a92:	f383 8811 	msr	BASEPRI, r3
1a001a96:	f3bf 8f6f 	isb	sy
1a001a9a:	f3bf 8f4f 	dsb	sy
1a001a9e:	e7fe      	b.n	1a001a9e <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a001aa0:	3a01      	subs	r2, #1
1a001aa2:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a001aa4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a001aa6:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a001aa8:	4288      	cmp	r0, r1
1a001aaa:	d02e      	beq.n	1a001b0a <xTaskPriorityDisinherit+0xa2>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a001aac:	b10a      	cbz	r2, 1a001ab2 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
1a001aae:	2000      	movs	r0, #0
	}
1a001ab0:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001ab2:	1d25      	adds	r5, r4, #4
1a001ab4:	4628      	mov	r0, r5
1a001ab6:	f7ff fa73 	bl	1a000fa0 <uxListRemove>
1a001aba:	b970      	cbnz	r0, 1a001ada <xTaskPriorityDisinherit+0x72>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a001abc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001abe:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1a001ac2:	008b      	lsls	r3, r1, #2
1a001ac4:	4913      	ldr	r1, [pc, #76]	; (1a001b14 <xTaskPriorityDisinherit+0xac>)
1a001ac6:	58cb      	ldr	r3, [r1, r3]
1a001ac8:	b93b      	cbnz	r3, 1a001ada <xTaskPriorityDisinherit+0x72>
1a001aca:	2301      	movs	r3, #1
1a001acc:	fa03 f202 	lsl.w	r2, r3, r2
1a001ad0:	4911      	ldr	r1, [pc, #68]	; (1a001b18 <xTaskPriorityDisinherit+0xb0>)
1a001ad2:	680b      	ldr	r3, [r1, #0]
1a001ad4:	ea23 0302 	bic.w	r3, r3, r2
1a001ad8:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a001ada:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a001adc:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001ade:	f1c3 0207 	rsb	r2, r3, #7
1a001ae2:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a001ae4:	2401      	movs	r4, #1
1a001ae6:	fa04 f203 	lsl.w	r2, r4, r3
1a001aea:	490b      	ldr	r1, [pc, #44]	; (1a001b18 <xTaskPriorityDisinherit+0xb0>)
1a001aec:	6808      	ldr	r0, [r1, #0]
1a001aee:	4302      	orrs	r2, r0
1a001af0:	600a      	str	r2, [r1, #0]
1a001af2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001af6:	009a      	lsls	r2, r3, #2
1a001af8:	4629      	mov	r1, r5
1a001afa:	4806      	ldr	r0, [pc, #24]	; (1a001b14 <xTaskPriorityDisinherit+0xac>)
1a001afc:	4410      	add	r0, r2
1a001afe:	f7ff fa2a 	bl	1a000f56 <vListInsertEnd>
					xReturn = pdTRUE;
1a001b02:	4620      	mov	r0, r4
1a001b04:	e7d4      	b.n	1a001ab0 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
1a001b06:	2000      	movs	r0, #0
	}
1a001b08:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a001b0a:	2000      	movs	r0, #0
1a001b0c:	e7d0      	b.n	1a001ab0 <xTaskPriorityDisinherit+0x48>
1a001b0e:	bf00      	nop
1a001b10:	100020b4 	.word	0x100020b4
1a001b14:	100020c0 	.word	0x100020c0
1a001b18:	10002160 	.word	0x10002160

1a001b1c <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
1a001b1c:	2800      	cmp	r0, #0
1a001b1e:	d056      	beq.n	1a001bce <vTaskPriorityDisinheritAfterTimeout+0xb2>
	{
1a001b20:	b538      	push	{r3, r4, r5, lr}
1a001b22:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
1a001b24:	6d40      	ldr	r0, [r0, #84]	; 0x54
1a001b26:	b940      	cbnz	r0, 1a001b3a <vTaskPriorityDisinheritAfterTimeout+0x1e>
1a001b28:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b2c:	f383 8811 	msr	BASEPRI, r3
1a001b30:	f3bf 8f6f 	isb	sy
1a001b34:	f3bf 8f4f 	dsb	sy
1a001b38:	e7fe      	b.n	1a001b38 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
1a001b3a:	6d22      	ldr	r2, [r4, #80]	; 0x50
1a001b3c:	428a      	cmp	r2, r1
1a001b3e:	d200      	bcs.n	1a001b42 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
1a001b40:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
1a001b42:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
1a001b44:	4291      	cmp	r1, r2
1a001b46:	d001      	beq.n	1a001b4c <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
1a001b48:	2801      	cmp	r0, #1
1a001b4a:	d000      	beq.n	1a001b4e <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
1a001b4c:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
1a001b4e:	4820      	ldr	r0, [pc, #128]	; (1a001bd0 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
1a001b50:	6800      	ldr	r0, [r0, #0]
1a001b52:	42a0      	cmp	r0, r4
1a001b54:	d032      	beq.n	1a001bbc <vTaskPriorityDisinheritAfterTimeout+0xa0>
					pxTCB->uxPriority = uxPriorityToUse;
1a001b56:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a001b58:	69a0      	ldr	r0, [r4, #24]
1a001b5a:	2800      	cmp	r0, #0
1a001b5c:	db02      	blt.n	1a001b64 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001b5e:	f1c2 0207 	rsb	r2, r2, #7
1a001b62:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
1a001b64:	6963      	ldr	r3, [r4, #20]
1a001b66:	eb01 0181 	add.w	r1, r1, r1, lsl #2
1a001b6a:	0088      	lsls	r0, r1, #2
1a001b6c:	4a19      	ldr	r2, [pc, #100]	; (1a001bd4 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a001b6e:	4402      	add	r2, r0
1a001b70:	4293      	cmp	r3, r2
1a001b72:	d1eb      	bne.n	1a001b4c <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001b74:	1d25      	adds	r5, r4, #4
1a001b76:	4628      	mov	r0, r5
1a001b78:	f7ff fa12 	bl	1a000fa0 <uxListRemove>
1a001b7c:	b970      	cbnz	r0, 1a001b9c <vTaskPriorityDisinheritAfterTimeout+0x80>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a001b7e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001b80:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1a001b84:	008b      	lsls	r3, r1, #2
1a001b86:	4913      	ldr	r1, [pc, #76]	; (1a001bd4 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a001b88:	58cb      	ldr	r3, [r1, r3]
1a001b8a:	b93b      	cbnz	r3, 1a001b9c <vTaskPriorityDisinheritAfterTimeout+0x80>
1a001b8c:	2301      	movs	r3, #1
1a001b8e:	fa03 f202 	lsl.w	r2, r3, r2
1a001b92:	4911      	ldr	r1, [pc, #68]	; (1a001bd8 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a001b94:	680b      	ldr	r3, [r1, #0]
1a001b96:	ea23 0302 	bic.w	r3, r3, r2
1a001b9a:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
1a001b9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001b9e:	2201      	movs	r2, #1
1a001ba0:	409a      	lsls	r2, r3
1a001ba2:	490d      	ldr	r1, [pc, #52]	; (1a001bd8 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a001ba4:	6808      	ldr	r0, [r1, #0]
1a001ba6:	4302      	orrs	r2, r0
1a001ba8:	600a      	str	r2, [r1, #0]
1a001baa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001bae:	009a      	lsls	r2, r3, #2
1a001bb0:	4629      	mov	r1, r5
1a001bb2:	4808      	ldr	r0, [pc, #32]	; (1a001bd4 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a001bb4:	4410      	add	r0, r2
1a001bb6:	f7ff f9ce 	bl	1a000f56 <vListInsertEnd>
	}
1a001bba:	e7c7      	b.n	1a001b4c <vTaskPriorityDisinheritAfterTimeout+0x30>
1a001bbc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001bc0:	f383 8811 	msr	BASEPRI, r3
1a001bc4:	f3bf 8f6f 	isb	sy
1a001bc8:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
1a001bcc:	e7fe      	b.n	1a001bcc <vTaskPriorityDisinheritAfterTimeout+0xb0>
1a001bce:	4770      	bx	lr
1a001bd0:	100020b4 	.word	0x100020b4
1a001bd4:	100020c0 	.word	0x100020c0
1a001bd8:	10002160 	.word	0x10002160

1a001bdc <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
1a001bdc:	4b05      	ldr	r3, [pc, #20]	; (1a001bf4 <pvTaskIncrementMutexHeldCount+0x18>)
1a001bde:	681b      	ldr	r3, [r3, #0]
1a001be0:	b123      	cbz	r3, 1a001bec <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
1a001be2:	4b04      	ldr	r3, [pc, #16]	; (1a001bf4 <pvTaskIncrementMutexHeldCount+0x18>)
1a001be4:	681a      	ldr	r2, [r3, #0]
1a001be6:	6d53      	ldr	r3, [r2, #84]	; 0x54
1a001be8:	3301      	adds	r3, #1
1a001bea:	6553      	str	r3, [r2, #84]	; 0x54
		return pxCurrentTCB;
1a001bec:	4b01      	ldr	r3, [pc, #4]	; (1a001bf4 <pvTaskIncrementMutexHeldCount+0x18>)
1a001bee:	6818      	ldr	r0, [r3, #0]
	}
1a001bf0:	4770      	bx	lr
1a001bf2:	bf00      	nop
1a001bf4:	100020b4 	.word	0x100020b4

1a001bf8 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a001bf8:	4b06      	ldr	r3, [pc, #24]	; (1a001c14 <prvGetNextExpireTime+0x1c>)
1a001bfa:	681a      	ldr	r2, [r3, #0]
1a001bfc:	6813      	ldr	r3, [r2, #0]
1a001bfe:	fab3 f383 	clz	r3, r3
1a001c02:	095b      	lsrs	r3, r3, #5
1a001c04:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a001c06:	b913      	cbnz	r3, 1a001c0e <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001c08:	68d3      	ldr	r3, [r2, #12]
1a001c0a:	6818      	ldr	r0, [r3, #0]
1a001c0c:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a001c0e:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a001c10:	4770      	bx	lr
1a001c12:	bf00      	nop
1a001c14:	100021e0 	.word	0x100021e0

1a001c18 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a001c18:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a001c1a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a001c1c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a001c1e:	4291      	cmp	r1, r2
1a001c20:	d80c      	bhi.n	1a001c3c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001c22:	1ad2      	subs	r2, r2, r3
1a001c24:	6983      	ldr	r3, [r0, #24]
1a001c26:	429a      	cmp	r2, r3
1a001c28:	d301      	bcc.n	1a001c2e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a001c2a:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
1a001c2c:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a001c2e:	1d01      	adds	r1, r0, #4
1a001c30:	4b09      	ldr	r3, [pc, #36]	; (1a001c58 <prvInsertTimerInActiveList+0x40>)
1a001c32:	6818      	ldr	r0, [r3, #0]
1a001c34:	f7ff f99a 	bl	1a000f6c <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a001c38:	2000      	movs	r0, #0
1a001c3a:	e7f7      	b.n	1a001c2c <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a001c3c:	429a      	cmp	r2, r3
1a001c3e:	d201      	bcs.n	1a001c44 <prvInsertTimerInActiveList+0x2c>
1a001c40:	4299      	cmp	r1, r3
1a001c42:	d206      	bcs.n	1a001c52 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a001c44:	1d01      	adds	r1, r0, #4
1a001c46:	4b05      	ldr	r3, [pc, #20]	; (1a001c5c <prvInsertTimerInActiveList+0x44>)
1a001c48:	6818      	ldr	r0, [r3, #0]
1a001c4a:	f7ff f98f 	bl	1a000f6c <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a001c4e:	2000      	movs	r0, #0
1a001c50:	e7ec      	b.n	1a001c2c <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
1a001c52:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a001c54:	e7ea      	b.n	1a001c2c <prvInsertTimerInActiveList+0x14>
1a001c56:	bf00      	nop
1a001c58:	100021e4 	.word	0x100021e4
1a001c5c:	100021e0 	.word	0x100021e0

1a001c60 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a001c60:	b538      	push	{r3, r4, r5, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a001c62:	f000 fa37 	bl	1a0020d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a001c66:	4b0f      	ldr	r3, [pc, #60]	; (1a001ca4 <prvCheckForValidListAndQueue+0x44>)
1a001c68:	681b      	ldr	r3, [r3, #0]
1a001c6a:	b113      	cbz	r3, 1a001c72 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a001c6c:	f000 fa54 	bl	1a002118 <vPortExitCritical>
}
1a001c70:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a001c72:	4d0d      	ldr	r5, [pc, #52]	; (1a001ca8 <prvCheckForValidListAndQueue+0x48>)
1a001c74:	4628      	mov	r0, r5
1a001c76:	f7ff f960 	bl	1a000f3a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a001c7a:	4c0c      	ldr	r4, [pc, #48]	; (1a001cac <prvCheckForValidListAndQueue+0x4c>)
1a001c7c:	4620      	mov	r0, r4
1a001c7e:	f7ff f95c 	bl	1a000f3a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a001c82:	4b0b      	ldr	r3, [pc, #44]	; (1a001cb0 <prvCheckForValidListAndQueue+0x50>)
1a001c84:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a001c86:	4b0b      	ldr	r3, [pc, #44]	; (1a001cb4 <prvCheckForValidListAndQueue+0x54>)
1a001c88:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
1a001c8a:	2200      	movs	r2, #0
1a001c8c:	2110      	movs	r1, #16
1a001c8e:	200a      	movs	r0, #10
1a001c90:	f7fe fe35 	bl	1a0008fe <xQueueGenericCreate>
1a001c94:	4b03      	ldr	r3, [pc, #12]	; (1a001ca4 <prvCheckForValidListAndQueue+0x44>)
1a001c96:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a001c98:	2800      	cmp	r0, #0
1a001c9a:	d0e7      	beq.n	1a001c6c <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a001c9c:	4906      	ldr	r1, [pc, #24]	; (1a001cb8 <prvCheckForValidListAndQueue+0x58>)
1a001c9e:	f7ff f90f 	bl	1a000ec0 <vQueueAddToRegistry>
1a001ca2:	e7e3      	b.n	1a001c6c <prvCheckForValidListAndQueue+0xc>
1a001ca4:	10002214 	.word	0x10002214
1a001ca8:	100021e8 	.word	0x100021e8
1a001cac:	100021fc 	.word	0x100021fc
1a001cb0:	100021e0 	.word	0x100021e0
1a001cb4:	100021e4 	.word	0x100021e4
1a001cb8:	1a0048a8 	.word	0x1a0048a8

1a001cbc <xTimerCreateTimerTask>:
{
1a001cbc:	b500      	push	{lr}
1a001cbe:	b083      	sub	sp, #12
	prvCheckForValidListAndQueue();
1a001cc0:	f7ff ffce 	bl	1a001c60 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a001cc4:	4b0d      	ldr	r3, [pc, #52]	; (1a001cfc <xTimerCreateTimerTask+0x40>)
1a001cc6:	681b      	ldr	r3, [r3, #0]
1a001cc8:	b15b      	cbz	r3, 1a001ce2 <xTimerCreateTimerTask+0x26>
			xReturn = xTaskCreate(	prvTimerTask,
1a001cca:	4b0d      	ldr	r3, [pc, #52]	; (1a001d00 <xTimerCreateTimerTask+0x44>)
1a001ccc:	9301      	str	r3, [sp, #4]
1a001cce:	2304      	movs	r3, #4
1a001cd0:	9300      	str	r3, [sp, #0]
1a001cd2:	2300      	movs	r3, #0
1a001cd4:	f44f 72b4 	mov.w	r2, #360	; 0x168
1a001cd8:	490a      	ldr	r1, [pc, #40]	; (1a001d04 <xTimerCreateTimerTask+0x48>)
1a001cda:	480b      	ldr	r0, [pc, #44]	; (1a001d08 <xTimerCreateTimerTask+0x4c>)
1a001cdc:	f7ff fb1e 	bl	1a00131c <xTaskCreate>
	configASSERT( xReturn );
1a001ce0:	b940      	cbnz	r0, 1a001cf4 <xTimerCreateTimerTask+0x38>
1a001ce2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ce6:	f383 8811 	msr	BASEPRI, r3
1a001cea:	f3bf 8f6f 	isb	sy
1a001cee:	f3bf 8f4f 	dsb	sy
1a001cf2:	e7fe      	b.n	1a001cf2 <xTimerCreateTimerTask+0x36>
}
1a001cf4:	b003      	add	sp, #12
1a001cf6:	f85d fb04 	ldr.w	pc, [sp], #4
1a001cfa:	bf00      	nop
1a001cfc:	10002214 	.word	0x10002214
1a001d00:	10002218 	.word	0x10002218
1a001d04:	1a0048b0 	.word	0x1a0048b0
1a001d08:	1a001fe5 	.word	0x1a001fe5

1a001d0c <xTimerGenericCommand>:
	configASSERT( xTimer );
1a001d0c:	b1c0      	cbz	r0, 1a001d40 <xTimerGenericCommand+0x34>
{
1a001d0e:	b530      	push	{r4, r5, lr}
1a001d10:	b085      	sub	sp, #20
1a001d12:	4615      	mov	r5, r2
1a001d14:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a001d16:	4a17      	ldr	r2, [pc, #92]	; (1a001d74 <xTimerGenericCommand+0x68>)
1a001d18:	6810      	ldr	r0, [r2, #0]
1a001d1a:	b340      	cbz	r0, 1a001d6e <xTimerGenericCommand+0x62>
1a001d1c:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a001d1e:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a001d20:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a001d22:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a001d24:	2905      	cmp	r1, #5
1a001d26:	dc1c      	bgt.n	1a001d62 <xTimerGenericCommand+0x56>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a001d28:	f7ff fe30 	bl	1a00198c <xTaskGetSchedulerState>
1a001d2c:	2802      	cmp	r0, #2
1a001d2e:	d010      	beq.n	1a001d52 <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a001d30:	2300      	movs	r3, #0
1a001d32:	461a      	mov	r2, r3
1a001d34:	4669      	mov	r1, sp
1a001d36:	480f      	ldr	r0, [pc, #60]	; (1a001d74 <xTimerGenericCommand+0x68>)
1a001d38:	6800      	ldr	r0, [r0, #0]
1a001d3a:	f7fe fe05 	bl	1a000948 <xQueueGenericSend>
1a001d3e:	e014      	b.n	1a001d6a <xTimerGenericCommand+0x5e>
1a001d40:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d44:	f383 8811 	msr	BASEPRI, r3
1a001d48:	f3bf 8f6f 	isb	sy
1a001d4c:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
1a001d50:	e7fe      	b.n	1a001d50 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a001d52:	2300      	movs	r3, #0
1a001d54:	9a08      	ldr	r2, [sp, #32]
1a001d56:	4669      	mov	r1, sp
1a001d58:	4806      	ldr	r0, [pc, #24]	; (1a001d74 <xTimerGenericCommand+0x68>)
1a001d5a:	6800      	ldr	r0, [r0, #0]
1a001d5c:	f7fe fdf4 	bl	1a000948 <xQueueGenericSend>
1a001d60:	e003      	b.n	1a001d6a <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a001d62:	2300      	movs	r3, #0
1a001d64:	4669      	mov	r1, sp
1a001d66:	f7fe feaf 	bl	1a000ac8 <xQueueGenericSendFromISR>
}
1a001d6a:	b005      	add	sp, #20
1a001d6c:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
1a001d6e:	2000      	movs	r0, #0
	return xReturn;
1a001d70:	e7fb      	b.n	1a001d6a <xTimerGenericCommand+0x5e>
1a001d72:	bf00      	nop
1a001d74:	10002214 	.word	0x10002214

1a001d78 <prvSwitchTimerLists>:
{
1a001d78:	b570      	push	{r4, r5, r6, lr}
1a001d7a:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a001d7c:	4b1a      	ldr	r3, [pc, #104]	; (1a001de8 <prvSwitchTimerLists+0x70>)
1a001d7e:	681b      	ldr	r3, [r3, #0]
1a001d80:	681a      	ldr	r2, [r3, #0]
1a001d82:	b352      	cbz	r2, 1a001dda <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001d84:	68db      	ldr	r3, [r3, #12]
1a001d86:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001d88:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001d8a:	1d25      	adds	r5, r4, #4
1a001d8c:	4628      	mov	r0, r5
1a001d8e:	f7ff f907 	bl	1a000fa0 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001d92:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001d94:	4620      	mov	r0, r4
1a001d96:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001d98:	69e3      	ldr	r3, [r4, #28]
1a001d9a:	2b01      	cmp	r3, #1
1a001d9c:	d1ee      	bne.n	1a001d7c <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a001d9e:	69a3      	ldr	r3, [r4, #24]
1a001da0:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a001da2:	429e      	cmp	r6, r3
1a001da4:	d207      	bcs.n	1a001db6 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a001da6:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a001da8:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a001daa:	4629      	mov	r1, r5
1a001dac:	4b0e      	ldr	r3, [pc, #56]	; (1a001de8 <prvSwitchTimerLists+0x70>)
1a001dae:	6818      	ldr	r0, [r3, #0]
1a001db0:	f7ff f8dc 	bl	1a000f6c <vListInsert>
1a001db4:	e7e2      	b.n	1a001d7c <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a001db6:	2100      	movs	r1, #0
1a001db8:	9100      	str	r1, [sp, #0]
1a001dba:	460b      	mov	r3, r1
1a001dbc:	4632      	mov	r2, r6
1a001dbe:	4620      	mov	r0, r4
1a001dc0:	f7ff ffa4 	bl	1a001d0c <xTimerGenericCommand>
				configASSERT( xResult );
1a001dc4:	2800      	cmp	r0, #0
1a001dc6:	d1d9      	bne.n	1a001d7c <prvSwitchTimerLists+0x4>
1a001dc8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001dcc:	f383 8811 	msr	BASEPRI, r3
1a001dd0:	f3bf 8f6f 	isb	sy
1a001dd4:	f3bf 8f4f 	dsb	sy
1a001dd8:	e7fe      	b.n	1a001dd8 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a001dda:	4a04      	ldr	r2, [pc, #16]	; (1a001dec <prvSwitchTimerLists+0x74>)
1a001ddc:	6810      	ldr	r0, [r2, #0]
1a001dde:	4902      	ldr	r1, [pc, #8]	; (1a001de8 <prvSwitchTimerLists+0x70>)
1a001de0:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a001de2:	6013      	str	r3, [r2, #0]
}
1a001de4:	b002      	add	sp, #8
1a001de6:	bd70      	pop	{r4, r5, r6, pc}
1a001de8:	100021e0 	.word	0x100021e0
1a001dec:	100021e4 	.word	0x100021e4

1a001df0 <prvSampleTimeNow>:
{
1a001df0:	b538      	push	{r3, r4, r5, lr}
1a001df2:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a001df4:	f7ff fb0e 	bl	1a001414 <xTaskGetTickCount>
1a001df8:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a001dfa:	4b07      	ldr	r3, [pc, #28]	; (1a001e18 <prvSampleTimeNow+0x28>)
1a001dfc:	681b      	ldr	r3, [r3, #0]
1a001dfe:	4283      	cmp	r3, r0
1a001e00:	d805      	bhi.n	1a001e0e <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a001e02:	2300      	movs	r3, #0
1a001e04:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a001e06:	4b04      	ldr	r3, [pc, #16]	; (1a001e18 <prvSampleTimeNow+0x28>)
1a001e08:	601c      	str	r4, [r3, #0]
}
1a001e0a:	4620      	mov	r0, r4
1a001e0c:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a001e0e:	f7ff ffb3 	bl	1a001d78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a001e12:	2301      	movs	r3, #1
1a001e14:	602b      	str	r3, [r5, #0]
1a001e16:	e7f6      	b.n	1a001e06 <prvSampleTimeNow+0x16>
1a001e18:	10002210 	.word	0x10002210

1a001e1c <prvProcessExpiredTimer>:
{
1a001e1c:	b570      	push	{r4, r5, r6, lr}
1a001e1e:	b082      	sub	sp, #8
1a001e20:	4605      	mov	r5, r0
1a001e22:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001e24:	4b14      	ldr	r3, [pc, #80]	; (1a001e78 <prvProcessExpiredTimer+0x5c>)
1a001e26:	681b      	ldr	r3, [r3, #0]
1a001e28:	68db      	ldr	r3, [r3, #12]
1a001e2a:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001e2c:	1d20      	adds	r0, r4, #4
1a001e2e:	f7ff f8b7 	bl	1a000fa0 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001e32:	69e3      	ldr	r3, [r4, #28]
1a001e34:	2b01      	cmp	r3, #1
1a001e36:	d004      	beq.n	1a001e42 <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001e38:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001e3a:	4620      	mov	r0, r4
1a001e3c:	4798      	blx	r3
}
1a001e3e:	b002      	add	sp, #8
1a001e40:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a001e42:	69a1      	ldr	r1, [r4, #24]
1a001e44:	462b      	mov	r3, r5
1a001e46:	4632      	mov	r2, r6
1a001e48:	4429      	add	r1, r5
1a001e4a:	4620      	mov	r0, r4
1a001e4c:	f7ff fee4 	bl	1a001c18 <prvInsertTimerInActiveList>
1a001e50:	2800      	cmp	r0, #0
1a001e52:	d0f1      	beq.n	1a001e38 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a001e54:	2100      	movs	r1, #0
1a001e56:	9100      	str	r1, [sp, #0]
1a001e58:	460b      	mov	r3, r1
1a001e5a:	462a      	mov	r2, r5
1a001e5c:	4620      	mov	r0, r4
1a001e5e:	f7ff ff55 	bl	1a001d0c <xTimerGenericCommand>
			configASSERT( xResult );
1a001e62:	2800      	cmp	r0, #0
1a001e64:	d1e8      	bne.n	1a001e38 <prvProcessExpiredTimer+0x1c>
1a001e66:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e6a:	f383 8811 	msr	BASEPRI, r3
1a001e6e:	f3bf 8f6f 	isb	sy
1a001e72:	f3bf 8f4f 	dsb	sy
1a001e76:	e7fe      	b.n	1a001e76 <prvProcessExpiredTimer+0x5a>
1a001e78:	100021e0 	.word	0x100021e0

1a001e7c <prvProcessTimerOrBlockTask>:
{
1a001e7c:	b570      	push	{r4, r5, r6, lr}
1a001e7e:	b082      	sub	sp, #8
1a001e80:	4606      	mov	r6, r0
1a001e82:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a001e84:	f7ff fabe 	bl	1a001404 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a001e88:	a801      	add	r0, sp, #4
1a001e8a:	f7ff ffb1 	bl	1a001df0 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a001e8e:	9b01      	ldr	r3, [sp, #4]
1a001e90:	bb1b      	cbnz	r3, 1a001eda <prvProcessTimerOrBlockTask+0x5e>
1a001e92:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a001e94:	b90c      	cbnz	r4, 1a001e9a <prvProcessTimerOrBlockTask+0x1e>
1a001e96:	42b0      	cmp	r0, r6
1a001e98:	d218      	bcs.n	1a001ecc <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a001e9a:	b12c      	cbz	r4, 1a001ea8 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a001e9c:	4b11      	ldr	r3, [pc, #68]	; (1a001ee4 <prvProcessTimerOrBlockTask+0x68>)
1a001e9e:	681b      	ldr	r3, [r3, #0]
1a001ea0:	681c      	ldr	r4, [r3, #0]
1a001ea2:	fab4 f484 	clz	r4, r4
1a001ea6:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a001ea8:	4622      	mov	r2, r4
1a001eaa:	1b71      	subs	r1, r6, r5
1a001eac:	4b0e      	ldr	r3, [pc, #56]	; (1a001ee8 <prvProcessTimerOrBlockTask+0x6c>)
1a001eae:	6818      	ldr	r0, [r3, #0]
1a001eb0:	f7ff f81a 	bl	1a000ee8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a001eb4:	f7ff fb40 	bl	1a001538 <xTaskResumeAll>
1a001eb8:	b988      	cbnz	r0, 1a001ede <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a001eba:	4b0c      	ldr	r3, [pc, #48]	; (1a001eec <prvProcessTimerOrBlockTask+0x70>)
1a001ebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001ec0:	601a      	str	r2, [r3, #0]
1a001ec2:	f3bf 8f4f 	dsb	sy
1a001ec6:	f3bf 8f6f 	isb	sy
1a001eca:	e008      	b.n	1a001ede <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a001ecc:	f7ff fb34 	bl	1a001538 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a001ed0:	4629      	mov	r1, r5
1a001ed2:	4630      	mov	r0, r6
1a001ed4:	f7ff ffa2 	bl	1a001e1c <prvProcessExpiredTimer>
1a001ed8:	e001      	b.n	1a001ede <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a001eda:	f7ff fb2d 	bl	1a001538 <xTaskResumeAll>
}
1a001ede:	b002      	add	sp, #8
1a001ee0:	bd70      	pop	{r4, r5, r6, pc}
1a001ee2:	bf00      	nop
1a001ee4:	100021e4 	.word	0x100021e4
1a001ee8:	10002214 	.word	0x10002214
1a001eec:	e000ed04 	.word	0xe000ed04

1a001ef0 <prvProcessReceivedCommands>:
{
1a001ef0:	b530      	push	{r4, r5, lr}
1a001ef2:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a001ef4:	e006      	b.n	1a001f04 <prvProcessReceivedCommands+0x14>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a001ef6:	9907      	ldr	r1, [sp, #28]
1a001ef8:	9806      	ldr	r0, [sp, #24]
1a001efa:	9b05      	ldr	r3, [sp, #20]
1a001efc:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a001efe:	9b04      	ldr	r3, [sp, #16]
1a001f00:	2b00      	cmp	r3, #0
1a001f02:	da0b      	bge.n	1a001f1c <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a001f04:	2200      	movs	r2, #0
1a001f06:	a904      	add	r1, sp, #16
1a001f08:	4b35      	ldr	r3, [pc, #212]	; (1a001fe0 <prvProcessReceivedCommands+0xf0>)
1a001f0a:	6818      	ldr	r0, [r3, #0]
1a001f0c:	f7fe fe44 	bl	1a000b98 <xQueueReceive>
1a001f10:	2800      	cmp	r0, #0
1a001f12:	d062      	beq.n	1a001fda <prvProcessReceivedCommands+0xea>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a001f14:	9b04      	ldr	r3, [sp, #16]
1a001f16:	2b00      	cmp	r3, #0
1a001f18:	daf1      	bge.n	1a001efe <prvProcessReceivedCommands+0xe>
1a001f1a:	e7ec      	b.n	1a001ef6 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a001f1c:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a001f1e:	6963      	ldr	r3, [r4, #20]
1a001f20:	b113      	cbz	r3, 1a001f28 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001f22:	1d20      	adds	r0, r4, #4
1a001f24:	f7ff f83c 	bl	1a000fa0 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a001f28:	a803      	add	r0, sp, #12
1a001f2a:	f7ff ff61 	bl	1a001df0 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a001f2e:	9b04      	ldr	r3, [sp, #16]
1a001f30:	2b09      	cmp	r3, #9
1a001f32:	d8e7      	bhi.n	1a001f04 <prvProcessReceivedCommands+0x14>
1a001f34:	a201      	add	r2, pc, #4	; (adr r2, 1a001f3c <prvProcessReceivedCommands+0x4c>)
1a001f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a001f3a:	bf00      	nop
1a001f3c:	1a001f65 	.word	0x1a001f65
1a001f40:	1a001f65 	.word	0x1a001f65
1a001f44:	1a001f65 	.word	0x1a001f65
1a001f48:	1a001f05 	.word	0x1a001f05
1a001f4c:	1a001fad 	.word	0x1a001fad
1a001f50:	1a001fd3 	.word	0x1a001fd3
1a001f54:	1a001f65 	.word	0x1a001f65
1a001f58:	1a001f65 	.word	0x1a001f65
1a001f5c:	1a001f05 	.word	0x1a001f05
1a001f60:	1a001fad 	.word	0x1a001fad
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a001f64:	9905      	ldr	r1, [sp, #20]
1a001f66:	69a5      	ldr	r5, [r4, #24]
1a001f68:	460b      	mov	r3, r1
1a001f6a:	4602      	mov	r2, r0
1a001f6c:	4429      	add	r1, r5
1a001f6e:	4620      	mov	r0, r4
1a001f70:	f7ff fe52 	bl	1a001c18 <prvInsertTimerInActiveList>
1a001f74:	2800      	cmp	r0, #0
1a001f76:	d0c5      	beq.n	1a001f04 <prvProcessReceivedCommands+0x14>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001f78:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001f7a:	4620      	mov	r0, r4
1a001f7c:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001f7e:	69e3      	ldr	r3, [r4, #28]
1a001f80:	2b01      	cmp	r3, #1
1a001f82:	d1bf      	bne.n	1a001f04 <prvProcessReceivedCommands+0x14>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a001f84:	69a2      	ldr	r2, [r4, #24]
1a001f86:	2100      	movs	r1, #0
1a001f88:	9100      	str	r1, [sp, #0]
1a001f8a:	460b      	mov	r3, r1
1a001f8c:	9805      	ldr	r0, [sp, #20]
1a001f8e:	4402      	add	r2, r0
1a001f90:	4620      	mov	r0, r4
1a001f92:	f7ff febb 	bl	1a001d0c <xTimerGenericCommand>
							configASSERT( xResult );
1a001f96:	2800      	cmp	r0, #0
1a001f98:	d1b4      	bne.n	1a001f04 <prvProcessReceivedCommands+0x14>
1a001f9a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f9e:	f383 8811 	msr	BASEPRI, r3
1a001fa2:	f3bf 8f6f 	isb	sy
1a001fa6:	f3bf 8f4f 	dsb	sy
1a001faa:	e7fe      	b.n	1a001faa <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a001fac:	9905      	ldr	r1, [sp, #20]
1a001fae:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a001fb0:	b131      	cbz	r1, 1a001fc0 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a001fb2:	4603      	mov	r3, r0
1a001fb4:	4602      	mov	r2, r0
1a001fb6:	4401      	add	r1, r0
1a001fb8:	4620      	mov	r0, r4
1a001fba:	f7ff fe2d 	bl	1a001c18 <prvInsertTimerInActiveList>
					break;
1a001fbe:	e7a1      	b.n	1a001f04 <prvProcessReceivedCommands+0x14>
1a001fc0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001fc4:	f383 8811 	msr	BASEPRI, r3
1a001fc8:	f3bf 8f6f 	isb	sy
1a001fcc:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a001fd0:	e7fe      	b.n	1a001fd0 <prvProcessReceivedCommands+0xe0>
						vPortFree( pxTimer );
1a001fd2:	4620      	mov	r0, r4
1a001fd4:	f7fe fb8c 	bl	1a0006f0 <vPortFree>
					break;
1a001fd8:	e794      	b.n	1a001f04 <prvProcessReceivedCommands+0x14>
}
1a001fda:	b009      	add	sp, #36	; 0x24
1a001fdc:	bd30      	pop	{r4, r5, pc}
1a001fde:	bf00      	nop
1a001fe0:	10002214 	.word	0x10002214

1a001fe4 <prvTimerTask>:
{
1a001fe4:	b500      	push	{lr}
1a001fe6:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a001fe8:	a801      	add	r0, sp, #4
1a001fea:	f7ff fe05 	bl	1a001bf8 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a001fee:	9901      	ldr	r1, [sp, #4]
1a001ff0:	f7ff ff44 	bl	1a001e7c <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a001ff4:	f7ff ff7c 	bl	1a001ef0 <prvProcessReceivedCommands>
1a001ff8:	e7f6      	b.n	1a001fe8 <prvTimerTask+0x4>
1a001ffa:	Address 0x000000001a001ffa is out of bounds.


1a001ffc <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a001ffc:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a001ffe:	2300      	movs	r3, #0
1a002000:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a002002:	4b0d      	ldr	r3, [pc, #52]	; (1a002038 <prvTaskExitError+0x3c>)
1a002004:	681b      	ldr	r3, [r3, #0]
1a002006:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00200a:	d008      	beq.n	1a00201e <prvTaskExitError+0x22>
1a00200c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002010:	f383 8811 	msr	BASEPRI, r3
1a002014:	f3bf 8f6f 	isb	sy
1a002018:	f3bf 8f4f 	dsb	sy
1a00201c:	e7fe      	b.n	1a00201c <prvTaskExitError+0x20>
1a00201e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002022:	f383 8811 	msr	BASEPRI, r3
1a002026:	f3bf 8f6f 	isb	sy
1a00202a:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a00202e:	9b01      	ldr	r3, [sp, #4]
1a002030:	2b00      	cmp	r3, #0
1a002032:	d0fc      	beq.n	1a00202e <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a002034:	b002      	add	sp, #8
1a002036:	4770      	bx	lr
1a002038:	10000000 	.word	0x10000000

1a00203c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a00203c:	4808      	ldr	r0, [pc, #32]	; (1a002060 <prvPortStartFirstTask+0x24>)
1a00203e:	6800      	ldr	r0, [r0, #0]
1a002040:	6800      	ldr	r0, [r0, #0]
1a002042:	f380 8808 	msr	MSP, r0
1a002046:	f04f 0000 	mov.w	r0, #0
1a00204a:	f380 8814 	msr	CONTROL, r0
1a00204e:	b662      	cpsie	i
1a002050:	b661      	cpsie	f
1a002052:	f3bf 8f4f 	dsb	sy
1a002056:	f3bf 8f6f 	isb	sy
1a00205a:	df00      	svc	0
1a00205c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
1a00205e:	0000      	.short	0x0000
1a002060:	e000ed08 	.word	0xe000ed08

1a002064 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a002064:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a002074 <vPortEnableVFP+0x10>
1a002068:	6801      	ldr	r1, [r0, #0]
1a00206a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a00206e:	6001      	str	r1, [r0, #0]
1a002070:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
1a002072:	0000      	.short	0x0000
1a002074:	e000ed88 	.word	0xe000ed88

1a002078 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a002078:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a00207c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a002080:	f021 0101 	bic.w	r1, r1, #1
1a002084:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a002088:	4b05      	ldr	r3, [pc, #20]	; (1a0020a0 <pxPortInitialiseStack+0x28>)
1a00208a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a00208e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a002092:	f06f 0302 	mvn.w	r3, #2
1a002096:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a00209a:	3844      	subs	r0, #68	; 0x44
1a00209c:	4770      	bx	lr
1a00209e:	bf00      	nop
1a0020a0:	1a001ffd 	.word	0x1a001ffd
1a0020a4:	ffffffff 	.word	0xffffffff
1a0020a8:	ffffffff 	.word	0xffffffff
1a0020ac:	ffffffff 	.word	0xffffffff

1a0020b0 <SVC_Handler>:
	__asm volatile (
1a0020b0:	4b07      	ldr	r3, [pc, #28]	; (1a0020d0 <pxCurrentTCBConst2>)
1a0020b2:	6819      	ldr	r1, [r3, #0]
1a0020b4:	6808      	ldr	r0, [r1, #0]
1a0020b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0020ba:	f380 8809 	msr	PSP, r0
1a0020be:	f3bf 8f6f 	isb	sy
1a0020c2:	f04f 0000 	mov.w	r0, #0
1a0020c6:	f380 8811 	msr	BASEPRI, r0
1a0020ca:	4770      	bx	lr
1a0020cc:	f3af 8000 	nop.w

1a0020d0 <pxCurrentTCBConst2>:
1a0020d0:	100020b4 	.word	0x100020b4

1a0020d4 <vPortEnterCritical>:
1a0020d4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0020d8:	f383 8811 	msr	BASEPRI, r3
1a0020dc:	f3bf 8f6f 	isb	sy
1a0020e0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a0020e4:	4a0a      	ldr	r2, [pc, #40]	; (1a002110 <vPortEnterCritical+0x3c>)
1a0020e6:	6813      	ldr	r3, [r2, #0]
1a0020e8:	3301      	adds	r3, #1
1a0020ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a0020ec:	2b01      	cmp	r3, #1
1a0020ee:	d000      	beq.n	1a0020f2 <vPortEnterCritical+0x1e>
}
1a0020f0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a0020f2:	4b08      	ldr	r3, [pc, #32]	; (1a002114 <vPortEnterCritical+0x40>)
1a0020f4:	681b      	ldr	r3, [r3, #0]
1a0020f6:	f013 0fff 	tst.w	r3, #255	; 0xff
1a0020fa:	d0f9      	beq.n	1a0020f0 <vPortEnterCritical+0x1c>
1a0020fc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002100:	f383 8811 	msr	BASEPRI, r3
1a002104:	f3bf 8f6f 	isb	sy
1a002108:	f3bf 8f4f 	dsb	sy
1a00210c:	e7fe      	b.n	1a00210c <vPortEnterCritical+0x38>
1a00210e:	bf00      	nop
1a002110:	10000000 	.word	0x10000000
1a002114:	e000ed04 	.word	0xe000ed04

1a002118 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a002118:	4b09      	ldr	r3, [pc, #36]	; (1a002140 <vPortExitCritical+0x28>)
1a00211a:	681b      	ldr	r3, [r3, #0]
1a00211c:	b943      	cbnz	r3, 1a002130 <vPortExitCritical+0x18>
1a00211e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002122:	f383 8811 	msr	BASEPRI, r3
1a002126:	f3bf 8f6f 	isb	sy
1a00212a:	f3bf 8f4f 	dsb	sy
1a00212e:	e7fe      	b.n	1a00212e <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a002130:	3b01      	subs	r3, #1
1a002132:	4a03      	ldr	r2, [pc, #12]	; (1a002140 <vPortExitCritical+0x28>)
1a002134:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a002136:	b90b      	cbnz	r3, 1a00213c <vPortExitCritical+0x24>
	__asm volatile
1a002138:	f383 8811 	msr	BASEPRI, r3
}
1a00213c:	4770      	bx	lr
1a00213e:	bf00      	nop
1a002140:	10000000 	.word	0x10000000
1a002144:	ffffffff 	.word	0xffffffff
1a002148:	ffffffff 	.word	0xffffffff
1a00214c:	ffffffff 	.word	0xffffffff

1a002150 <PendSV_Handler>:
	__asm volatile
1a002150:	f3ef 8009 	mrs	r0, PSP
1a002154:	f3bf 8f6f 	isb	sy
1a002158:	4b15      	ldr	r3, [pc, #84]	; (1a0021b0 <pxCurrentTCBConst>)
1a00215a:	681a      	ldr	r2, [r3, #0]
1a00215c:	f01e 0f10 	tst.w	lr, #16
1a002160:	bf08      	it	eq
1a002162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a002166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00216a:	6010      	str	r0, [r2, #0]
1a00216c:	e92d 0009 	stmdb	sp!, {r0, r3}
1a002170:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a002174:	f380 8811 	msr	BASEPRI, r0
1a002178:	f3bf 8f4f 	dsb	sy
1a00217c:	f3bf 8f6f 	isb	sy
1a002180:	f7ff fad0 	bl	1a001724 <vTaskSwitchContext>
1a002184:	f04f 0000 	mov.w	r0, #0
1a002188:	f380 8811 	msr	BASEPRI, r0
1a00218c:	bc09      	pop	{r0, r3}
1a00218e:	6819      	ldr	r1, [r3, #0]
1a002190:	6808      	ldr	r0, [r1, #0]
1a002192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002196:	f01e 0f10 	tst.w	lr, #16
1a00219a:	bf08      	it	eq
1a00219c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a0021a0:	f380 8809 	msr	PSP, r0
1a0021a4:	f3bf 8f6f 	isb	sy
1a0021a8:	4770      	bx	lr
1a0021aa:	bf00      	nop
1a0021ac:	f3af 8000 	nop.w

1a0021b0 <pxCurrentTCBConst>:
1a0021b0:	100020b4 	.word	0x100020b4

1a0021b4 <SysTick_Handler>:
{
1a0021b4:	b508      	push	{r3, lr}
	__asm volatile
1a0021b6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021ba:	f383 8811 	msr	BASEPRI, r3
1a0021be:	f3bf 8f6f 	isb	sy
1a0021c2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a0021c6:	f7ff f92b 	bl	1a001420 <xTaskIncrementTick>
1a0021ca:	b118      	cbz	r0, 1a0021d4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a0021cc:	4b03      	ldr	r3, [pc, #12]	; (1a0021dc <SysTick_Handler+0x28>)
1a0021ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0021d2:	601a      	str	r2, [r3, #0]
	__asm volatile
1a0021d4:	2300      	movs	r3, #0
1a0021d6:	f383 8811 	msr	BASEPRI, r3
}
1a0021da:	bd08      	pop	{r3, pc}
1a0021dc:	e000ed04 	.word	0xe000ed04

1a0021e0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a0021e0:	4a08      	ldr	r2, [pc, #32]	; (1a002204 <vPortSetupTimerInterrupt+0x24>)
1a0021e2:	2300      	movs	r3, #0
1a0021e4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a0021e6:	4908      	ldr	r1, [pc, #32]	; (1a002208 <vPortSetupTimerInterrupt+0x28>)
1a0021e8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a0021ea:	4b08      	ldr	r3, [pc, #32]	; (1a00220c <vPortSetupTimerInterrupt+0x2c>)
1a0021ec:	681b      	ldr	r3, [r3, #0]
1a0021ee:	4908      	ldr	r1, [pc, #32]	; (1a002210 <vPortSetupTimerInterrupt+0x30>)
1a0021f0:	fba1 1303 	umull	r1, r3, r1, r3
1a0021f4:	099b      	lsrs	r3, r3, #6
1a0021f6:	3b01      	subs	r3, #1
1a0021f8:	4906      	ldr	r1, [pc, #24]	; (1a002214 <vPortSetupTimerInterrupt+0x34>)
1a0021fa:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a0021fc:	2307      	movs	r3, #7
1a0021fe:	6013      	str	r3, [r2, #0]
}
1a002200:	4770      	bx	lr
1a002202:	bf00      	nop
1a002204:	e000e010 	.word	0xe000e010
1a002208:	e000e018 	.word	0xe000e018
1a00220c:	10002290 	.word	0x10002290
1a002210:	10624dd3 	.word	0x10624dd3
1a002214:	e000e014 	.word	0xe000e014

1a002218 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002218:	4b3a      	ldr	r3, [pc, #232]	; (1a002304 <xPortStartScheduler+0xec>)
1a00221a:	681a      	ldr	r2, [r3, #0]
1a00221c:	4b3a      	ldr	r3, [pc, #232]	; (1a002308 <xPortStartScheduler+0xf0>)
1a00221e:	429a      	cmp	r2, r3
1a002220:	d029      	beq.n	1a002276 <xPortStartScheduler+0x5e>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002222:	4b38      	ldr	r3, [pc, #224]	; (1a002304 <xPortStartScheduler+0xec>)
1a002224:	681a      	ldr	r2, [r3, #0]
1a002226:	4b39      	ldr	r3, [pc, #228]	; (1a00230c <xPortStartScheduler+0xf4>)
1a002228:	429a      	cmp	r2, r3
1a00222a:	d02d      	beq.n	1a002288 <xPortStartScheduler+0x70>
{
1a00222c:	b510      	push	{r4, lr}
1a00222e:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a002230:	4b37      	ldr	r3, [pc, #220]	; (1a002310 <xPortStartScheduler+0xf8>)
1a002232:	781a      	ldrb	r2, [r3, #0]
1a002234:	b2d2      	uxtb	r2, r2
1a002236:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a002238:	22ff      	movs	r2, #255	; 0xff
1a00223a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a00223c:	781b      	ldrb	r3, [r3, #0]
1a00223e:	b2db      	uxtb	r3, r3
1a002240:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a002244:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002248:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a00224c:	4a31      	ldr	r2, [pc, #196]	; (1a002314 <xPortStartScheduler+0xfc>)
1a00224e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a002250:	4b31      	ldr	r3, [pc, #196]	; (1a002318 <xPortStartScheduler+0x100>)
1a002252:	2207      	movs	r2, #7
1a002254:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002256:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a00225a:	f013 0f80 	tst.w	r3, #128	; 0x80
1a00225e:	d01c      	beq.n	1a00229a <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
1a002260:	4a2d      	ldr	r2, [pc, #180]	; (1a002318 <xPortStartScheduler+0x100>)
1a002262:	6813      	ldr	r3, [r2, #0]
1a002264:	3b01      	subs	r3, #1
1a002266:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a002268:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a00226c:	005b      	lsls	r3, r3, #1
1a00226e:	b2db      	uxtb	r3, r3
1a002270:	f88d 3003 	strb.w	r3, [sp, #3]
1a002274:	e7ef      	b.n	1a002256 <xPortStartScheduler+0x3e>
	__asm volatile
1a002276:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00227a:	f383 8811 	msr	BASEPRI, r3
1a00227e:	f3bf 8f6f 	isb	sy
1a002282:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002286:	e7fe      	b.n	1a002286 <xPortStartScheduler+0x6e>
1a002288:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00228c:	f383 8811 	msr	BASEPRI, r3
1a002290:	f3bf 8f6f 	isb	sy
1a002294:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002298:	e7fe      	b.n	1a002298 <xPortStartScheduler+0x80>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a00229a:	4b1f      	ldr	r3, [pc, #124]	; (1a002318 <xPortStartScheduler+0x100>)
1a00229c:	681b      	ldr	r3, [r3, #0]
1a00229e:	2b04      	cmp	r3, #4
1a0022a0:	d008      	beq.n	1a0022b4 <xPortStartScheduler+0x9c>
1a0022a2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0022a6:	f383 8811 	msr	BASEPRI, r3
1a0022aa:	f3bf 8f6f 	isb	sy
1a0022ae:	f3bf 8f4f 	dsb	sy
1a0022b2:	e7fe      	b.n	1a0022b2 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a0022b4:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a0022b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a0022ba:	4a17      	ldr	r2, [pc, #92]	; (1a002318 <xPortStartScheduler+0x100>)
1a0022bc:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a0022be:	9b01      	ldr	r3, [sp, #4]
1a0022c0:	b2db      	uxtb	r3, r3
1a0022c2:	4a13      	ldr	r2, [pc, #76]	; (1a002310 <xPortStartScheduler+0xf8>)
1a0022c4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a0022c6:	4b15      	ldr	r3, [pc, #84]	; (1a00231c <xPortStartScheduler+0x104>)
1a0022c8:	681a      	ldr	r2, [r3, #0]
1a0022ca:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a0022ce:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a0022d0:	681a      	ldr	r2, [r3, #0]
1a0022d2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a0022d6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a0022d8:	f7ff ff82 	bl	1a0021e0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a0022dc:	2400      	movs	r4, #0
1a0022de:	4b10      	ldr	r3, [pc, #64]	; (1a002320 <xPortStartScheduler+0x108>)
1a0022e0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a0022e2:	f7ff febf 	bl	1a002064 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a0022e6:	4a0f      	ldr	r2, [pc, #60]	; (1a002324 <xPortStartScheduler+0x10c>)
1a0022e8:	6813      	ldr	r3, [r2, #0]
1a0022ea:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a0022ee:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a0022f0:	f7ff fea4 	bl	1a00203c <prvPortStartFirstTask>
	vTaskSwitchContext();
1a0022f4:	f7ff fa16 	bl	1a001724 <vTaskSwitchContext>
	prvTaskExitError();
1a0022f8:	f7ff fe80 	bl	1a001ffc <prvTaskExitError>
}
1a0022fc:	4620      	mov	r0, r4
1a0022fe:	b002      	add	sp, #8
1a002300:	bd10      	pop	{r4, pc}
1a002302:	bf00      	nop
1a002304:	e000ed00 	.word	0xe000ed00
1a002308:	410fc271 	.word	0x410fc271
1a00230c:	410fc270 	.word	0x410fc270
1a002310:	e000e400 	.word	0xe000e400
1a002314:	1000221c 	.word	0x1000221c
1a002318:	10002220 	.word	0x10002220
1a00231c:	e000ed20 	.word	0xe000ed20
1a002320:	10000000 	.word	0x10000000
1a002324:	e000ef34 	.word	0xe000ef34

1a002328 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a002328:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a00232c:	2b0f      	cmp	r3, #15
1a00232e:	d90f      	bls.n	1a002350 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a002330:	4a10      	ldr	r2, [pc, #64]	; (1a002374 <vPortValidateInterruptPriority+0x4c>)
1a002332:	5c9b      	ldrb	r3, [r3, r2]
1a002334:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a002336:	4a10      	ldr	r2, [pc, #64]	; (1a002378 <vPortValidateInterruptPriority+0x50>)
1a002338:	7812      	ldrb	r2, [r2, #0]
1a00233a:	429a      	cmp	r2, r3
1a00233c:	d908      	bls.n	1a002350 <vPortValidateInterruptPriority+0x28>
1a00233e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002342:	f383 8811 	msr	BASEPRI, r3
1a002346:	f3bf 8f6f 	isb	sy
1a00234a:	f3bf 8f4f 	dsb	sy
1a00234e:	e7fe      	b.n	1a00234e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a002350:	4b0a      	ldr	r3, [pc, #40]	; (1a00237c <vPortValidateInterruptPriority+0x54>)
1a002352:	681b      	ldr	r3, [r3, #0]
1a002354:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002358:	4a09      	ldr	r2, [pc, #36]	; (1a002380 <vPortValidateInterruptPriority+0x58>)
1a00235a:	6812      	ldr	r2, [r2, #0]
1a00235c:	4293      	cmp	r3, r2
1a00235e:	d908      	bls.n	1a002372 <vPortValidateInterruptPriority+0x4a>
1a002360:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002364:	f383 8811 	msr	BASEPRI, r3
1a002368:	f3bf 8f6f 	isb	sy
1a00236c:	f3bf 8f4f 	dsb	sy
1a002370:	e7fe      	b.n	1a002370 <vPortValidateInterruptPriority+0x48>
	}
1a002372:	4770      	bx	lr
1a002374:	e000e3f0 	.word	0xe000e3f0
1a002378:	1000221c 	.word	0x1000221c
1a00237c:	e000ed0c 	.word	0xe000ed0c
1a002380:	10002220 	.word	0x10002220

1a002384 <DAC_IRQHandler>:
}
/*-----------------------------------------------------------*/

// ISR Handler
void vSoftwareInterruptHandler( void )
{
1a002384:	b508      	push	{r3, lr}
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a002386:	4b05      	ldr	r3, [pc, #20]	; (1a00239c <DAC_IRQHandler+0x18>)
1a002388:	2201      	movs	r2, #1
1a00238a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC_ClearPendingIRQ( mainSW_INTERRUPT_ID );

   // Execute Tick Hook function if pointer is not NULL
   if( freeRtosInterruptCallback != NULL ) {
1a00238e:	4b04      	ldr	r3, [pc, #16]	; (1a0023a0 <DAC_IRQHandler+0x1c>)
1a002390:	681b      	ldr	r3, [r3, #0]
1a002392:	b113      	cbz	r3, 1a00239a <DAC_IRQHandler+0x16>
      (* freeRtosInterruptCallback )();
1a002394:	4b02      	ldr	r3, [pc, #8]	; (1a0023a0 <DAC_IRQHandler+0x1c>)
1a002396:	681b      	ldr	r3, [r3, #0]
1a002398:	4798      	blx	r3
   }
}
1a00239a:	bd08      	pop	{r3, pc}
1a00239c:	e000e100 	.word	0xe000e100
1a0023a0:	10002224 	.word	0x10002224

1a0023a4 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0023a4:	2200      	movs	r2, #0
1a0023a6:	2a05      	cmp	r2, #5
1a0023a8:	d819      	bhi.n	1a0023de <Board_LED_Init+0x3a>
{
1a0023aa:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a0023ac:	490c      	ldr	r1, [pc, #48]	; (1a0023e0 <Board_LED_Init+0x3c>)
1a0023ae:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a0023b2:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a0023b6:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a0023b8:	4b0a      	ldr	r3, [pc, #40]	; (1a0023e4 <Board_LED_Init+0x40>)
1a0023ba:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a0023be:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a0023c2:	2001      	movs	r0, #1
1a0023c4:	40a0      	lsls	r0, r4
1a0023c6:	4301      	orrs	r1, r0
1a0023c8:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a0023cc:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a0023d0:	2100      	movs	r1, #0
1a0023d2:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0023d4:	3201      	adds	r2, #1
1a0023d6:	2a05      	cmp	r2, #5
1a0023d8:	d9e8      	bls.n	1a0023ac <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a0023da:	bc70      	pop	{r4, r5, r6}
1a0023dc:	4770      	bx	lr
1a0023de:	4770      	bx	lr
1a0023e0:	1a0048c4 	.word	0x1a0048c4
1a0023e4:	400f4000 	.word	0x400f4000

1a0023e8 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0023e8:	2300      	movs	r3, #0
1a0023ea:	2b03      	cmp	r3, #3
1a0023ec:	d816      	bhi.n	1a00241c <Board_TEC_Init+0x34>
{
1a0023ee:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0023f0:	490b      	ldr	r1, [pc, #44]	; (1a002420 <Board_TEC_Init+0x38>)
1a0023f2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0023f6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0023fa:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0023fc:	4c09      	ldr	r4, [pc, #36]	; (1a002424 <Board_TEC_Init+0x3c>)
1a0023fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002402:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002406:	2001      	movs	r0, #1
1a002408:	40a8      	lsls	r0, r5
1a00240a:	ea21 0100 	bic.w	r1, r1, r0
1a00240e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002412:	3301      	adds	r3, #1
1a002414:	2b03      	cmp	r3, #3
1a002416:	d9eb      	bls.n	1a0023f0 <Board_TEC_Init+0x8>
   }
}
1a002418:	bc30      	pop	{r4, r5}
1a00241a:	4770      	bx	lr
1a00241c:	4770      	bx	lr
1a00241e:	bf00      	nop
1a002420:	1a0048bc 	.word	0x1a0048bc
1a002424:	400f4000 	.word	0x400f4000

1a002428 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002428:	2300      	movs	r3, #0
1a00242a:	2b08      	cmp	r3, #8
1a00242c:	d816      	bhi.n	1a00245c <Board_GPIO_Init+0x34>
{
1a00242e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002430:	490b      	ldr	r1, [pc, #44]	; (1a002460 <Board_GPIO_Init+0x38>)
1a002432:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002436:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00243a:	784d      	ldrb	r5, [r1, #1]
1a00243c:	4c09      	ldr	r4, [pc, #36]	; (1a002464 <Board_GPIO_Init+0x3c>)
1a00243e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002442:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002446:	2001      	movs	r0, #1
1a002448:	40a8      	lsls	r0, r5
1a00244a:	ea21 0100 	bic.w	r1, r1, r0
1a00244e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002452:	3301      	adds	r3, #1
1a002454:	2b08      	cmp	r3, #8
1a002456:	d9eb      	bls.n	1a002430 <Board_GPIO_Init+0x8>
   }
}
1a002458:	bc30      	pop	{r4, r5}
1a00245a:	4770      	bx	lr
1a00245c:	4770      	bx	lr
1a00245e:	bf00      	nop
1a002460:	1a0048d0 	.word	0x1a0048d0
1a002464:	400f4000 	.word	0x400f4000

1a002468 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a002468:	b510      	push	{r4, lr}
1a00246a:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a00246c:	4c08      	ldr	r4, [pc, #32]	; (1a002490 <Board_ADC_Init+0x28>)
1a00246e:	4669      	mov	r1, sp
1a002470:	4620      	mov	r0, r4
1a002472:	f000 f9d9 	bl	1a002828 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a002476:	4a07      	ldr	r2, [pc, #28]	; (1a002494 <Board_ADC_Init+0x2c>)
1a002478:	4669      	mov	r1, sp
1a00247a:	4620      	mov	r0, r4
1a00247c:	f000 f9f4 	bl	1a002868 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a002480:	2200      	movs	r2, #0
1a002482:	4669      	mov	r1, sp
1a002484:	4620      	mov	r0, r4
1a002486:	f000 fa08 	bl	1a00289a <Chip_ADC_SetResolution>
}
1a00248a:	b002      	add	sp, #8
1a00248c:	bd10      	pop	{r4, pc}
1a00248e:	bf00      	nop
1a002490:	400e3000 	.word	0x400e3000
1a002494:	00061a80 	.word	0x00061a80

1a002498 <Board_SPI_Init>:
{
1a002498:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a00249a:	4c0b      	ldr	r4, [pc, #44]	; (1a0024c8 <Board_SPI_Init+0x30>)
1a00249c:	4620      	mov	r0, r4
1a00249e:	f000 fdfd 	bl	1a00309c <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0024a2:	6863      	ldr	r3, [r4, #4]
1a0024a4:	f023 0304 	bic.w	r3, r3, #4
1a0024a8:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0024aa:	6823      	ldr	r3, [r4, #0]
1a0024ac:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0024b0:	f043 0307 	orr.w	r3, r3, #7
1a0024b4:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a0024b6:	4905      	ldr	r1, [pc, #20]	; (1a0024cc <Board_SPI_Init+0x34>)
1a0024b8:	4620      	mov	r0, r4
1a0024ba:	f000 fdd0 	bl	1a00305e <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a0024be:	6863      	ldr	r3, [r4, #4]
1a0024c0:	f043 0302 	orr.w	r3, r3, #2
1a0024c4:	6063      	str	r3, [r4, #4]
}
1a0024c6:	bd10      	pop	{r4, pc}
1a0024c8:	400c5000 	.word	0x400c5000
1a0024cc:	000186a0 	.word	0x000186a0

1a0024d0 <Board_I2C_Init>:
{
1a0024d0:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a0024d2:	2000      	movs	r0, #0
1a0024d4:	f000 fcc8 	bl	1a002e68 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0024d8:	4b04      	ldr	r3, [pc, #16]	; (1a0024ec <Board_I2C_Init+0x1c>)
1a0024da:	f640 0208 	movw	r2, #2056	; 0x808
1a0024de:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0024e2:	4903      	ldr	r1, [pc, #12]	; (1a0024f0 <Board_I2C_Init+0x20>)
1a0024e4:	2000      	movs	r0, #0
1a0024e6:	f000 fcd1 	bl	1a002e8c <Chip_I2C_SetClockRate>
}
1a0024ea:	bd08      	pop	{r3, pc}
1a0024ec:	40086000 	.word	0x40086000
1a0024f0:	000f4240 	.word	0x000f4240

1a0024f4 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a0024f4:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a0024f6:	4c07      	ldr	r4, [pc, #28]	; (1a002514 <Board_Debug_Init+0x20>)
1a0024f8:	4620      	mov	r0, r4
1a0024fa:	f000 f8b9 	bl	1a002670 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0024fe:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a002502:	4620      	mov	r0, r4
1a002504:	f000 f8fe 	bl	1a002704 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a002508:	2303      	movs	r3, #3
1a00250a:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a00250c:	2301      	movs	r3, #1
1a00250e:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a002510:	bd10      	pop	{r4, pc}
1a002512:	bf00      	nop
1a002514:	400c1000 	.word	0x400c1000

1a002518 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a002518:	4b03      	ldr	r3, [pc, #12]	; (1a002528 <Board_UARTPutChar+0x10>)
1a00251a:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a00251c:	f013 0f20 	tst.w	r3, #32
1a002520:	d0fa      	beq.n	1a002518 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a002522:	4b01      	ldr	r3, [pc, #4]	; (1a002528 <Board_UARTPutChar+0x10>)
1a002524:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a002526:	4770      	bx	lr
1a002528:	400c1000 	.word	0x400c1000

1a00252c <Board_UARTGetChar>:
	return pUART->LSR;
1a00252c:	4b05      	ldr	r3, [pc, #20]	; (1a002544 <Board_UARTGetChar+0x18>)
1a00252e:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a002530:	f013 0f01 	tst.w	r3, #1
1a002534:	d003      	beq.n	1a00253e <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a002536:	4b03      	ldr	r3, [pc, #12]	; (1a002544 <Board_UARTGetChar+0x18>)
1a002538:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a00253a:	b2c0      	uxtb	r0, r0
1a00253c:	4770      	bx	lr
   }
   return EOF;
1a00253e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a002542:	4770      	bx	lr
1a002544:	400c1000 	.word	0x400c1000

1a002548 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a002548:	b508      	push	{r3, lr}
   DEBUGINIT();
1a00254a:	f7ff ffd3 	bl	1a0024f4 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a00254e:	4809      	ldr	r0, [pc, #36]	; (1a002574 <Board_Init+0x2c>)
1a002550:	f000 fcb8 	bl	1a002ec4 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a002554:	f7ff ff68 	bl	1a002428 <Board_GPIO_Init>
   Board_ADC_Init();
1a002558:	f7ff ff86 	bl	1a002468 <Board_ADC_Init>
   Board_SPI_Init();
1a00255c:	f7ff ff9c 	bl	1a002498 <Board_SPI_Init>
   Board_I2C_Init();
1a002560:	f7ff ffb6 	bl	1a0024d0 <Board_I2C_Init>

   Board_LED_Init();
1a002564:	f7ff ff1e 	bl	1a0023a4 <Board_LED_Init>
   Board_TEC_Init();
1a002568:	f7ff ff3e 	bl	1a0023e8 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a00256c:	f000 f99c 	bl	1a0028a8 <SystemCoreClockUpdate>
}
1a002570:	bd08      	pop	{r3, pc}
1a002572:	bf00      	nop
1a002574:	400f4000 	.word	0x400f4000

1a002578 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a002578:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a00257a:	b2c0      	uxtb	r0, r0
1a00257c:	f7ff ffcc 	bl	1a002518 <Board_UARTPutChar>
}
1a002580:	bd08      	pop	{r3, pc}

1a002582 <__stdio_getchar>:

int __stdio_getchar()
{
1a002582:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a002584:	f7ff ffd2 	bl	1a00252c <Board_UARTGetChar>
}
1a002588:	bd08      	pop	{r3, pc}

1a00258a <__stdio_init>:

void __stdio_init()
{
1a00258a:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a00258c:	f7ff ffb2 	bl	1a0024f4 <Board_Debug_Init>
1a002590:	bd08      	pop	{r3, pc}
1a002592:	Address 0x000000001a002592 is out of bounds.


1a002594 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002594:	2300      	movs	r3, #0
1a002596:	2b1c      	cmp	r3, #28
1a002598:	d812      	bhi.n	1a0025c0 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a00259a:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a00259c:	4a09      	ldr	r2, [pc, #36]	; (1a0025c4 <Board_SetupMuxing+0x30>)
1a00259e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a0025a2:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a0025a6:	784a      	ldrb	r2, [r1, #1]
1a0025a8:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0025aa:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a0025ae:	4906      	ldr	r1, [pc, #24]	; (1a0025c8 <Board_SetupMuxing+0x34>)
1a0025b0:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0025b4:	3301      	adds	r3, #1
1a0025b6:	2b1c      	cmp	r3, #28
1a0025b8:	d9f0      	bls.n	1a00259c <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a0025ba:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0025be:	4770      	bx	lr
1a0025c0:	4770      	bx	lr
1a0025c2:	bf00      	nop
1a0025c4:	1a0048ec 	.word	0x1a0048ec
1a0025c8:	40086000 	.word	0x40086000

1a0025cc <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a0025cc:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a0025ce:	4a17      	ldr	r2, [pc, #92]	; (1a00262c <Board_SetupClocking+0x60>)
1a0025d0:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a0025d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0025d8:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0025dc:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a0025e0:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a0025e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0025e8:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0025ec:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0025f0:	2201      	movs	r2, #1
1a0025f2:	490f      	ldr	r1, [pc, #60]	; (1a002630 <Board_SetupClocking+0x64>)
1a0025f4:	2006      	movs	r0, #6
1a0025f6:	f000 fc67 	bl	1a002ec8 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0025fa:	2400      	movs	r4, #0
1a0025fc:	b14c      	cbz	r4, 1a002612 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0025fe:	4b0b      	ldr	r3, [pc, #44]	; (1a00262c <Board_SetupClocking+0x60>)
1a002600:	685a      	ldr	r2, [r3, #4]
1a002602:	f022 020c 	bic.w	r2, r2, #12
1a002606:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a002608:	685a      	ldr	r2, [r3, #4]
1a00260a:	f042 0203 	orr.w	r2, r2, #3
1a00260e:	605a      	str	r2, [r3, #4]
}
1a002610:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a002612:	4808      	ldr	r0, [pc, #32]	; (1a002634 <Board_SetupClocking+0x68>)
1a002614:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a002618:	2301      	movs	r3, #1
1a00261a:	788a      	ldrb	r2, [r1, #2]
1a00261c:	7849      	ldrb	r1, [r1, #1]
1a00261e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a002622:	f000 fb6d 	bl	1a002d00 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002626:	3401      	adds	r4, #1
1a002628:	e7e8      	b.n	1a0025fc <Board_SetupClocking+0x30>
1a00262a:	bf00      	nop
1a00262c:	40043000 	.word	0x40043000
1a002630:	0c28cb00 	.word	0x0c28cb00
1a002634:	1a0048e8 	.word	0x1a0048e8

1a002638 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a002638:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a00263a:	f7ff ffab 	bl	1a002594 <Board_SetupMuxing>
    Board_SetupClocking();
1a00263e:	f7ff ffc5 	bl	1a0025cc <Board_SetupClocking>
}
1a002642:	bd08      	pop	{r3, pc}

1a002644 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a002644:	4b09      	ldr	r3, [pc, #36]	; (1a00266c <Chip_UART_GetIndex+0x28>)
1a002646:	4298      	cmp	r0, r3
1a002648:	d009      	beq.n	1a00265e <Chip_UART_GetIndex+0x1a>
1a00264a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00264e:	4298      	cmp	r0, r3
1a002650:	d007      	beq.n	1a002662 <Chip_UART_GetIndex+0x1e>
1a002652:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a002656:	4298      	cmp	r0, r3
1a002658:	d005      	beq.n	1a002666 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a00265a:	2000      	movs	r0, #0
1a00265c:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a00265e:	2002      	movs	r0, #2
1a002660:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a002662:	2003      	movs	r0, #3
1a002664:	4770      	bx	lr
			return 1;
1a002666:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a002668:	4770      	bx	lr
1a00266a:	bf00      	nop
1a00266c:	400c1000 	.word	0x400c1000

1a002670 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a002670:	b530      	push	{r4, r5, lr}
1a002672:	b083      	sub	sp, #12
1a002674:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a002676:	f7ff ffe5 	bl	1a002644 <Chip_UART_GetIndex>
1a00267a:	2301      	movs	r3, #1
1a00267c:	461a      	mov	r2, r3
1a00267e:	4619      	mov	r1, r3
1a002680:	4d0e      	ldr	r5, [pc, #56]	; (1a0026bc <Chip_UART_Init+0x4c>)
1a002682:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a002686:	f000 fb81 	bl	1a002d8c <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a00268a:	2307      	movs	r3, #7
1a00268c:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a00268e:	2300      	movs	r3, #0
1a002690:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a002692:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a002694:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a002696:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a002698:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a00269a:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a00269c:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00269e:	4b08      	ldr	r3, [pc, #32]	; (1a0026c0 <Chip_UART_Init+0x50>)
1a0026a0:	429c      	cmp	r4, r3
1a0026a2:	d006      	beq.n	1a0026b2 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a0026a4:	2303      	movs	r3, #3
1a0026a6:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a0026a8:	2310      	movs	r3, #16
1a0026aa:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a0026ac:	9b01      	ldr	r3, [sp, #4]
}
1a0026ae:	b003      	add	sp, #12
1a0026b0:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a0026b2:	2300      	movs	r3, #0
1a0026b4:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a0026b6:	69a3      	ldr	r3, [r4, #24]
1a0026b8:	9301      	str	r3, [sp, #4]
1a0026ba:	e7f3      	b.n	1a0026a4 <Chip_UART_Init+0x34>
1a0026bc:	1a004968 	.word	0x1a004968
1a0026c0:	40082000 	.word	0x40082000

1a0026c4 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a0026c4:	b538      	push	{r3, r4, r5, lr}
1a0026c6:	4605      	mov	r5, r0
1a0026c8:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0026ca:	f7ff ffbb 	bl	1a002644 <Chip_UART_GetIndex>
1a0026ce:	4b0c      	ldr	r3, [pc, #48]	; (1a002700 <Chip_UART_SetBaud+0x3c>)
1a0026d0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0026d4:	f000 fb92 	bl	1a002dfc <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a0026d8:	0123      	lsls	r3, r4, #4
1a0026da:	fbb0 f3f3 	udiv	r3, r0, r3

	/* High and low halves of the divider */
	divh = div / 256;
	divl = div - (divh * 256);
1a0026de:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0026e0:	68ea      	ldr	r2, [r5, #12]
1a0026e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a0026e6:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a0026e8:	6029      	str	r1, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a0026ea:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a0026ee:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0026f0:	68ea      	ldr	r2, [r5, #12]
1a0026f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a0026f6:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a0026f8:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a0026fc:	0900      	lsrs	r0, r0, #4
1a0026fe:	bd38      	pop	{r3, r4, r5, pc}
1a002700:	1a004960 	.word	0x1a004960

1a002704 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a002704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002708:	b083      	sub	sp, #12
1a00270a:	9001      	str	r0, [sp, #4]
1a00270c:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00270e:	f7ff ff99 	bl	1a002644 <Chip_UART_GetIndex>
1a002712:	4b32      	ldr	r3, [pc, #200]	; (1a0027dc <Chip_UART_SetBaudFDR+0xd8>)
1a002714:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002718:	f000 fb70 	bl	1a002dfc <Chip_Clock_GetRate>
1a00271c:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a00271e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a002722:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a002724:	f04f 0b00 	mov.w	fp, #0
1a002728:	46a2      	mov	sl, r4
1a00272a:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a00272c:	e02a      	b.n	1a002784 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a00272e:	4242      	negs	r2, r0
				div ++;
1a002730:	1c4b      	adds	r3, r1, #1
1a002732:	e017      	b.n	1a002764 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a002734:	b30a      	cbz	r2, 1a00277a <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a002736:	4617      	mov	r7, r2
			sd = d;
1a002738:	46ab      	mov	fp, r5
			sm = m;
1a00273a:	46a2      	mov	sl, r4
			sdiv = div;
1a00273c:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a00273e:	3501      	adds	r5, #1
1a002740:	42ac      	cmp	r4, r5
1a002742:	d91e      	bls.n	1a002782 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a002744:	0933      	lsrs	r3, r6, #4
1a002746:	0730      	lsls	r0, r6, #28
1a002748:	fba4 0100 	umull	r0, r1, r4, r0
1a00274c:	fb04 1103 	mla	r1, r4, r3, r1
1a002750:	1962      	adds	r2, r4, r5
1a002752:	fb08 f202 	mul.w	r2, r8, r2
1a002756:	2300      	movs	r3, #0
1a002758:	f000 feca 	bl	1a0034f0 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a00275c:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a00275e:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a002760:	2800      	cmp	r0, #0
1a002762:	dbe4      	blt.n	1a00272e <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a002764:	4297      	cmp	r7, r2
1a002766:	d3ea      	bcc.n	1a00273e <Chip_UART_SetBaudFDR+0x3a>
1a002768:	2b00      	cmp	r3, #0
1a00276a:	d0e8      	beq.n	1a00273e <Chip_UART_SetBaudFDR+0x3a>
1a00276c:	0c19      	lsrs	r1, r3, #16
1a00276e:	d1e6      	bne.n	1a00273e <Chip_UART_SetBaudFDR+0x3a>
1a002770:	2b02      	cmp	r3, #2
1a002772:	d8df      	bhi.n	1a002734 <Chip_UART_SetBaudFDR+0x30>
1a002774:	2d00      	cmp	r5, #0
1a002776:	d0dd      	beq.n	1a002734 <Chip_UART_SetBaudFDR+0x30>
1a002778:	e7e1      	b.n	1a00273e <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a00277a:	4617      	mov	r7, r2
			sd = d;
1a00277c:	46ab      	mov	fp, r5
			sm = m;
1a00277e:	46a2      	mov	sl, r4
			sdiv = div;
1a002780:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a002782:	3401      	adds	r4, #1
1a002784:	b11f      	cbz	r7, 1a00278e <Chip_UART_SetBaudFDR+0x8a>
1a002786:	2c0f      	cmp	r4, #15
1a002788:	d801      	bhi.n	1a00278e <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a00278a:	2500      	movs	r5, #0
1a00278c:	e7d8      	b.n	1a002740 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a00278e:	f1b9 0f00 	cmp.w	r9, #0
1a002792:	d01e      	beq.n	1a0027d2 <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002794:	9a01      	ldr	r2, [sp, #4]
1a002796:	4611      	mov	r1, r2
1a002798:	68d3      	ldr	r3, [r2, #12]
1a00279a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00279e:	60d3      	str	r3, [r2, #12]
	pUART->DLL = (uint32_t) dll;
1a0027a0:	fa5f f389 	uxtb.w	r3, r9
1a0027a4:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a0027a6:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a0027aa:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0027ac:	68d3      	ldr	r3, [r2, #12]
1a0027ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0027b2:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0027b4:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a0027b8:	b2db      	uxtb	r3, r3
1a0027ba:	f00b 020f 	and.w	r2, fp, #15
1a0027be:	4313      	orrs	r3, r2
1a0027c0:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0027c2:	0933      	lsrs	r3, r6, #4
1a0027c4:	fb0a f303 	mul.w	r3, sl, r3
1a0027c8:	44da      	add	sl, fp
1a0027ca:	fb09 f90a 	mul.w	r9, r9, sl
1a0027ce:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a0027d2:	4648      	mov	r0, r9
1a0027d4:	b003      	add	sp, #12
1a0027d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0027da:	bf00      	nop
1a0027dc:	1a004960 	.word	0x1a004960

1a0027e0 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a0027e0:	4b03      	ldr	r3, [pc, #12]	; (1a0027f0 <Chip_ADC_GetClockIndex+0x10>)
1a0027e2:	4298      	cmp	r0, r3
1a0027e4:	d001      	beq.n	1a0027ea <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a0027e6:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a0027e8:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a0027ea:	2004      	movs	r0, #4
1a0027ec:	4770      	bx	lr
1a0027ee:	bf00      	nop
1a0027f0:	400e4000 	.word	0x400e4000

1a0027f4 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a0027f4:	b570      	push	{r4, r5, r6, lr}
1a0027f6:	460d      	mov	r5, r1
1a0027f8:	4614      	mov	r4, r2
1a0027fa:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a0027fc:	f7ff fff0 	bl	1a0027e0 <Chip_ADC_GetClockIndex>
1a002800:	f000 fafc 	bl	1a002dfc <Chip_Clock_GetRate>
	if (burstMode) {
1a002804:	b155      	cbz	r5, 1a00281c <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a002806:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a00280a:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a00280e:	0064      	lsls	r4, r4, #1
1a002810:	fbb0 f0f4 	udiv	r0, r0, r4
1a002814:	b2c0      	uxtb	r0, r0
1a002816:	3801      	subs	r0, #1
	return div;
}
1a002818:	b2c0      	uxtb	r0, r0
1a00281a:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a00281c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a002820:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a002824:	e7f1      	b.n	1a00280a <getClkDiv+0x16>
1a002826:	Address 0x000000001a002826 is out of bounds.


1a002828 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a002828:	b538      	push	{r3, r4, r5, lr}
1a00282a:	4605      	mov	r5, r0
1a00282c:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a00282e:	f7ff ffd7 	bl	1a0027e0 <Chip_ADC_GetClockIndex>
1a002832:	2301      	movs	r3, #1
1a002834:	461a      	mov	r2, r3
1a002836:	4619      	mov	r1, r3
1a002838:	f000 faa8 	bl	1a002d8c <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a00283c:	2100      	movs	r1, #0
1a00283e:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a002840:	4a08      	ldr	r2, [pc, #32]	; (1a002864 <Chip_ADC_Init+0x3c>)
1a002842:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a002844:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a002846:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a002848:	230b      	movs	r3, #11
1a00284a:	4628      	mov	r0, r5
1a00284c:	f7ff ffd2 	bl	1a0027f4 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002850:	0200      	lsls	r0, r0, #8
1a002852:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002856:	7920      	ldrb	r0, [r4, #4]
1a002858:	0440      	lsls	r0, r0, #17
1a00285a:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a00285e:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a002860:	6028      	str	r0, [r5, #0]
}
1a002862:	bd38      	pop	{r3, r4, r5, pc}
1a002864:	00061a80 	.word	0x00061a80

1a002868 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a002868:	b570      	push	{r4, r5, r6, lr}
1a00286a:	4605      	mov	r5, r0
1a00286c:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a00286e:	6804      	ldr	r4, [r0, #0]
1a002870:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a002874:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a002878:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a00287a:	790b      	ldrb	r3, [r1, #4]
1a00287c:	f1c3 030b 	rsb	r3, r3, #11
1a002880:	b2db      	uxtb	r3, r3
1a002882:	7949      	ldrb	r1, [r1, #5]
1a002884:	f7ff ffb6 	bl	1a0027f4 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002888:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00288c:	7933      	ldrb	r3, [r6, #4]
1a00288e:	045b      	lsls	r3, r3, #17
1a002890:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a002894:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a002896:	602b      	str	r3, [r5, #0]
}
1a002898:	bd70      	pop	{r4, r5, r6, pc}

1a00289a <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a00289a:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a00289c:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a00289e:	680a      	ldr	r2, [r1, #0]
1a0028a0:	f7ff ffe2 	bl	1a002868 <Chip_ADC_SetSampleRate>
}
1a0028a4:	bd08      	pop	{r3, pc}
1a0028a6:	Address 0x000000001a0028a6 is out of bounds.


1a0028a8 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a0028a8:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a0028aa:	2069      	movs	r0, #105	; 0x69
1a0028ac:	f000 faa6 	bl	1a002dfc <Chip_Clock_GetRate>
1a0028b0:	4b01      	ldr	r3, [pc, #4]	; (1a0028b8 <SystemCoreClockUpdate+0x10>)
1a0028b2:	6018      	str	r0, [r3, #0]
}
1a0028b4:	bd08      	pop	{r3, pc}
1a0028b6:	bf00      	nop
1a0028b8:	10002290 	.word	0x10002290

1a0028bc <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0028bc:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a0028be:	680b      	ldr	r3, [r1, #0]
1a0028c0:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0028c4:	d002      	beq.n	1a0028cc <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a0028c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0028ca:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a0028cc:	4607      	mov	r7, r0
1a0028ce:	2501      	movs	r5, #1
1a0028d0:	e03a      	b.n	1a002948 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a0028d2:	694b      	ldr	r3, [r1, #20]
1a0028d4:	fb03 f302 	mul.w	r3, r3, r2
1a0028d8:	fbb3 f3f5 	udiv	r3, r3, r5
1a0028dc:	e01c      	b.n	1a002918 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a0028de:	461c      	mov	r4, r3
	if (val < 0)
1a0028e0:	ebb0 0c04 	subs.w	ip, r0, r4
1a0028e4:	d427      	bmi.n	1a002936 <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a0028e6:	4567      	cmp	r7, ip
1a0028e8:	d906      	bls.n	1a0028f8 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a0028ea:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a0028ec:	1c77      	adds	r7, r6, #1
1a0028ee:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a0028f0:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a0028f2:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a0028f4:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a0028f6:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a0028f8:	3201      	adds	r2, #1
1a0028fa:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a0028fe:	dc1d      	bgt.n	1a00293c <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a002900:	680c      	ldr	r4, [r1, #0]
1a002902:	f014 0f40 	tst.w	r4, #64	; 0x40
1a002906:	d0e4      	beq.n	1a0028d2 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a002908:	1c73      	adds	r3, r6, #1
1a00290a:	fa02 fc03 	lsl.w	ip, r2, r3
1a00290e:	694b      	ldr	r3, [r1, #20]
1a002910:	fb03 f30c 	mul.w	r3, r3, ip
1a002914:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a002918:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a002954 <pll_calc_divs+0x98>
1a00291c:	4563      	cmp	r3, ip
1a00291e:	d9eb      	bls.n	1a0028f8 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a002920:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a002958 <pll_calc_divs+0x9c>
1a002924:	4563      	cmp	r3, ip
1a002926:	d809      	bhi.n	1a00293c <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a002928:	f014 0f80 	tst.w	r4, #128	; 0x80
1a00292c:	d1d7      	bne.n	1a0028de <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a00292e:	1c74      	adds	r4, r6, #1
1a002930:	fa23 f404 	lsr.w	r4, r3, r4
1a002934:	e7d4      	b.n	1a0028e0 <pll_calc_divs+0x24>
		return -val;
1a002936:	f1cc 0c00 	rsb	ip, ip, #0
1a00293a:	e7d4      	b.n	1a0028e6 <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a00293c:	3601      	adds	r6, #1
1a00293e:	2e03      	cmp	r6, #3
1a002940:	dc01      	bgt.n	1a002946 <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a002942:	2201      	movs	r2, #1
1a002944:	e7d9      	b.n	1a0028fa <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a002946:	3501      	adds	r5, #1
1a002948:	2d04      	cmp	r5, #4
1a00294a:	dc01      	bgt.n	1a002950 <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a00294c:	2600      	movs	r6, #0
1a00294e:	e7f6      	b.n	1a00293e <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a002950:	bcf0      	pop	{r4, r5, r6, r7}
1a002952:	4770      	bx	lr
1a002954:	094c5eff 	.word	0x094c5eff
1a002958:	1312d000 	.word	0x1312d000

1a00295c <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a00295c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00295e:	b099      	sub	sp, #100	; 0x64
1a002960:	4605      	mov	r5, r0
1a002962:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a002964:	225c      	movs	r2, #92	; 0x5c
1a002966:	2100      	movs	r1, #0
1a002968:	a801      	add	r0, sp, #4
1a00296a:	f001 f92e 	bl	1a003bca <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a00296e:	2380      	movs	r3, #128	; 0x80
1a002970:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a002972:	6963      	ldr	r3, [r4, #20]
1a002974:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a002976:	7923      	ldrb	r3, [r4, #4]
1a002978:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a00297c:	4669      	mov	r1, sp
1a00297e:	4628      	mov	r0, r5
1a002980:	f7ff ff9c 	bl	1a0028bc <pll_calc_divs>
	if (pll[0].fout == freq) {
1a002984:	9b06      	ldr	r3, [sp, #24]
1a002986:	42ab      	cmp	r3, r5
1a002988:	d027      	beq.n	1a0029da <pll_get_frac+0x7e>
	if (val < 0)
1a00298a:	1aeb      	subs	r3, r5, r3
1a00298c:	d42e      	bmi.n	1a0029ec <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a00298e:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a002990:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a002992:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002996:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a002998:	6963      	ldr	r3, [r4, #20]
1a00299a:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a00299c:	7923      	ldrb	r3, [r4, #4]
1a00299e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a0029a2:	a910      	add	r1, sp, #64	; 0x40
1a0029a4:	4628      	mov	r0, r5
1a0029a6:	f7ff ff89 	bl	1a0028bc <pll_calc_divs>
	if (pll[2].fout == freq) {
1a0029aa:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a0029ac:	42ab      	cmp	r3, r5
1a0029ae:	d01f      	beq.n	1a0029f0 <pll_get_frac+0x94>
	if (val < 0)
1a0029b0:	1aeb      	subs	r3, r5, r3
1a0029b2:	d425      	bmi.n	1a002a00 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a0029b4:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a0029b6:	4b2b      	ldr	r3, [pc, #172]	; (1a002a64 <pll_get_frac+0x108>)
1a0029b8:	429d      	cmp	r5, r3
1a0029ba:	d923      	bls.n	1a002a04 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a0029bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a0029be:	1aed      	subs	r5, r5, r3
1a0029c0:	d433      	bmi.n	1a002a2a <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a0029c2:	42ae      	cmp	r6, r5
1a0029c4:	dc3b      	bgt.n	1a002a3e <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a0029c6:	42be      	cmp	r6, r7
1a0029c8:	dc31      	bgt.n	1a002a2e <pll_get_frac+0xd2>
			*ppll = pll[0];
1a0029ca:	466d      	mov	r5, sp
1a0029cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0029ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0029d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0029d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0029d8:	e006      	b.n	1a0029e8 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a0029da:	466d      	mov	r5, sp
1a0029dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0029de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0029e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0029e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a0029e8:	b019      	add	sp, #100	; 0x64
1a0029ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a0029ec:	425b      	negs	r3, r3
1a0029ee:	e7ce      	b.n	1a00298e <pll_get_frac+0x32>
		*ppll = pll[2];
1a0029f0:	ad10      	add	r5, sp, #64	; 0x40
1a0029f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0029f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0029f6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0029fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a0029fe:	e7f3      	b.n	1a0029e8 <pll_get_frac+0x8c>
		return -val;
1a002a00:	425b      	negs	r3, r3
1a002a02:	e7d7      	b.n	1a0029b4 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a002a04:	2340      	movs	r3, #64	; 0x40
1a002a06:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a002a08:	6963      	ldr	r3, [r4, #20]
1a002a0a:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a002a0c:	a908      	add	r1, sp, #32
1a002a0e:	4628      	mov	r0, r5
1a002a10:	f7ff ff54 	bl	1a0028bc <pll_calc_divs>
		if (pll[1].fout == freq) {
1a002a14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a002a16:	42ab      	cmp	r3, r5
1a002a18:	d1d0      	bne.n	1a0029bc <pll_get_frac+0x60>
			*ppll = pll[1];
1a002a1a:	ad08      	add	r5, sp, #32
1a002a1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002a1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002a20:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002a24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a002a28:	e7de      	b.n	1a0029e8 <pll_get_frac+0x8c>
		return -val;
1a002a2a:	426d      	negs	r5, r5
1a002a2c:	e7c9      	b.n	1a0029c2 <pll_get_frac+0x66>
			*ppll = pll[2];
1a002a2e:	ad10      	add	r5, sp, #64	; 0x40
1a002a30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002a32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002a34:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002a38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002a3c:	e7d4      	b.n	1a0029e8 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a002a3e:	42af      	cmp	r7, r5
1a002a40:	db07      	blt.n	1a002a52 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a002a42:	ad08      	add	r5, sp, #32
1a002a44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002a46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002a48:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002a4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002a50:	e7ca      	b.n	1a0029e8 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a002a52:	ad10      	add	r5, sp, #64	; 0x40
1a002a54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002a56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002a58:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002a5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002a60:	e7c2      	b.n	1a0029e8 <pll_get_frac+0x8c>
1a002a62:	bf00      	nop
1a002a64:	068e7780 	.word	0x068e7780

1a002a68 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a002a68:	b430      	push	{r4, r5}
1a002a6a:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a002a6c:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a002a6e:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002a70:	e000      	b.n	1a002a74 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a002a72:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002a74:	281c      	cmp	r0, #28
1a002a76:	d118      	bne.n	1a002aaa <Chip_Clock_FindBaseClock+0x42>
1a002a78:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002a7c:	0051      	lsls	r1, r2, #1
1a002a7e:	4a0c      	ldr	r2, [pc, #48]	; (1a002ab0 <Chip_Clock_FindBaseClock+0x48>)
1a002a80:	440a      	add	r2, r1
1a002a82:	7914      	ldrb	r4, [r2, #4]
1a002a84:	4284      	cmp	r4, r0
1a002a86:	d010      	beq.n	1a002aaa <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a002a88:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a002a8c:	004a      	lsls	r2, r1, #1
1a002a8e:	4908      	ldr	r1, [pc, #32]	; (1a002ab0 <Chip_Clock_FindBaseClock+0x48>)
1a002a90:	5a8a      	ldrh	r2, [r1, r2]
1a002a92:	42aa      	cmp	r2, r5
1a002a94:	d8ed      	bhi.n	1a002a72 <Chip_Clock_FindBaseClock+0xa>
1a002a96:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002a9a:	0051      	lsls	r1, r2, #1
1a002a9c:	4a04      	ldr	r2, [pc, #16]	; (1a002ab0 <Chip_Clock_FindBaseClock+0x48>)
1a002a9e:	440a      	add	r2, r1
1a002aa0:	8852      	ldrh	r2, [r2, #2]
1a002aa2:	42aa      	cmp	r2, r5
1a002aa4:	d3e5      	bcc.n	1a002a72 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a002aa6:	4620      	mov	r0, r4
1a002aa8:	e7e4      	b.n	1a002a74 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a002aaa:	bc30      	pop	{r4, r5}
1a002aac:	4770      	bx	lr
1a002aae:	bf00      	nop
1a002ab0:	1a00497c 	.word	0x1a00497c

1a002ab4 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a002ab4:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a002ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a002aba:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a002abc:	4a0d      	ldr	r2, [pc, #52]	; (1a002af4 <Chip_Clock_EnableCrystal+0x40>)
1a002abe:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a002ac0:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a002ac4:	6992      	ldr	r2, [r2, #24]
1a002ac6:	428a      	cmp	r2, r1
1a002ac8:	d001      	beq.n	1a002ace <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002aca:	4a0a      	ldr	r2, [pc, #40]	; (1a002af4 <Chip_Clock_EnableCrystal+0x40>)
1a002acc:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a002ace:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a002ad2:	4a09      	ldr	r2, [pc, #36]	; (1a002af8 <Chip_Clock_EnableCrystal+0x44>)
1a002ad4:	6811      	ldr	r1, [r2, #0]
1a002ad6:	4a09      	ldr	r2, [pc, #36]	; (1a002afc <Chip_Clock_EnableCrystal+0x48>)
1a002ad8:	4291      	cmp	r1, r2
1a002ada:	d901      	bls.n	1a002ae0 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a002adc:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002ae0:	4a04      	ldr	r2, [pc, #16]	; (1a002af4 <Chip_Clock_EnableCrystal+0x40>)
1a002ae2:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a002ae4:	9b01      	ldr	r3, [sp, #4]
1a002ae6:	1e5a      	subs	r2, r3, #1
1a002ae8:	9201      	str	r2, [sp, #4]
1a002aea:	2b00      	cmp	r3, #0
1a002aec:	d1fa      	bne.n	1a002ae4 <Chip_Clock_EnableCrystal+0x30>
}
1a002aee:	b002      	add	sp, #8
1a002af0:	4770      	bx	lr
1a002af2:	bf00      	nop
1a002af4:	40050000 	.word	0x40050000
1a002af8:	1a0048e4 	.word	0x1a0048e4
1a002afc:	01312cff 	.word	0x01312cff

1a002b00 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a002b00:	3012      	adds	r0, #18
1a002b02:	4b05      	ldr	r3, [pc, #20]	; (1a002b18 <Chip_Clock_GetDividerSource+0x18>)
1a002b04:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a002b08:	f010 0f01 	tst.w	r0, #1
1a002b0c:	d102      	bne.n	1a002b14 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002b0e:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002b12:	4770      	bx	lr
		return CLKINPUT_PD;
1a002b14:	2011      	movs	r0, #17
}
1a002b16:	4770      	bx	lr
1a002b18:	40050000 	.word	0x40050000

1a002b1c <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a002b1c:	f100 0212 	add.w	r2, r0, #18
1a002b20:	4b03      	ldr	r3, [pc, #12]	; (1a002b30 <Chip_Clock_GetDividerDivisor+0x14>)
1a002b22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a002b26:	4b03      	ldr	r3, [pc, #12]	; (1a002b34 <Chip_Clock_GetDividerDivisor+0x18>)
1a002b28:	5c18      	ldrb	r0, [r3, r0]
}
1a002b2a:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a002b2e:	4770      	bx	lr
1a002b30:	40050000 	.word	0x40050000
1a002b34:	1a004974 	.word	0x1a004974

1a002b38 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a002b38:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a002b3a:	2810      	cmp	r0, #16
1a002b3c:	d80a      	bhi.n	1a002b54 <Chip_Clock_GetClockInputHz+0x1c>
1a002b3e:	e8df f000 	tbb	[pc, r0]
1a002b42:	0b44      	.short	0x0b44
1a002b44:	0921180d 	.word	0x0921180d
1a002b48:	2d2a2724 	.word	0x2d2a2724
1a002b4c:	34300909 	.word	0x34300909
1a002b50:	3c38      	.short	0x3c38
1a002b52:	40          	.byte	0x40
1a002b53:	00          	.byte	0x00
	uint32_t rate = 0;
1a002b54:	2000      	movs	r0, #0
1a002b56:	e03a      	b.n	1a002bce <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a002b58:	481e      	ldr	r0, [pc, #120]	; (1a002bd4 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a002b5a:	e038      	b.n	1a002bce <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002b5c:	4b1e      	ldr	r3, [pc, #120]	; (1a002bd8 <Chip_Clock_GetClockInputHz+0xa0>)
1a002b5e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002b62:	f003 0307 	and.w	r3, r3, #7
1a002b66:	2b04      	cmp	r3, #4
1a002b68:	d001      	beq.n	1a002b6e <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a002b6a:	481c      	ldr	r0, [pc, #112]	; (1a002bdc <Chip_Clock_GetClockInputHz+0xa4>)
1a002b6c:	e02f      	b.n	1a002bce <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a002b6e:	2000      	movs	r0, #0
1a002b70:	e02d      	b.n	1a002bce <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002b72:	4b19      	ldr	r3, [pc, #100]	; (1a002bd8 <Chip_Clock_GetClockInputHz+0xa0>)
1a002b74:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002b78:	f003 0307 	and.w	r3, r3, #7
1a002b7c:	2b04      	cmp	r3, #4
1a002b7e:	d027      	beq.n	1a002bd0 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a002b80:	4816      	ldr	r0, [pc, #88]	; (1a002bdc <Chip_Clock_GetClockInputHz+0xa4>)
1a002b82:	e024      	b.n	1a002bce <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a002b84:	4b16      	ldr	r3, [pc, #88]	; (1a002be0 <Chip_Clock_GetClockInputHz+0xa8>)
1a002b86:	6818      	ldr	r0, [r3, #0]
		break;
1a002b88:	e021      	b.n	1a002bce <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a002b8a:	4b16      	ldr	r3, [pc, #88]	; (1a002be4 <Chip_Clock_GetClockInputHz+0xac>)
1a002b8c:	6818      	ldr	r0, [r3, #0]
		break;
1a002b8e:	e01e      	b.n	1a002bce <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a002b90:	4b15      	ldr	r3, [pc, #84]	; (1a002be8 <Chip_Clock_GetClockInputHz+0xb0>)
1a002b92:	6818      	ldr	r0, [r3, #0]
		break;
1a002b94:	e01b      	b.n	1a002bce <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a002b96:	4b14      	ldr	r3, [pc, #80]	; (1a002be8 <Chip_Clock_GetClockInputHz+0xb0>)
1a002b98:	6858      	ldr	r0, [r3, #4]
		break;
1a002b9a:	e018      	b.n	1a002bce <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a002b9c:	f000 f868 	bl	1a002c70 <Chip_Clock_GetMainPLLHz>
		break;
1a002ba0:	e015      	b.n	1a002bce <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a002ba2:	2100      	movs	r1, #0
1a002ba4:	f000 f89a 	bl	1a002cdc <Chip_Clock_GetDivRate>
		break;
1a002ba8:	e011      	b.n	1a002bce <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a002baa:	2101      	movs	r1, #1
1a002bac:	f000 f896 	bl	1a002cdc <Chip_Clock_GetDivRate>
		break;
1a002bb0:	e00d      	b.n	1a002bce <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a002bb2:	2102      	movs	r1, #2
1a002bb4:	f000 f892 	bl	1a002cdc <Chip_Clock_GetDivRate>
		break;
1a002bb8:	e009      	b.n	1a002bce <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a002bba:	2103      	movs	r1, #3
1a002bbc:	f000 f88e 	bl	1a002cdc <Chip_Clock_GetDivRate>
		break;
1a002bc0:	e005      	b.n	1a002bce <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a002bc2:	2104      	movs	r1, #4
1a002bc4:	f000 f88a 	bl	1a002cdc <Chip_Clock_GetDivRate>
		break;
1a002bc8:	e001      	b.n	1a002bce <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a002bca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a002bce:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a002bd0:	4806      	ldr	r0, [pc, #24]	; (1a002bec <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a002bd2:	e7fc      	b.n	1a002bce <Chip_Clock_GetClockInputHz+0x96>
1a002bd4:	00b71b00 	.word	0x00b71b00
1a002bd8:	40043000 	.word	0x40043000
1a002bdc:	017d7840 	.word	0x017d7840
1a002be0:	1a0048b8 	.word	0x1a0048b8
1a002be4:	1a0048e4 	.word	0x1a0048e4
1a002be8:	10002228 	.word	0x10002228
1a002bec:	02faf080 	.word	0x02faf080

1a002bf0 <Chip_Clock_CalcMainPLLValue>:
{
1a002bf0:	b538      	push	{r3, r4, r5, lr}
1a002bf2:	4605      	mov	r5, r0
1a002bf4:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a002bf6:	7908      	ldrb	r0, [r1, #4]
1a002bf8:	f7ff ff9e 	bl	1a002b38 <Chip_Clock_GetClockInputHz>
1a002bfc:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a002bfe:	4b19      	ldr	r3, [pc, #100]	; (1a002c64 <Chip_Clock_CalcMainPLLValue+0x74>)
1a002c00:	442b      	add	r3, r5
1a002c02:	4a19      	ldr	r2, [pc, #100]	; (1a002c68 <Chip_Clock_CalcMainPLLValue+0x78>)
1a002c04:	4293      	cmp	r3, r2
1a002c06:	d821      	bhi.n	1a002c4c <Chip_Clock_CalcMainPLLValue+0x5c>
1a002c08:	b318      	cbz	r0, 1a002c52 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a002c0a:	2380      	movs	r3, #128	; 0x80
1a002c0c:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a002c0e:	2300      	movs	r3, #0
1a002c10:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a002c12:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a002c14:	fbb5 f3f0 	udiv	r3, r5, r0
1a002c18:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a002c1a:	4a14      	ldr	r2, [pc, #80]	; (1a002c6c <Chip_Clock_CalcMainPLLValue+0x7c>)
1a002c1c:	4295      	cmp	r5, r2
1a002c1e:	d903      	bls.n	1a002c28 <Chip_Clock_CalcMainPLLValue+0x38>
1a002c20:	fb03 f000 	mul.w	r0, r3, r0
1a002c24:	42a8      	cmp	r0, r5
1a002c26:	d007      	beq.n	1a002c38 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a002c28:	4621      	mov	r1, r4
1a002c2a:	4628      	mov	r0, r5
1a002c2c:	f7ff fe96 	bl	1a00295c <pll_get_frac>
		if (!ppll->nsel) {
1a002c30:	68a3      	ldr	r3, [r4, #8]
1a002c32:	b18b      	cbz	r3, 1a002c58 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a002c34:	3b01      	subs	r3, #1
1a002c36:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a002c38:	6923      	ldr	r3, [r4, #16]
1a002c3a:	b183      	cbz	r3, 1a002c5e <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a002c3c:	68e2      	ldr	r2, [r4, #12]
1a002c3e:	b10a      	cbz	r2, 1a002c44 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a002c40:	3a01      	subs	r2, #1
1a002c42:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a002c44:	3b01      	subs	r3, #1
1a002c46:	6123      	str	r3, [r4, #16]
	return 0;
1a002c48:	2000      	movs	r0, #0
}
1a002c4a:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a002c4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002c50:	e7fb      	b.n	1a002c4a <Chip_Clock_CalcMainPLLValue+0x5a>
1a002c52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002c56:	e7f8      	b.n	1a002c4a <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a002c58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002c5c:	e7f5      	b.n	1a002c4a <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a002c5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002c62:	e7f2      	b.n	1a002c4a <Chip_Clock_CalcMainPLLValue+0x5a>
1a002c64:	ff6b3a10 	.word	0xff6b3a10
1a002c68:	0b940510 	.word	0x0b940510
1a002c6c:	094c5eff 	.word	0x094c5eff

1a002c70 <Chip_Clock_GetMainPLLHz>:
{
1a002c70:	b530      	push	{r4, r5, lr}
1a002c72:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a002c74:	4d17      	ldr	r5, [pc, #92]	; (1a002cd4 <Chip_Clock_GetMainPLLHz+0x64>)
1a002c76:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a002c78:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a002c7c:	f7ff ff5c 	bl	1a002b38 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a002c80:	4b15      	ldr	r3, [pc, #84]	; (1a002cd8 <Chip_Clock_GetMainPLLHz+0x68>)
1a002c82:	681b      	ldr	r3, [r3, #0]
1a002c84:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a002c86:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a002c88:	f013 0f01 	tst.w	r3, #1
1a002c8c:	d020      	beq.n	1a002cd0 <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a002c8e:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a002c92:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a002c96:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a002c9a:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a002c9e:	3301      	adds	r3, #1
	n = nsel + 1;
1a002ca0:	3201      	adds	r2, #1
	p = ptab[psel];
1a002ca2:	f10d 0c08 	add.w	ip, sp, #8
1a002ca6:	4461      	add	r1, ip
1a002ca8:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a002cac:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002cb0:	d108      	bne.n	1a002cc4 <Chip_Clock_GetMainPLLHz+0x54>
1a002cb2:	b93d      	cbnz	r5, 1a002cc4 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a002cb4:	0049      	lsls	r1, r1, #1
1a002cb6:	fbb3 f3f1 	udiv	r3, r3, r1
1a002cba:	fbb0 f0f2 	udiv	r0, r0, r2
1a002cbe:	fb00 f003 	mul.w	r0, r0, r3
1a002cc2:	e003      	b.n	1a002ccc <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a002cc4:	fbb0 f0f2 	udiv	r0, r0, r2
1a002cc8:	fb03 f000 	mul.w	r0, r3, r0
}
1a002ccc:	b003      	add	sp, #12
1a002cce:	bd30      	pop	{r4, r5, pc}
		return 0;
1a002cd0:	2000      	movs	r0, #0
1a002cd2:	e7fb      	b.n	1a002ccc <Chip_Clock_GetMainPLLHz+0x5c>
1a002cd4:	40050000 	.word	0x40050000
1a002cd8:	1a004970 	.word	0x1a004970

1a002cdc <Chip_Clock_GetDivRate>:
{
1a002cdc:	b538      	push	{r3, r4, r5, lr}
1a002cde:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a002ce0:	4608      	mov	r0, r1
1a002ce2:	f7ff ff0d 	bl	1a002b00 <Chip_Clock_GetDividerSource>
1a002ce6:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a002ce8:	4620      	mov	r0, r4
1a002cea:	f7ff ff17 	bl	1a002b1c <Chip_Clock_GetDividerDivisor>
1a002cee:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a002cf0:	4628      	mov	r0, r5
1a002cf2:	f7ff ff21 	bl	1a002b38 <Chip_Clock_GetClockInputHz>
1a002cf6:	3401      	adds	r4, #1
}
1a002cf8:	fbb0 f0f4 	udiv	r0, r0, r4
1a002cfc:	bd38      	pop	{r3, r4, r5, pc}
1a002cfe:	Address 0x000000001a002cfe is out of bounds.


1a002d00 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a002d00:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a002d02:	f100 0416 	add.w	r4, r0, #22
1a002d06:	00a4      	lsls	r4, r4, #2
1a002d08:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a002d0c:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a002d10:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a002d12:	281b      	cmp	r0, #27
1a002d14:	d813      	bhi.n	1a002d3e <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a002d16:	2911      	cmp	r1, #17
1a002d18:	d01a      	beq.n	1a002d50 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a002d1a:	4d0e      	ldr	r5, [pc, #56]	; (1a002d54 <Chip_Clock_SetBaseClock+0x54>)
1a002d1c:	4025      	ands	r5, r4

			if (autoblocken) {
1a002d1e:	b10a      	cbz	r2, 1a002d24 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a002d20:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a002d24:	b10b      	cbz	r3, 1a002d2a <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a002d26:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a002d2a:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a002d2e:	3016      	adds	r0, #22
1a002d30:	0080      	lsls	r0, r0, #2
1a002d32:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002d36:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002d3a:	6045      	str	r5, [r0, #4]
1a002d3c:	e008      	b.n	1a002d50 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a002d3e:	f044 0401 	orr.w	r4, r4, #1
1a002d42:	3016      	adds	r0, #22
1a002d44:	0080      	lsls	r0, r0, #2
1a002d46:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002d4a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002d4e:	6044      	str	r4, [r0, #4]
	}
}
1a002d50:	bc30      	pop	{r4, r5}
1a002d52:	4770      	bx	lr
1a002d54:	e0fff7fe 	.word	0xe0fff7fe

1a002d58 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a002d58:	281b      	cmp	r0, #27
1a002d5a:	d80c      	bhi.n	1a002d76 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a002d5c:	3016      	adds	r0, #22
1a002d5e:	0080      	lsls	r0, r0, #2
1a002d60:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002d64:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002d68:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a002d6a:	f010 0f01 	tst.w	r0, #1
1a002d6e:	d104      	bne.n	1a002d7a <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002d70:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002d74:	4770      	bx	lr
		return CLKINPUT_PD;
1a002d76:	2011      	movs	r0, #17
1a002d78:	4770      	bx	lr
		return CLKINPUT_PD;
1a002d7a:	2011      	movs	r0, #17
}
1a002d7c:	4770      	bx	lr

1a002d7e <Chip_Clock_GetBaseClocktHz>:
{
1a002d7e:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a002d80:	f7ff ffea 	bl	1a002d58 <Chip_Clock_GetBaseClock>
1a002d84:	f7ff fed8 	bl	1a002b38 <Chip_Clock_GetClockInputHz>
}
1a002d88:	bd08      	pop	{r3, pc}
1a002d8a:	Address 0x000000001a002d8a is out of bounds.


1a002d8c <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a002d8c:	b971      	cbnz	r1, 1a002dac <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a002d8e:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a002d90:	b10a      	cbz	r2, 1a002d96 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a002d92:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a002d96:	2b02      	cmp	r3, #2
1a002d98:	d00a      	beq.n	1a002db0 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a002d9a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002d9e:	d30a      	bcc.n	1a002db6 <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a002da0:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002da4:	4b06      	ldr	r3, [pc, #24]	; (1a002dc0 <Chip_Clock_EnableOpts+0x34>)
1a002da6:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a002daa:	4770      	bx	lr
		reg |= (1 << 1);
1a002dac:	2103      	movs	r1, #3
1a002dae:	e7ef      	b.n	1a002d90 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a002db0:	f041 0120 	orr.w	r1, r1, #32
1a002db4:	e7f1      	b.n	1a002d9a <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a002db6:	3020      	adds	r0, #32
1a002db8:	4b02      	ldr	r3, [pc, #8]	; (1a002dc4 <Chip_Clock_EnableOpts+0x38>)
1a002dba:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a002dbe:	4770      	bx	lr
1a002dc0:	40052000 	.word	0x40052000
1a002dc4:	40051000 	.word	0x40051000

1a002dc8 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a002dc8:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002dcc:	d309      	bcc.n	1a002de2 <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a002dce:	4a09      	ldr	r2, [pc, #36]	; (1a002df4 <Chip_Clock_Enable+0x2c>)
1a002dd0:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002dd4:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002dd8:	f043 0301 	orr.w	r3, r3, #1
1a002ddc:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a002de0:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a002de2:	4a05      	ldr	r2, [pc, #20]	; (1a002df8 <Chip_Clock_Enable+0x30>)
1a002de4:	3020      	adds	r0, #32
1a002de6:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002dea:	f043 0301 	orr.w	r3, r3, #1
1a002dee:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a002df2:	4770      	bx	lr
1a002df4:	40052000 	.word	0x40052000
1a002df8:	40051000 	.word	0x40051000

1a002dfc <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a002dfc:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a002dfe:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002e02:	d309      	bcc.n	1a002e18 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a002e04:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a002e08:	4a0d      	ldr	r2, [pc, #52]	; (1a002e40 <Chip_Clock_GetRate+0x44>)
1a002e0a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a002e0e:	f014 0f01 	tst.w	r4, #1
1a002e12:	d107      	bne.n	1a002e24 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a002e14:	2000      	movs	r0, #0
	}

	return rate;
}
1a002e16:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a002e18:	f100 0320 	add.w	r3, r0, #32
1a002e1c:	4a09      	ldr	r2, [pc, #36]	; (1a002e44 <Chip_Clock_GetRate+0x48>)
1a002e1e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a002e22:	e7f4      	b.n	1a002e0e <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a002e24:	f7ff fe20 	bl	1a002a68 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a002e28:	f7ff ffa9 	bl	1a002d7e <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a002e2c:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a002e30:	d103      	bne.n	1a002e3a <Chip_Clock_GetRate+0x3e>
			div = 1;
1a002e32:	2301      	movs	r3, #1
		rate = rate / div;
1a002e34:	fbb0 f0f3 	udiv	r0, r0, r3
1a002e38:	e7ed      	b.n	1a002e16 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a002e3a:	2302      	movs	r3, #2
1a002e3c:	e7fa      	b.n	1a002e34 <Chip_Clock_GetRate+0x38>
1a002e3e:	bf00      	nop
1a002e40:	40052000 	.word	0x40052000
1a002e44:	40051000 	.word	0x40051000

1a002e48 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a002e48:	2901      	cmp	r1, #1
1a002e4a:	d109      	bne.n	1a002e60 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a002e4c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a002e50:	0082      	lsls	r2, r0, #2
1a002e52:	4b04      	ldr	r3, [pc, #16]	; (1a002e64 <Chip_I2C_EventHandler+0x1c>)
1a002e54:	4413      	add	r3, r2
1a002e56:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a002e58:	7d13      	ldrb	r3, [r2, #20]
1a002e5a:	b2db      	uxtb	r3, r3
1a002e5c:	2b04      	cmp	r3, #4
1a002e5e:	d0fb      	beq.n	1a002e58 <Chip_I2C_EventHandler+0x10>
}
1a002e60:	4770      	bx	lr
1a002e62:	bf00      	nop
1a002e64:	10000004 	.word	0x10000004

1a002e68 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a002e68:	b570      	push	{r4, r5, r6, lr}
1a002e6a:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a002e6c:	4e06      	ldr	r6, [pc, #24]	; (1a002e88 <Chip_I2C_Init+0x20>)
1a002e6e:	00c4      	lsls	r4, r0, #3
1a002e70:	1a22      	subs	r2, r4, r0
1a002e72:	0093      	lsls	r3, r2, #2
1a002e74:	4433      	add	r3, r6
1a002e76:	8898      	ldrh	r0, [r3, #4]
1a002e78:	f7ff ffa6 	bl	1a002dc8 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a002e7c:	1b64      	subs	r4, r4, r5
1a002e7e:	00a3      	lsls	r3, r4, #2
1a002e80:	58f3      	ldr	r3, [r6, r3]
1a002e82:	226c      	movs	r2, #108	; 0x6c
1a002e84:	619a      	str	r2, [r3, #24]
}
1a002e86:	bd70      	pop	{r4, r5, r6, pc}
1a002e88:	10000004 	.word	0x10000004

1a002e8c <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a002e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002e90:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a002e92:	4e0b      	ldr	r6, [pc, #44]	; (1a002ec0 <Chip_I2C_SetClockRate+0x34>)
1a002e94:	00c5      	lsls	r5, r0, #3
1a002e96:	1a2b      	subs	r3, r5, r0
1a002e98:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a002e9c:	eb06 0308 	add.w	r3, r6, r8
1a002ea0:	8898      	ldrh	r0, [r3, #4]
1a002ea2:	f7ff ffab 	bl	1a002dfc <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a002ea6:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a002eaa:	f856 3008 	ldr.w	r3, [r6, r8]
1a002eae:	0842      	lsrs	r2, r0, #1
1a002eb0:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a002eb2:	f856 3008 	ldr.w	r3, [r6, r8]
1a002eb6:	691a      	ldr	r2, [r3, #16]
1a002eb8:	1a80      	subs	r0, r0, r2
1a002eba:	6158      	str	r0, [r3, #20]
}
1a002ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002ec0:	10000004 	.word	0x10000004

1a002ec4 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a002ec4:	4770      	bx	lr
1a002ec6:	Address 0x000000001a002ec6 is out of bounds.


1a002ec8 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a002ec8:	b570      	push	{r4, r5, r6, lr}
1a002eca:	b08a      	sub	sp, #40	; 0x28
1a002ecc:	4605      	mov	r5, r0
1a002ece:	460e      	mov	r6, r1
1a002ed0:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a002ed2:	f24c 3350 	movw	r3, #50000	; 0xc350
1a002ed6:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a002ed8:	2806      	cmp	r0, #6
1a002eda:	d018      	beq.n	1a002f0e <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a002edc:	2300      	movs	r3, #0
1a002ede:	2201      	movs	r2, #1
1a002ee0:	4629      	mov	r1, r5
1a002ee2:	2004      	movs	r0, #4
1a002ee4:	f7ff ff0c 	bl	1a002d00 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a002ee8:	4a4a      	ldr	r2, [pc, #296]	; (1a003014 <Chip_SetupCoreClock+0x14c>)
1a002eea:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a002eec:	f043 0301 	orr.w	r3, r3, #1
1a002ef0:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a002ef2:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a002ef6:	a901      	add	r1, sp, #4
1a002ef8:	4630      	mov	r0, r6
1a002efa:	f7ff fe79 	bl	1a002bf0 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a002efe:	4b46      	ldr	r3, [pc, #280]	; (1a003018 <Chip_SetupCoreClock+0x150>)
1a002f00:	429e      	cmp	r6, r3
1a002f02:	d916      	bls.n	1a002f32 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a002f04:	9b01      	ldr	r3, [sp, #4]
1a002f06:	f013 0f40 	tst.w	r3, #64	; 0x40
1a002f0a:	d003      	beq.n	1a002f14 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a002f0c:	e7fe      	b.n	1a002f0c <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a002f0e:	f7ff fdd1 	bl	1a002ab4 <Chip_Clock_EnableCrystal>
1a002f12:	e7e3      	b.n	1a002edc <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a002f14:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002f18:	d005      	beq.n	1a002f26 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a002f1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002f1e:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a002f20:	2500      	movs	r5, #0
			direct = 1;
1a002f22:	2601      	movs	r6, #1
1a002f24:	e007      	b.n	1a002f36 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a002f26:	9b04      	ldr	r3, [sp, #16]
1a002f28:	3301      	adds	r3, #1
1a002f2a:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a002f2c:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a002f2e:	2600      	movs	r6, #0
1a002f30:	e001      	b.n	1a002f36 <Chip_SetupCoreClock+0x6e>
1a002f32:	2500      	movs	r5, #0
1a002f34:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a002f36:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002f3a:	9b01      	ldr	r3, [sp, #4]
1a002f3c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a002f40:	9a05      	ldr	r2, [sp, #20]
1a002f42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a002f46:	9a03      	ldr	r2, [sp, #12]
1a002f48:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a002f4c:	9a04      	ldr	r2, [sp, #16]
1a002f4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002f52:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002f56:	4a2f      	ldr	r2, [pc, #188]	; (1a003014 <Chip_SetupCoreClock+0x14c>)
1a002f58:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a002f5a:	4b2e      	ldr	r3, [pc, #184]	; (1a003014 <Chip_SetupCoreClock+0x14c>)
1a002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a002f5e:	f013 0f01 	tst.w	r3, #1
1a002f62:	d0fa      	beq.n	1a002f5a <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a002f64:	2300      	movs	r3, #0
1a002f66:	2201      	movs	r2, #1
1a002f68:	2109      	movs	r1, #9
1a002f6a:	2004      	movs	r0, #4
1a002f6c:	f7ff fec8 	bl	1a002d00 <Chip_Clock_SetBaseClock>

	if (direct) {
1a002f70:	b306      	cbz	r6, 1a002fb4 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a002f72:	f24c 3350 	movw	r3, #50000	; 0xc350
1a002f76:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a002f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002f7a:	1e5a      	subs	r2, r3, #1
1a002f7c:	9209      	str	r2, [sp, #36]	; 0x24
1a002f7e:	2b00      	cmp	r3, #0
1a002f80:	d1fa      	bne.n	1a002f78 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a002f82:	9b01      	ldr	r3, [sp, #4]
1a002f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002f88:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a002f8a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002f8e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a002f92:	9a05      	ldr	r2, [sp, #20]
1a002f94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a002f98:	9a03      	ldr	r2, [sp, #12]
1a002f9a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a002f9e:	9a04      	ldr	r2, [sp, #16]
1a002fa0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002fa4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002fa8:	4a1a      	ldr	r2, [pc, #104]	; (1a003014 <Chip_SetupCoreClock+0x14c>)
1a002faa:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a002fac:	2c00      	cmp	r4, #0
1a002fae:	d12e      	bne.n	1a00300e <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a002fb0:	b00a      	add	sp, #40	; 0x28
1a002fb2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a002fb4:	2d00      	cmp	r5, #0
1a002fb6:	d0f9      	beq.n	1a002fac <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a002fb8:	f24c 3350 	movw	r3, #50000	; 0xc350
1a002fbc:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a002fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002fc0:	1e5a      	subs	r2, r3, #1
1a002fc2:	9209      	str	r2, [sp, #36]	; 0x24
1a002fc4:	2b00      	cmp	r3, #0
1a002fc6:	d1fa      	bne.n	1a002fbe <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a002fc8:	9b04      	ldr	r3, [sp, #16]
1a002fca:	1e5a      	subs	r2, r3, #1
1a002fcc:	9204      	str	r2, [sp, #16]
1a002fce:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a002fd2:	9b01      	ldr	r3, [sp, #4]
1a002fd4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a002fd8:	9905      	ldr	r1, [sp, #20]
1a002fda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a002fde:	9903      	ldr	r1, [sp, #12]
1a002fe0:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a002fe4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002fe8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002fec:	4a09      	ldr	r2, [pc, #36]	; (1a003014 <Chip_SetupCoreClock+0x14c>)
1a002fee:	6453      	str	r3, [r2, #68]	; 0x44
1a002ff0:	e7dc      	b.n	1a002fac <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a002ff2:	480a      	ldr	r0, [pc, #40]	; (1a00301c <Chip_SetupCoreClock+0x154>)
1a002ff4:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a002ff8:	78cb      	ldrb	r3, [r1, #3]
1a002ffa:	788a      	ldrb	r2, [r1, #2]
1a002ffc:	7849      	ldrb	r1, [r1, #1]
1a002ffe:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a003002:	f7ff fe7d 	bl	1a002d00 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a003006:	3401      	adds	r4, #1
1a003008:	2c11      	cmp	r4, #17
1a00300a:	d9f2      	bls.n	1a002ff2 <Chip_SetupCoreClock+0x12a>
1a00300c:	e7d0      	b.n	1a002fb0 <Chip_SetupCoreClock+0xe8>
1a00300e:	2400      	movs	r4, #0
1a003010:	e7fa      	b.n	1a003008 <Chip_SetupCoreClock+0x140>
1a003012:	bf00      	nop
1a003014:	40050000 	.word	0x40050000
1a003018:	068e7780 	.word	0x068e7780
1a00301c:	1a0049e8 	.word	0x1a0049e8

1a003020 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003020:	4b03      	ldr	r3, [pc, #12]	; (1a003030 <Chip_SSP_GetClockIndex+0x10>)
1a003022:	4298      	cmp	r0, r3
1a003024:	d001      	beq.n	1a00302a <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a003026:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a003028:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a00302a:	20a5      	movs	r0, #165	; 0xa5
1a00302c:	4770      	bx	lr
1a00302e:	bf00      	nop
1a003030:	400c5000 	.word	0x400c5000

1a003034 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003034:	4b04      	ldr	r3, [pc, #16]	; (1a003048 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a003036:	4298      	cmp	r0, r3
1a003038:	d002      	beq.n	1a003040 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a00303a:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a00303e:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a003040:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a003044:	4770      	bx	lr
1a003046:	bf00      	nop
1a003048:	400c5000 	.word	0x400c5000

1a00304c <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a00304c:	6803      	ldr	r3, [r0, #0]
1a00304e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a003052:	0209      	lsls	r1, r1, #8
1a003054:	b289      	uxth	r1, r1
1a003056:	4319      	orrs	r1, r3
1a003058:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a00305a:	6102      	str	r2, [r0, #16]
}
1a00305c:	4770      	bx	lr

1a00305e <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a00305e:	b570      	push	{r4, r5, r6, lr}
1a003060:	4606      	mov	r6, r0
1a003062:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003064:	f7ff ffe6 	bl	1a003034 <Chip_SSP_GetPeriphClockIndex>
1a003068:	f7ff fec8 	bl	1a002dfc <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a00306c:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a00306e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a003072:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a003074:	e000      	b.n	1a003078 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a003076:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a003078:	42ab      	cmp	r3, r5
1a00307a:	d90b      	bls.n	1a003094 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a00307c:	1c4c      	adds	r4, r1, #1
1a00307e:	fb02 f304 	mul.w	r3, r2, r4
1a003082:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a003086:	429d      	cmp	r5, r3
1a003088:	d2f6      	bcs.n	1a003078 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a00308a:	2cff      	cmp	r4, #255	; 0xff
1a00308c:	d9f3      	bls.n	1a003076 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a00308e:	3202      	adds	r2, #2
				cr0_div = 0;
1a003090:	2100      	movs	r1, #0
1a003092:	e7f1      	b.n	1a003078 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a003094:	4630      	mov	r0, r6
1a003096:	f7ff ffd9 	bl	1a00304c <Chip_SSP_SetClockRate>
}
1a00309a:	bd70      	pop	{r4, r5, r6, pc}

1a00309c <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a00309c:	b510      	push	{r4, lr}
1a00309e:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a0030a0:	f7ff ffbe 	bl	1a003020 <Chip_SSP_GetClockIndex>
1a0030a4:	f7ff fe90 	bl	1a002dc8 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0030a8:	4620      	mov	r0, r4
1a0030aa:	f7ff ffc3 	bl	1a003034 <Chip_SSP_GetPeriphClockIndex>
1a0030ae:	f7ff fe8b 	bl	1a002dc8 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0030b2:	6863      	ldr	r3, [r4, #4]
1a0030b4:	f023 0304 	bic.w	r3, r3, #4
1a0030b8:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0030ba:	6823      	ldr	r3, [r4, #0]
1a0030bc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0030c0:	f043 0307 	orr.w	r3, r3, #7
1a0030c4:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a0030c6:	4902      	ldr	r1, [pc, #8]	; (1a0030d0 <Chip_SSP_Init+0x34>)
1a0030c8:	4620      	mov	r0, r4
1a0030ca:	f7ff ffc8 	bl	1a00305e <Chip_SSP_SetBitRate>
}
1a0030ce:	bd10      	pop	{r4, pc}
1a0030d0:	000186a0 	.word	0x000186a0

1a0030d4 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a0030d4:	b508      	push	{r3, lr}
   extern void * const g_pfnVectors[];
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a0030d6:	4a0b      	ldr	r2, [pc, #44]	; (1a003104 <SystemInit+0x30>)
1a0030d8:	4b0b      	ldr	r3, [pc, #44]	; (1a003108 <SystemInit+0x34>)
1a0030da:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a0030dc:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a0030e0:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a0030e2:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a0030e6:	2b20      	cmp	r3, #32
1a0030e8:	d004      	beq.n	1a0030f4 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a0030ea:	f7ff faa5 	bl	1a002638 <Board_SystemInit>
   Board_Init();
1a0030ee:	f7ff fa2b 	bl	1a002548 <Board_Init>
}
1a0030f2:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a0030f4:	4a04      	ldr	r2, [pc, #16]	; (1a003108 <SystemInit+0x34>)
1a0030f6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a0030fa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0030fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a003102:	e7f2      	b.n	1a0030ea <SystemInit+0x16>
1a003104:	1a000000 	.word	0x1a000000
1a003108:	e000ed00 	.word	0xe000ed00

1a00310c <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a00310c:	4b04      	ldr	r3, [pc, #16]	; (1a003120 <cyclesCounterInit+0x14>)
1a00310e:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a003110:	4a04      	ldr	r2, [pc, #16]	; (1a003124 <cyclesCounterInit+0x18>)
1a003112:	6813      	ldr	r3, [r2, #0]
1a003114:	f043 0301 	orr.w	r3, r3, #1
1a003118:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a00311a:	2001      	movs	r0, #1
1a00311c:	4770      	bx	lr
1a00311e:	bf00      	nop
1a003120:	1000003c 	.word	0x1000003c
1a003124:	e0001000 	.word	0xe0001000

1a003128 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a003128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00312c:	4680      	mov	r8, r0
1a00312e:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a003130:	4c19      	ldr	r4, [pc, #100]	; (1a003198 <uartInit+0x70>)
1a003132:	0045      	lsls	r5, r0, #1
1a003134:	182a      	adds	r2, r5, r0
1a003136:	0093      	lsls	r3, r2, #2
1a003138:	18e6      	adds	r6, r4, r3
1a00313a:	58e7      	ldr	r7, [r4, r3]
1a00313c:	4638      	mov	r0, r7
1a00313e:	f7ff fa97 	bl	1a002670 <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a003142:	4649      	mov	r1, r9
1a003144:	4638      	mov	r0, r7
1a003146:	f7ff fabd 	bl	1a0026c4 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a00314a:	2307      	movs	r3, #7
1a00314c:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a00314e:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a003150:	2301      	movs	r3, #1
1a003152:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a003154:	7930      	ldrb	r0, [r6, #4]
1a003156:	7973      	ldrb	r3, [r6, #5]
1a003158:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00315a:	f042 0218 	orr.w	r2, r2, #24
1a00315e:	490f      	ldr	r1, [pc, #60]	; (1a00319c <uartInit+0x74>)
1a003160:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a003164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a003168:	79f0      	ldrb	r0, [r6, #7]
1a00316a:	7a33      	ldrb	r3, [r6, #8]
1a00316c:	7a72      	ldrb	r2, [r6, #9]
1a00316e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a003172:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a003176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a00317a:	f1b8 0f01 	cmp.w	r8, #1
1a00317e:	d001      	beq.n	1a003184 <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a003180:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a003184:	4a06      	ldr	r2, [pc, #24]	; (1a0031a0 <uartInit+0x78>)
1a003186:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a003188:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a00318c:	64d3      	str	r3, [r2, #76]	; 0x4c
1a00318e:	221a      	movs	r2, #26
1a003190:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a003194:	e7f4      	b.n	1a003180 <uartInit+0x58>
1a003196:	bf00      	nop
1a003198:	1a004a30 	.word	0x1a004a30
1a00319c:	40086000 	.word	0x40086000
1a0031a0:	40081000 	.word	0x40081000

1a0031a4 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a0031a4:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a0031a6:	4d0b      	ldr	r5, [pc, #44]	; (1a0031d4 <gpioObtainPinInit+0x30>)
1a0031a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a0031ac:	182c      	adds	r4, r5, r0
1a0031ae:	5628      	ldrsb	r0, [r5, r0]
1a0031b0:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a0031b2:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a0031b6:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a0031b8:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a0031bc:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a0031be:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a0031c2:	9b02      	ldr	r3, [sp, #8]
1a0031c4:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a0031c6:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a0031ca:	9b03      	ldr	r3, [sp, #12]
1a0031cc:	701a      	strb	r2, [r3, #0]
}
1a0031ce:	bc30      	pop	{r4, r5}
1a0031d0:	4770      	bx	lr
1a0031d2:	bf00      	nop
1a0031d4:	1a004a78 	.word	0x1a004a78

1a0031d8 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a0031d8:	f110 0f02 	cmn.w	r0, #2
1a0031dc:	f000 80c7 	beq.w	1a00336e <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a0031e0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0031e4:	f000 80c5 	beq.w	1a003372 <gpioInit+0x19a>
{
1a0031e8:	b570      	push	{r4, r5, r6, lr}
1a0031ea:	b084      	sub	sp, #16
1a0031ec:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0031ee:	2300      	movs	r3, #0
1a0031f0:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0031f4:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0031f8:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0031fc:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003200:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003204:	f10d 030b 	add.w	r3, sp, #11
1a003208:	9301      	str	r3, [sp, #4]
1a00320a:	ab03      	add	r3, sp, #12
1a00320c:	9300      	str	r3, [sp, #0]
1a00320e:	f10d 030d 	add.w	r3, sp, #13
1a003212:	f10d 020e 	add.w	r2, sp, #14
1a003216:	f10d 010f 	add.w	r1, sp, #15
1a00321a:	f7ff ffc3 	bl	1a0031a4 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a00321e:	2c05      	cmp	r4, #5
1a003220:	f200 80a9 	bhi.w	1a003376 <gpioInit+0x19e>
1a003224:	e8df f004 	tbb	[pc, r4]
1a003228:	45278109 	.word	0x45278109
1a00322c:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a00322e:	4853      	ldr	r0, [pc, #332]	; (1a00337c <gpioInit+0x1a4>)
1a003230:	f7ff fe48 	bl	1a002ec4 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a003234:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a003236:	b004      	add	sp, #16
1a003238:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a00323a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00323e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003242:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003246:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00324a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00324e:	494c      	ldr	r1, [pc, #304]	; (1a003380 <gpioInit+0x1a8>)
1a003250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003254:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003258:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00325c:	2001      	movs	r0, #1
1a00325e:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a003262:	4c46      	ldr	r4, [pc, #280]	; (1a00337c <gpioInit+0x1a4>)
1a003264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003268:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00326c:	ea22 0201 	bic.w	r2, r2, r1
1a003270:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003274:	e7df      	b.n	1a003236 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a003276:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00327a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00327e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003282:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a003286:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00328a:	493d      	ldr	r1, [pc, #244]	; (1a003380 <gpioInit+0x1a8>)
1a00328c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003290:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003294:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003298:	2001      	movs	r0, #1
1a00329a:	fa00 f102 	lsl.w	r1, r0, r2
1a00329e:	4c37      	ldr	r4, [pc, #220]	; (1a00337c <gpioInit+0x1a4>)
1a0032a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0032a4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0032a8:	ea22 0201 	bic.w	r2, r2, r1
1a0032ac:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0032b0:	e7c1      	b.n	1a003236 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0032b2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0032b6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0032ba:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0032be:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a0032c2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0032c6:	492e      	ldr	r1, [pc, #184]	; (1a003380 <gpioInit+0x1a8>)
1a0032c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0032cc:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0032d0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0032d4:	2001      	movs	r0, #1
1a0032d6:	fa00 f102 	lsl.w	r1, r0, r2
1a0032da:	4c28      	ldr	r4, [pc, #160]	; (1a00337c <gpioInit+0x1a4>)
1a0032dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0032e0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0032e4:	ea22 0201 	bic.w	r2, r2, r1
1a0032e8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0032ec:	e7a3      	b.n	1a003236 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0032ee:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0032f2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0032f6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0032fa:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a0032fe:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003302:	491f      	ldr	r1, [pc, #124]	; (1a003380 <gpioInit+0x1a8>)
1a003304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003308:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00330c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003310:	2001      	movs	r0, #1
1a003312:	fa00 f102 	lsl.w	r1, r0, r2
1a003316:	4c19      	ldr	r4, [pc, #100]	; (1a00337c <gpioInit+0x1a4>)
1a003318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00331c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003320:	ea22 0201 	bic.w	r2, r2, r1
1a003324:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003328:	e785      	b.n	1a003236 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00332a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00332e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003332:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003336:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00333a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00333e:	4910      	ldr	r1, [pc, #64]	; (1a003380 <gpioInit+0x1a8>)
1a003340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a003344:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a003348:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00334c:	2001      	movs	r0, #1
1a00334e:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a003352:	4b0a      	ldr	r3, [pc, #40]	; (1a00337c <gpioInit+0x1a4>)
1a003354:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a003358:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a00335c:	4331      	orrs	r1, r6
1a00335e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a003362:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a003364:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a003368:	2100      	movs	r1, #0
1a00336a:	5499      	strb	r1, [r3, r2]
1a00336c:	e763      	b.n	1a003236 <gpioInit+0x5e>
	  return FALSE;
1a00336e:	2000      	movs	r0, #0
1a003370:	4770      	bx	lr
	  return FALSE;
1a003372:	2000      	movs	r0, #0
}
1a003374:	4770      	bx	lr
      ret_val = 0;
1a003376:	2000      	movs	r0, #0
1a003378:	e75d      	b.n	1a003236 <gpioInit+0x5e>
1a00337a:	bf00      	nop
1a00337c:	400f4000 	.word	0x400f4000
1a003380:	40086000 	.word	0x40086000

1a003384 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a003384:	f110 0f02 	cmn.w	r0, #2
1a003388:	d02d      	beq.n	1a0033e6 <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a00338a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00338e:	d02c      	beq.n	1a0033ea <gpioWrite+0x66>
{
1a003390:	b510      	push	{r4, lr}
1a003392:	b084      	sub	sp, #16
1a003394:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a003396:	2300      	movs	r3, #0
1a003398:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00339c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0033a0:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0033a4:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0033a8:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0033ac:	f10d 030b 	add.w	r3, sp, #11
1a0033b0:	9301      	str	r3, [sp, #4]
1a0033b2:	ab03      	add	r3, sp, #12
1a0033b4:	9300      	str	r3, [sp, #0]
1a0033b6:	f10d 030d 	add.w	r3, sp, #13
1a0033ba:	f10d 020e 	add.w	r2, sp, #14
1a0033be:	f10d 010f 	add.w	r1, sp, #15
1a0033c2:	f7ff feef 	bl	1a0031a4 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a0033c6:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0033ca:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a0033ce:	1c21      	adds	r1, r4, #0
1a0033d0:	bf18      	it	ne
1a0033d2:	2101      	movne	r1, #1
1a0033d4:	015b      	lsls	r3, r3, #5
1a0033d6:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0033da:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0033de:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a0033e0:	2001      	movs	r0, #1
}
1a0033e2:	b004      	add	sp, #16
1a0033e4:	bd10      	pop	{r4, pc}
	  return FALSE;
1a0033e6:	2000      	movs	r0, #0
1a0033e8:	4770      	bx	lr
	  return FALSE;
1a0033ea:	2000      	movs	r0, #0
}
1a0033ec:	4770      	bx	lr

1a0033ee <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a0033ee:	f110 0f02 	cmn.w	r0, #2
1a0033f2:	d02c      	beq.n	1a00344e <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a0033f4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0033f8:	d02b      	beq.n	1a003452 <gpioRead+0x64>
{
1a0033fa:	b500      	push	{lr}
1a0033fc:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a0033fe:	2300      	movs	r3, #0
1a003400:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003404:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003408:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00340c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003410:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003414:	f10d 030b 	add.w	r3, sp, #11
1a003418:	9301      	str	r3, [sp, #4]
1a00341a:	ab03      	add	r3, sp, #12
1a00341c:	9300      	str	r3, [sp, #0]
1a00341e:	f10d 030d 	add.w	r3, sp, #13
1a003422:	f10d 020e 	add.w	r2, sp, #14
1a003426:	f10d 010f 	add.w	r1, sp, #15
1a00342a:	f7ff febb 	bl	1a0031a4 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a00342e:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a003432:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a003436:	015b      	lsls	r3, r3, #5
1a003438:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a00343c:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a003440:	5c98      	ldrb	r0, [r3, r2]
1a003442:	3000      	adds	r0, #0
1a003444:	bf18      	it	ne
1a003446:	2001      	movne	r0, #1

   return ret_val;
}
1a003448:	b005      	add	sp, #20
1a00344a:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a00344e:	2001      	movs	r0, #1
1a003450:	4770      	bx	lr
      return FALSE;
1a003452:	2000      	movs	r0, #0
}
1a003454:	4770      	bx	lr
1a003456:	Address 0x000000001a003456 is out of bounds.


1a003458 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a003458:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a00345a:	4b04      	ldr	r3, [pc, #16]	; (1a00346c <USB0_IRQHandler+0x14>)
1a00345c:	681b      	ldr	r3, [r3, #0]
1a00345e:	681b      	ldr	r3, [r3, #0]
1a003460:	68db      	ldr	r3, [r3, #12]
1a003462:	4a03      	ldr	r2, [pc, #12]	; (1a003470 <USB0_IRQHandler+0x18>)
1a003464:	6810      	ldr	r0, [r2, #0]
1a003466:	4798      	blx	r3
}
1a003468:	bd08      	pop	{r3, pc}
1a00346a:	bf00      	nop
1a00346c:	10002294 	.word	0x10002294
1a003470:	10002230 	.word	0x10002230

1a003474 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a003474:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a003476:	f7ff fa17 	bl	1a0028a8 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a00347a:	4b18      	ldr	r3, [pc, #96]	; (1a0034dc <boardInit+0x68>)
1a00347c:	6818      	ldr	r0, [r3, #0]
1a00347e:	f7ff fe45 	bl	1a00310c <cyclesCounterInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a003482:	2105      	movs	r1, #5
1a003484:	2000      	movs	r0, #0
1a003486:	f7ff fea7 	bl	1a0031d8 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a00348a:	2100      	movs	r1, #0
1a00348c:	2024      	movs	r0, #36	; 0x24
1a00348e:	f7ff fea3 	bl	1a0031d8 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a003492:	2100      	movs	r1, #0
1a003494:	2025      	movs	r0, #37	; 0x25
1a003496:	f7ff fe9f 	bl	1a0031d8 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a00349a:	2100      	movs	r1, #0
1a00349c:	2026      	movs	r0, #38	; 0x26
1a00349e:	f7ff fe9b 	bl	1a0031d8 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a0034a2:	2100      	movs	r1, #0
1a0034a4:	2027      	movs	r0, #39	; 0x27
1a0034a6:	f7ff fe97 	bl	1a0031d8 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a0034aa:	2101      	movs	r1, #1
1a0034ac:	2028      	movs	r0, #40	; 0x28
1a0034ae:	f7ff fe93 	bl	1a0031d8 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a0034b2:	2101      	movs	r1, #1
1a0034b4:	2029      	movs	r0, #41	; 0x29
1a0034b6:	f7ff fe8f 	bl	1a0031d8 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a0034ba:	2101      	movs	r1, #1
1a0034bc:	202a      	movs	r0, #42	; 0x2a
1a0034be:	f7ff fe8b 	bl	1a0031d8 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a0034c2:	2101      	movs	r1, #1
1a0034c4:	202b      	movs	r0, #43	; 0x2b
1a0034c6:	f7ff fe87 	bl	1a0031d8 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a0034ca:	2101      	movs	r1, #1
1a0034cc:	202c      	movs	r0, #44	; 0x2c
1a0034ce:	f7ff fe83 	bl	1a0031d8 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a0034d2:	2101      	movs	r1, #1
1a0034d4:	202d      	movs	r0, #45	; 0x2d
1a0034d6:	f7ff fe7f 	bl	1a0031d8 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a0034da:	bd08      	pop	{r3, pc}
1a0034dc:	10002290 	.word	0x10002290

1a0034e0 <printInitUart>:
{
   *printer = uart;
}

void printInitUart( print_t* printer, uartMap_t uart, uint32_t baudRate )
{
1a0034e0:	b508      	push	{r3, lr}
1a0034e2:	460b      	mov	r3, r1
   *printer = uart;
1a0034e4:	7001      	strb	r1, [r0, #0]
   uartInit( uart, baudRate );
1a0034e6:	4611      	mov	r1, r2
1a0034e8:	4618      	mov	r0, r3
1a0034ea:	f7ff fe1d 	bl	1a003128 <uartInit>
}
1a0034ee:	bd08      	pop	{r3, pc}

1a0034f0 <__aeabi_uldivmod>:
1a0034f0:	b953      	cbnz	r3, 1a003508 <__aeabi_uldivmod+0x18>
1a0034f2:	b94a      	cbnz	r2, 1a003508 <__aeabi_uldivmod+0x18>
1a0034f4:	2900      	cmp	r1, #0
1a0034f6:	bf08      	it	eq
1a0034f8:	2800      	cmpeq	r0, #0
1a0034fa:	bf1c      	itt	ne
1a0034fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a003500:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a003504:	f000 b974 	b.w	1a0037f0 <__aeabi_idiv0>
1a003508:	f1ad 0c08 	sub.w	ip, sp, #8
1a00350c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a003510:	f000 f806 	bl	1a003520 <__udivmoddi4>
1a003514:	f8dd e004 	ldr.w	lr, [sp, #4]
1a003518:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00351c:	b004      	add	sp, #16
1a00351e:	4770      	bx	lr

1a003520 <__udivmoddi4>:
1a003520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a003524:	9e08      	ldr	r6, [sp, #32]
1a003526:	4604      	mov	r4, r0
1a003528:	4688      	mov	r8, r1
1a00352a:	2b00      	cmp	r3, #0
1a00352c:	f040 8085 	bne.w	1a00363a <__udivmoddi4+0x11a>
1a003530:	428a      	cmp	r2, r1
1a003532:	4615      	mov	r5, r2
1a003534:	d948      	bls.n	1a0035c8 <__udivmoddi4+0xa8>
1a003536:	fab2 f282 	clz	r2, r2
1a00353a:	b14a      	cbz	r2, 1a003550 <__udivmoddi4+0x30>
1a00353c:	f1c2 0720 	rsb	r7, r2, #32
1a003540:	fa01 f302 	lsl.w	r3, r1, r2
1a003544:	fa20 f707 	lsr.w	r7, r0, r7
1a003548:	4095      	lsls	r5, r2
1a00354a:	ea47 0803 	orr.w	r8, r7, r3
1a00354e:	4094      	lsls	r4, r2
1a003550:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003554:	0c23      	lsrs	r3, r4, #16
1a003556:	fbb8 f7fe 	udiv	r7, r8, lr
1a00355a:	fa1f fc85 	uxth.w	ip, r5
1a00355e:	fb0e 8817 	mls	r8, lr, r7, r8
1a003562:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a003566:	fb07 f10c 	mul.w	r1, r7, ip
1a00356a:	4299      	cmp	r1, r3
1a00356c:	d909      	bls.n	1a003582 <__udivmoddi4+0x62>
1a00356e:	18eb      	adds	r3, r5, r3
1a003570:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a003574:	f080 80e3 	bcs.w	1a00373e <__udivmoddi4+0x21e>
1a003578:	4299      	cmp	r1, r3
1a00357a:	f240 80e0 	bls.w	1a00373e <__udivmoddi4+0x21e>
1a00357e:	3f02      	subs	r7, #2
1a003580:	442b      	add	r3, r5
1a003582:	1a5b      	subs	r3, r3, r1
1a003584:	b2a4      	uxth	r4, r4
1a003586:	fbb3 f0fe 	udiv	r0, r3, lr
1a00358a:	fb0e 3310 	mls	r3, lr, r0, r3
1a00358e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a003592:	fb00 fc0c 	mul.w	ip, r0, ip
1a003596:	45a4      	cmp	ip, r4
1a003598:	d909      	bls.n	1a0035ae <__udivmoddi4+0x8e>
1a00359a:	192c      	adds	r4, r5, r4
1a00359c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0035a0:	f080 80cb 	bcs.w	1a00373a <__udivmoddi4+0x21a>
1a0035a4:	45a4      	cmp	ip, r4
1a0035a6:	f240 80c8 	bls.w	1a00373a <__udivmoddi4+0x21a>
1a0035aa:	3802      	subs	r0, #2
1a0035ac:	442c      	add	r4, r5
1a0035ae:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a0035b2:	eba4 040c 	sub.w	r4, r4, ip
1a0035b6:	2700      	movs	r7, #0
1a0035b8:	b11e      	cbz	r6, 1a0035c2 <__udivmoddi4+0xa2>
1a0035ba:	40d4      	lsrs	r4, r2
1a0035bc:	2300      	movs	r3, #0
1a0035be:	e9c6 4300 	strd	r4, r3, [r6]
1a0035c2:	4639      	mov	r1, r7
1a0035c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0035c8:	2a00      	cmp	r2, #0
1a0035ca:	d053      	beq.n	1a003674 <__udivmoddi4+0x154>
1a0035cc:	fab2 f282 	clz	r2, r2
1a0035d0:	2a00      	cmp	r2, #0
1a0035d2:	f040 80b6 	bne.w	1a003742 <__udivmoddi4+0x222>
1a0035d6:	1b49      	subs	r1, r1, r5
1a0035d8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0035dc:	fa1f f885 	uxth.w	r8, r5
1a0035e0:	2701      	movs	r7, #1
1a0035e2:	fbb1 fcfe 	udiv	ip, r1, lr
1a0035e6:	0c23      	lsrs	r3, r4, #16
1a0035e8:	fb0e 111c 	mls	r1, lr, ip, r1
1a0035ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0035f0:	fb08 f10c 	mul.w	r1, r8, ip
1a0035f4:	4299      	cmp	r1, r3
1a0035f6:	d907      	bls.n	1a003608 <__udivmoddi4+0xe8>
1a0035f8:	18eb      	adds	r3, r5, r3
1a0035fa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a0035fe:	d202      	bcs.n	1a003606 <__udivmoddi4+0xe6>
1a003600:	4299      	cmp	r1, r3
1a003602:	f200 80ec 	bhi.w	1a0037de <__udivmoddi4+0x2be>
1a003606:	4684      	mov	ip, r0
1a003608:	1a59      	subs	r1, r3, r1
1a00360a:	b2a3      	uxth	r3, r4
1a00360c:	fbb1 f0fe 	udiv	r0, r1, lr
1a003610:	fb0e 1410 	mls	r4, lr, r0, r1
1a003614:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a003618:	fb08 f800 	mul.w	r8, r8, r0
1a00361c:	45a0      	cmp	r8, r4
1a00361e:	d907      	bls.n	1a003630 <__udivmoddi4+0x110>
1a003620:	192c      	adds	r4, r5, r4
1a003622:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003626:	d202      	bcs.n	1a00362e <__udivmoddi4+0x10e>
1a003628:	45a0      	cmp	r8, r4
1a00362a:	f200 80dc 	bhi.w	1a0037e6 <__udivmoddi4+0x2c6>
1a00362e:	4618      	mov	r0, r3
1a003630:	eba4 0408 	sub.w	r4, r4, r8
1a003634:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a003638:	e7be      	b.n	1a0035b8 <__udivmoddi4+0x98>
1a00363a:	428b      	cmp	r3, r1
1a00363c:	d908      	bls.n	1a003650 <__udivmoddi4+0x130>
1a00363e:	2e00      	cmp	r6, #0
1a003640:	d078      	beq.n	1a003734 <__udivmoddi4+0x214>
1a003642:	2700      	movs	r7, #0
1a003644:	e9c6 0100 	strd	r0, r1, [r6]
1a003648:	4638      	mov	r0, r7
1a00364a:	4639      	mov	r1, r7
1a00364c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003650:	fab3 f783 	clz	r7, r3
1a003654:	b97f      	cbnz	r7, 1a003676 <__udivmoddi4+0x156>
1a003656:	428b      	cmp	r3, r1
1a003658:	d302      	bcc.n	1a003660 <__udivmoddi4+0x140>
1a00365a:	4282      	cmp	r2, r0
1a00365c:	f200 80bd 	bhi.w	1a0037da <__udivmoddi4+0x2ba>
1a003660:	1a84      	subs	r4, r0, r2
1a003662:	eb61 0303 	sbc.w	r3, r1, r3
1a003666:	2001      	movs	r0, #1
1a003668:	4698      	mov	r8, r3
1a00366a:	2e00      	cmp	r6, #0
1a00366c:	d0a9      	beq.n	1a0035c2 <__udivmoddi4+0xa2>
1a00366e:	e9c6 4800 	strd	r4, r8, [r6]
1a003672:	e7a6      	b.n	1a0035c2 <__udivmoddi4+0xa2>
1a003674:	deff      	udf	#255	; 0xff
1a003676:	f1c7 0520 	rsb	r5, r7, #32
1a00367a:	40bb      	lsls	r3, r7
1a00367c:	fa22 fc05 	lsr.w	ip, r2, r5
1a003680:	ea4c 0c03 	orr.w	ip, ip, r3
1a003684:	fa01 f407 	lsl.w	r4, r1, r7
1a003688:	fa20 f805 	lsr.w	r8, r0, r5
1a00368c:	fa21 f305 	lsr.w	r3, r1, r5
1a003690:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a003694:	ea48 0404 	orr.w	r4, r8, r4
1a003698:	fbb3 f9fe 	udiv	r9, r3, lr
1a00369c:	0c21      	lsrs	r1, r4, #16
1a00369e:	fb0e 3319 	mls	r3, lr, r9, r3
1a0036a2:	fa1f f88c 	uxth.w	r8, ip
1a0036a6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a0036aa:	fb09 fa08 	mul.w	sl, r9, r8
1a0036ae:	459a      	cmp	sl, r3
1a0036b0:	fa02 f207 	lsl.w	r2, r2, r7
1a0036b4:	fa00 f107 	lsl.w	r1, r0, r7
1a0036b8:	d90b      	bls.n	1a0036d2 <__udivmoddi4+0x1b2>
1a0036ba:	eb1c 0303 	adds.w	r3, ip, r3
1a0036be:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a0036c2:	f080 8088 	bcs.w	1a0037d6 <__udivmoddi4+0x2b6>
1a0036c6:	459a      	cmp	sl, r3
1a0036c8:	f240 8085 	bls.w	1a0037d6 <__udivmoddi4+0x2b6>
1a0036cc:	f1a9 0902 	sub.w	r9, r9, #2
1a0036d0:	4463      	add	r3, ip
1a0036d2:	eba3 030a 	sub.w	r3, r3, sl
1a0036d6:	b2a4      	uxth	r4, r4
1a0036d8:	fbb3 f0fe 	udiv	r0, r3, lr
1a0036dc:	fb0e 3310 	mls	r3, lr, r0, r3
1a0036e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0036e4:	fb00 f808 	mul.w	r8, r0, r8
1a0036e8:	45a0      	cmp	r8, r4
1a0036ea:	d908      	bls.n	1a0036fe <__udivmoddi4+0x1de>
1a0036ec:	eb1c 0404 	adds.w	r4, ip, r4
1a0036f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0036f4:	d26b      	bcs.n	1a0037ce <__udivmoddi4+0x2ae>
1a0036f6:	45a0      	cmp	r8, r4
1a0036f8:	d969      	bls.n	1a0037ce <__udivmoddi4+0x2ae>
1a0036fa:	3802      	subs	r0, #2
1a0036fc:	4464      	add	r4, ip
1a0036fe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a003702:	eba4 0408 	sub.w	r4, r4, r8
1a003706:	fba0 8902 	umull	r8, r9, r0, r2
1a00370a:	454c      	cmp	r4, r9
1a00370c:	46c6      	mov	lr, r8
1a00370e:	464b      	mov	r3, r9
1a003710:	d354      	bcc.n	1a0037bc <__udivmoddi4+0x29c>
1a003712:	d051      	beq.n	1a0037b8 <__udivmoddi4+0x298>
1a003714:	2e00      	cmp	r6, #0
1a003716:	d069      	beq.n	1a0037ec <__udivmoddi4+0x2cc>
1a003718:	ebb1 020e 	subs.w	r2, r1, lr
1a00371c:	eb64 0403 	sbc.w	r4, r4, r3
1a003720:	fa04 f505 	lsl.w	r5, r4, r5
1a003724:	fa22 f307 	lsr.w	r3, r2, r7
1a003728:	40fc      	lsrs	r4, r7
1a00372a:	431d      	orrs	r5, r3
1a00372c:	e9c6 5400 	strd	r5, r4, [r6]
1a003730:	2700      	movs	r7, #0
1a003732:	e746      	b.n	1a0035c2 <__udivmoddi4+0xa2>
1a003734:	4637      	mov	r7, r6
1a003736:	4630      	mov	r0, r6
1a003738:	e743      	b.n	1a0035c2 <__udivmoddi4+0xa2>
1a00373a:	4618      	mov	r0, r3
1a00373c:	e737      	b.n	1a0035ae <__udivmoddi4+0x8e>
1a00373e:	4607      	mov	r7, r0
1a003740:	e71f      	b.n	1a003582 <__udivmoddi4+0x62>
1a003742:	f1c2 0320 	rsb	r3, r2, #32
1a003746:	fa20 f703 	lsr.w	r7, r0, r3
1a00374a:	4095      	lsls	r5, r2
1a00374c:	fa01 f002 	lsl.w	r0, r1, r2
1a003750:	fa21 f303 	lsr.w	r3, r1, r3
1a003754:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003758:	4338      	orrs	r0, r7
1a00375a:	0c01      	lsrs	r1, r0, #16
1a00375c:	fbb3 f7fe 	udiv	r7, r3, lr
1a003760:	fa1f f885 	uxth.w	r8, r5
1a003764:	fb0e 3317 	mls	r3, lr, r7, r3
1a003768:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a00376c:	fb07 f308 	mul.w	r3, r7, r8
1a003770:	428b      	cmp	r3, r1
1a003772:	fa04 f402 	lsl.w	r4, r4, r2
1a003776:	d907      	bls.n	1a003788 <__udivmoddi4+0x268>
1a003778:	1869      	adds	r1, r5, r1
1a00377a:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a00377e:	d228      	bcs.n	1a0037d2 <__udivmoddi4+0x2b2>
1a003780:	428b      	cmp	r3, r1
1a003782:	d926      	bls.n	1a0037d2 <__udivmoddi4+0x2b2>
1a003784:	3f02      	subs	r7, #2
1a003786:	4429      	add	r1, r5
1a003788:	1acb      	subs	r3, r1, r3
1a00378a:	b281      	uxth	r1, r0
1a00378c:	fbb3 f0fe 	udiv	r0, r3, lr
1a003790:	fb0e 3310 	mls	r3, lr, r0, r3
1a003794:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a003798:	fb00 f308 	mul.w	r3, r0, r8
1a00379c:	428b      	cmp	r3, r1
1a00379e:	d907      	bls.n	1a0037b0 <__udivmoddi4+0x290>
1a0037a0:	1869      	adds	r1, r5, r1
1a0037a2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a0037a6:	d210      	bcs.n	1a0037ca <__udivmoddi4+0x2aa>
1a0037a8:	428b      	cmp	r3, r1
1a0037aa:	d90e      	bls.n	1a0037ca <__udivmoddi4+0x2aa>
1a0037ac:	3802      	subs	r0, #2
1a0037ae:	4429      	add	r1, r5
1a0037b0:	1ac9      	subs	r1, r1, r3
1a0037b2:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a0037b6:	e714      	b.n	1a0035e2 <__udivmoddi4+0xc2>
1a0037b8:	4541      	cmp	r1, r8
1a0037ba:	d2ab      	bcs.n	1a003714 <__udivmoddi4+0x1f4>
1a0037bc:	ebb8 0e02 	subs.w	lr, r8, r2
1a0037c0:	eb69 020c 	sbc.w	r2, r9, ip
1a0037c4:	3801      	subs	r0, #1
1a0037c6:	4613      	mov	r3, r2
1a0037c8:	e7a4      	b.n	1a003714 <__udivmoddi4+0x1f4>
1a0037ca:	4660      	mov	r0, ip
1a0037cc:	e7f0      	b.n	1a0037b0 <__udivmoddi4+0x290>
1a0037ce:	4618      	mov	r0, r3
1a0037d0:	e795      	b.n	1a0036fe <__udivmoddi4+0x1de>
1a0037d2:	4667      	mov	r7, ip
1a0037d4:	e7d8      	b.n	1a003788 <__udivmoddi4+0x268>
1a0037d6:	4681      	mov	r9, r0
1a0037d8:	e77b      	b.n	1a0036d2 <__udivmoddi4+0x1b2>
1a0037da:	4638      	mov	r0, r7
1a0037dc:	e745      	b.n	1a00366a <__udivmoddi4+0x14a>
1a0037de:	f1ac 0c02 	sub.w	ip, ip, #2
1a0037e2:	442b      	add	r3, r5
1a0037e4:	e710      	b.n	1a003608 <__udivmoddi4+0xe8>
1a0037e6:	3802      	subs	r0, #2
1a0037e8:	442c      	add	r4, r5
1a0037ea:	e721      	b.n	1a003630 <__udivmoddi4+0x110>
1a0037ec:	4637      	mov	r7, r6
1a0037ee:	e6e8      	b.n	1a0035c2 <__udivmoddi4+0xa2>

1a0037f0 <__aeabi_idiv0>:
1a0037f0:	4770      	bx	lr
1a0037f2:	bf00      	nop

1a0037f4 <__sflush_r>:
1a0037f4:	898a      	ldrh	r2, [r1, #12]
1a0037f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0037fa:	4605      	mov	r5, r0
1a0037fc:	0710      	lsls	r0, r2, #28
1a0037fe:	460c      	mov	r4, r1
1a003800:	d458      	bmi.n	1a0038b4 <__sflush_r+0xc0>
1a003802:	684b      	ldr	r3, [r1, #4]
1a003804:	2b00      	cmp	r3, #0
1a003806:	dc05      	bgt.n	1a003814 <__sflush_r+0x20>
1a003808:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a00380a:	2b00      	cmp	r3, #0
1a00380c:	dc02      	bgt.n	1a003814 <__sflush_r+0x20>
1a00380e:	2000      	movs	r0, #0
1a003810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003814:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a003816:	2e00      	cmp	r6, #0
1a003818:	d0f9      	beq.n	1a00380e <__sflush_r+0x1a>
1a00381a:	2300      	movs	r3, #0
1a00381c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a003820:	682f      	ldr	r7, [r5, #0]
1a003822:	602b      	str	r3, [r5, #0]
1a003824:	d032      	beq.n	1a00388c <__sflush_r+0x98>
1a003826:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a003828:	89a3      	ldrh	r3, [r4, #12]
1a00382a:	075a      	lsls	r2, r3, #29
1a00382c:	d505      	bpl.n	1a00383a <__sflush_r+0x46>
1a00382e:	6863      	ldr	r3, [r4, #4]
1a003830:	1ac0      	subs	r0, r0, r3
1a003832:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a003834:	b10b      	cbz	r3, 1a00383a <__sflush_r+0x46>
1a003836:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a003838:	1ac0      	subs	r0, r0, r3
1a00383a:	2300      	movs	r3, #0
1a00383c:	4602      	mov	r2, r0
1a00383e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a003840:	6a21      	ldr	r1, [r4, #32]
1a003842:	4628      	mov	r0, r5
1a003844:	47b0      	blx	r6
1a003846:	1c43      	adds	r3, r0, #1
1a003848:	89a3      	ldrh	r3, [r4, #12]
1a00384a:	d106      	bne.n	1a00385a <__sflush_r+0x66>
1a00384c:	6829      	ldr	r1, [r5, #0]
1a00384e:	291d      	cmp	r1, #29
1a003850:	d849      	bhi.n	1a0038e6 <__sflush_r+0xf2>
1a003852:	4a2a      	ldr	r2, [pc, #168]	; (1a0038fc <__sflush_r+0x108>)
1a003854:	40ca      	lsrs	r2, r1
1a003856:	07d6      	lsls	r6, r2, #31
1a003858:	d545      	bpl.n	1a0038e6 <__sflush_r+0xf2>
1a00385a:	2200      	movs	r2, #0
1a00385c:	6062      	str	r2, [r4, #4]
1a00385e:	04d9      	lsls	r1, r3, #19
1a003860:	6922      	ldr	r2, [r4, #16]
1a003862:	6022      	str	r2, [r4, #0]
1a003864:	d504      	bpl.n	1a003870 <__sflush_r+0x7c>
1a003866:	1c42      	adds	r2, r0, #1
1a003868:	d101      	bne.n	1a00386e <__sflush_r+0x7a>
1a00386a:	682b      	ldr	r3, [r5, #0]
1a00386c:	b903      	cbnz	r3, 1a003870 <__sflush_r+0x7c>
1a00386e:	6560      	str	r0, [r4, #84]	; 0x54
1a003870:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a003872:	602f      	str	r7, [r5, #0]
1a003874:	2900      	cmp	r1, #0
1a003876:	d0ca      	beq.n	1a00380e <__sflush_r+0x1a>
1a003878:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a00387c:	4299      	cmp	r1, r3
1a00387e:	d002      	beq.n	1a003886 <__sflush_r+0x92>
1a003880:	4628      	mov	r0, r5
1a003882:	f000 f9ab 	bl	1a003bdc <_free_r>
1a003886:	2000      	movs	r0, #0
1a003888:	6360      	str	r0, [r4, #52]	; 0x34
1a00388a:	e7c1      	b.n	1a003810 <__sflush_r+0x1c>
1a00388c:	6a21      	ldr	r1, [r4, #32]
1a00388e:	2301      	movs	r3, #1
1a003890:	4628      	mov	r0, r5
1a003892:	47b0      	blx	r6
1a003894:	1c41      	adds	r1, r0, #1
1a003896:	d1c7      	bne.n	1a003828 <__sflush_r+0x34>
1a003898:	682b      	ldr	r3, [r5, #0]
1a00389a:	2b00      	cmp	r3, #0
1a00389c:	d0c4      	beq.n	1a003828 <__sflush_r+0x34>
1a00389e:	2b1d      	cmp	r3, #29
1a0038a0:	d001      	beq.n	1a0038a6 <__sflush_r+0xb2>
1a0038a2:	2b16      	cmp	r3, #22
1a0038a4:	d101      	bne.n	1a0038aa <__sflush_r+0xb6>
1a0038a6:	602f      	str	r7, [r5, #0]
1a0038a8:	e7b1      	b.n	1a00380e <__sflush_r+0x1a>
1a0038aa:	89a3      	ldrh	r3, [r4, #12]
1a0038ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0038b0:	81a3      	strh	r3, [r4, #12]
1a0038b2:	e7ad      	b.n	1a003810 <__sflush_r+0x1c>
1a0038b4:	690f      	ldr	r7, [r1, #16]
1a0038b6:	2f00      	cmp	r7, #0
1a0038b8:	d0a9      	beq.n	1a00380e <__sflush_r+0x1a>
1a0038ba:	0793      	lsls	r3, r2, #30
1a0038bc:	680e      	ldr	r6, [r1, #0]
1a0038be:	bf08      	it	eq
1a0038c0:	694b      	ldreq	r3, [r1, #20]
1a0038c2:	600f      	str	r7, [r1, #0]
1a0038c4:	bf18      	it	ne
1a0038c6:	2300      	movne	r3, #0
1a0038c8:	eba6 0807 	sub.w	r8, r6, r7
1a0038cc:	608b      	str	r3, [r1, #8]
1a0038ce:	f1b8 0f00 	cmp.w	r8, #0
1a0038d2:	dd9c      	ble.n	1a00380e <__sflush_r+0x1a>
1a0038d4:	4643      	mov	r3, r8
1a0038d6:	463a      	mov	r2, r7
1a0038d8:	6a21      	ldr	r1, [r4, #32]
1a0038da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a0038dc:	4628      	mov	r0, r5
1a0038de:	47b0      	blx	r6
1a0038e0:	2800      	cmp	r0, #0
1a0038e2:	dc06      	bgt.n	1a0038f2 <__sflush_r+0xfe>
1a0038e4:	89a3      	ldrh	r3, [r4, #12]
1a0038e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0038ea:	81a3      	strh	r3, [r4, #12]
1a0038ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0038f0:	e78e      	b.n	1a003810 <__sflush_r+0x1c>
1a0038f2:	4407      	add	r7, r0
1a0038f4:	eba8 0800 	sub.w	r8, r8, r0
1a0038f8:	e7e9      	b.n	1a0038ce <__sflush_r+0xda>
1a0038fa:	bf00      	nop
1a0038fc:	20400001 	.word	0x20400001

1a003900 <_fflush_r>:
1a003900:	b538      	push	{r3, r4, r5, lr}
1a003902:	690b      	ldr	r3, [r1, #16]
1a003904:	4605      	mov	r5, r0
1a003906:	460c      	mov	r4, r1
1a003908:	b913      	cbnz	r3, 1a003910 <_fflush_r+0x10>
1a00390a:	2500      	movs	r5, #0
1a00390c:	4628      	mov	r0, r5
1a00390e:	bd38      	pop	{r3, r4, r5, pc}
1a003910:	b118      	cbz	r0, 1a00391a <_fflush_r+0x1a>
1a003912:	6983      	ldr	r3, [r0, #24]
1a003914:	b90b      	cbnz	r3, 1a00391a <_fflush_r+0x1a>
1a003916:	f000 f887 	bl	1a003a28 <__sinit>
1a00391a:	4b14      	ldr	r3, [pc, #80]	; (1a00396c <_fflush_r+0x6c>)
1a00391c:	429c      	cmp	r4, r3
1a00391e:	d11b      	bne.n	1a003958 <_fflush_r+0x58>
1a003920:	686c      	ldr	r4, [r5, #4]
1a003922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003926:	2b00      	cmp	r3, #0
1a003928:	d0ef      	beq.n	1a00390a <_fflush_r+0xa>
1a00392a:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a00392c:	07d0      	lsls	r0, r2, #31
1a00392e:	d404      	bmi.n	1a00393a <_fflush_r+0x3a>
1a003930:	0599      	lsls	r1, r3, #22
1a003932:	d402      	bmi.n	1a00393a <_fflush_r+0x3a>
1a003934:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a003936:	f000 f938 	bl	1a003baa <__retarget_lock_acquire_recursive>
1a00393a:	4628      	mov	r0, r5
1a00393c:	4621      	mov	r1, r4
1a00393e:	f7ff ff59 	bl	1a0037f4 <__sflush_r>
1a003942:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a003944:	07da      	lsls	r2, r3, #31
1a003946:	4605      	mov	r5, r0
1a003948:	d4e0      	bmi.n	1a00390c <_fflush_r+0xc>
1a00394a:	89a3      	ldrh	r3, [r4, #12]
1a00394c:	059b      	lsls	r3, r3, #22
1a00394e:	d4dd      	bmi.n	1a00390c <_fflush_r+0xc>
1a003950:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a003952:	f000 f92b 	bl	1a003bac <__retarget_lock_release_recursive>
1a003956:	e7d9      	b.n	1a00390c <_fflush_r+0xc>
1a003958:	4b05      	ldr	r3, [pc, #20]	; (1a003970 <_fflush_r+0x70>)
1a00395a:	429c      	cmp	r4, r3
1a00395c:	d101      	bne.n	1a003962 <_fflush_r+0x62>
1a00395e:	68ac      	ldr	r4, [r5, #8]
1a003960:	e7df      	b.n	1a003922 <_fflush_r+0x22>
1a003962:	4b04      	ldr	r3, [pc, #16]	; (1a003974 <_fflush_r+0x74>)
1a003964:	429c      	cmp	r4, r3
1a003966:	bf08      	it	eq
1a003968:	68ec      	ldreq	r4, [r5, #12]
1a00396a:	e7da      	b.n	1a003922 <_fflush_r+0x22>
1a00396c:	1a004b80 	.word	0x1a004b80
1a003970:	1a004ba0 	.word	0x1a004ba0
1a003974:	1a004b60 	.word	0x1a004b60

1a003978 <std>:
1a003978:	2300      	movs	r3, #0
1a00397a:	b510      	push	{r4, lr}
1a00397c:	4604      	mov	r4, r0
1a00397e:	e9c0 3300 	strd	r3, r3, [r0]
1a003982:	6083      	str	r3, [r0, #8]
1a003984:	8181      	strh	r1, [r0, #12]
1a003986:	6643      	str	r3, [r0, #100]	; 0x64
1a003988:	81c2      	strh	r2, [r0, #14]
1a00398a:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a00398e:	6183      	str	r3, [r0, #24]
1a003990:	4619      	mov	r1, r3
1a003992:	2208      	movs	r2, #8
1a003994:	305c      	adds	r0, #92	; 0x5c
1a003996:	f000 f918 	bl	1a003bca <memset>
1a00399a:	4b05      	ldr	r3, [pc, #20]	; (1a0039b0 <std+0x38>)
1a00399c:	6263      	str	r3, [r4, #36]	; 0x24
1a00399e:	4b05      	ldr	r3, [pc, #20]	; (1a0039b4 <std+0x3c>)
1a0039a0:	62a3      	str	r3, [r4, #40]	; 0x28
1a0039a2:	4b05      	ldr	r3, [pc, #20]	; (1a0039b8 <std+0x40>)
1a0039a4:	62e3      	str	r3, [r4, #44]	; 0x2c
1a0039a6:	4b05      	ldr	r3, [pc, #20]	; (1a0039bc <std+0x44>)
1a0039a8:	6224      	str	r4, [r4, #32]
1a0039aa:	6323      	str	r3, [r4, #48]	; 0x30
1a0039ac:	bd10      	pop	{r4, pc}
1a0039ae:	bf00      	nop
1a0039b0:	1a004401 	.word	0x1a004401
1a0039b4:	1a004423 	.word	0x1a004423
1a0039b8:	1a00445b 	.word	0x1a00445b
1a0039bc:	1a00447f 	.word	0x1a00447f

1a0039c0 <_cleanup_r>:
1a0039c0:	4901      	ldr	r1, [pc, #4]	; (1a0039c8 <_cleanup_r+0x8>)
1a0039c2:	f000 b8af 	b.w	1a003b24 <_fwalk_reent>
1a0039c6:	bf00      	nop
1a0039c8:	1a003901 	.word	0x1a003901

1a0039cc <__sfmoreglue>:
1a0039cc:	b570      	push	{r4, r5, r6, lr}
1a0039ce:	1e4a      	subs	r2, r1, #1
1a0039d0:	2568      	movs	r5, #104	; 0x68
1a0039d2:	4355      	muls	r5, r2
1a0039d4:	460e      	mov	r6, r1
1a0039d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a0039da:	f000 f94d 	bl	1a003c78 <_malloc_r>
1a0039de:	4604      	mov	r4, r0
1a0039e0:	b140      	cbz	r0, 1a0039f4 <__sfmoreglue+0x28>
1a0039e2:	2100      	movs	r1, #0
1a0039e4:	e9c0 1600 	strd	r1, r6, [r0]
1a0039e8:	300c      	adds	r0, #12
1a0039ea:	60a0      	str	r0, [r4, #8]
1a0039ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a0039f0:	f000 f8eb 	bl	1a003bca <memset>
1a0039f4:	4620      	mov	r0, r4
1a0039f6:	bd70      	pop	{r4, r5, r6, pc}

1a0039f8 <__sfp_lock_acquire>:
1a0039f8:	4801      	ldr	r0, [pc, #4]	; (1a003a00 <__sfp_lock_acquire+0x8>)
1a0039fa:	f000 b8d6 	b.w	1a003baa <__retarget_lock_acquire_recursive>
1a0039fe:	bf00      	nop
1a003a00:	100022a0 	.word	0x100022a0

1a003a04 <__sfp_lock_release>:
1a003a04:	4801      	ldr	r0, [pc, #4]	; (1a003a0c <__sfp_lock_release+0x8>)
1a003a06:	f000 b8d1 	b.w	1a003bac <__retarget_lock_release_recursive>
1a003a0a:	bf00      	nop
1a003a0c:	100022a0 	.word	0x100022a0

1a003a10 <__sinit_lock_acquire>:
1a003a10:	4801      	ldr	r0, [pc, #4]	; (1a003a18 <__sinit_lock_acquire+0x8>)
1a003a12:	f000 b8ca 	b.w	1a003baa <__retarget_lock_acquire_recursive>
1a003a16:	bf00      	nop
1a003a18:	1000229b 	.word	0x1000229b

1a003a1c <__sinit_lock_release>:
1a003a1c:	4801      	ldr	r0, [pc, #4]	; (1a003a24 <__sinit_lock_release+0x8>)
1a003a1e:	f000 b8c5 	b.w	1a003bac <__retarget_lock_release_recursive>
1a003a22:	bf00      	nop
1a003a24:	1000229b 	.word	0x1000229b

1a003a28 <__sinit>:
1a003a28:	b510      	push	{r4, lr}
1a003a2a:	4604      	mov	r4, r0
1a003a2c:	f7ff fff0 	bl	1a003a10 <__sinit_lock_acquire>
1a003a30:	69a3      	ldr	r3, [r4, #24]
1a003a32:	b11b      	cbz	r3, 1a003a3c <__sinit+0x14>
1a003a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a003a38:	f7ff bff0 	b.w	1a003a1c <__sinit_lock_release>
1a003a3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
1a003a40:	6523      	str	r3, [r4, #80]	; 0x50
1a003a42:	4b13      	ldr	r3, [pc, #76]	; (1a003a90 <__sinit+0x68>)
1a003a44:	4a13      	ldr	r2, [pc, #76]	; (1a003a94 <__sinit+0x6c>)
1a003a46:	681b      	ldr	r3, [r3, #0]
1a003a48:	62a2      	str	r2, [r4, #40]	; 0x28
1a003a4a:	42a3      	cmp	r3, r4
1a003a4c:	bf04      	itt	eq
1a003a4e:	2301      	moveq	r3, #1
1a003a50:	61a3      	streq	r3, [r4, #24]
1a003a52:	4620      	mov	r0, r4
1a003a54:	f000 f820 	bl	1a003a98 <__sfp>
1a003a58:	6060      	str	r0, [r4, #4]
1a003a5a:	4620      	mov	r0, r4
1a003a5c:	f000 f81c 	bl	1a003a98 <__sfp>
1a003a60:	60a0      	str	r0, [r4, #8]
1a003a62:	4620      	mov	r0, r4
1a003a64:	f000 f818 	bl	1a003a98 <__sfp>
1a003a68:	2200      	movs	r2, #0
1a003a6a:	60e0      	str	r0, [r4, #12]
1a003a6c:	2104      	movs	r1, #4
1a003a6e:	6860      	ldr	r0, [r4, #4]
1a003a70:	f7ff ff82 	bl	1a003978 <std>
1a003a74:	2201      	movs	r2, #1
1a003a76:	2109      	movs	r1, #9
1a003a78:	68a0      	ldr	r0, [r4, #8]
1a003a7a:	f7ff ff7d 	bl	1a003978 <std>
1a003a7e:	2202      	movs	r2, #2
1a003a80:	2112      	movs	r1, #18
1a003a82:	68e0      	ldr	r0, [r4, #12]
1a003a84:	f7ff ff78 	bl	1a003978 <std>
1a003a88:	2301      	movs	r3, #1
1a003a8a:	61a3      	str	r3, [r4, #24]
1a003a8c:	e7d2      	b.n	1a003a34 <__sinit+0xc>
1a003a8e:	bf00      	nop
1a003a90:	1a004bc0 	.word	0x1a004bc0
1a003a94:	1a0039c1 	.word	0x1a0039c1

1a003a98 <__sfp>:
1a003a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003a9a:	4607      	mov	r7, r0
1a003a9c:	f7ff ffac 	bl	1a0039f8 <__sfp_lock_acquire>
1a003aa0:	4b1e      	ldr	r3, [pc, #120]	; (1a003b1c <__sfp+0x84>)
1a003aa2:	681e      	ldr	r6, [r3, #0]
1a003aa4:	69b3      	ldr	r3, [r6, #24]
1a003aa6:	b913      	cbnz	r3, 1a003aae <__sfp+0x16>
1a003aa8:	4630      	mov	r0, r6
1a003aaa:	f7ff ffbd 	bl	1a003a28 <__sinit>
1a003aae:	3648      	adds	r6, #72	; 0x48
1a003ab0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a003ab4:	3b01      	subs	r3, #1
1a003ab6:	d503      	bpl.n	1a003ac0 <__sfp+0x28>
1a003ab8:	6833      	ldr	r3, [r6, #0]
1a003aba:	b30b      	cbz	r3, 1a003b00 <__sfp+0x68>
1a003abc:	6836      	ldr	r6, [r6, #0]
1a003abe:	e7f7      	b.n	1a003ab0 <__sfp+0x18>
1a003ac0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a003ac4:	b9d5      	cbnz	r5, 1a003afc <__sfp+0x64>
1a003ac6:	4b16      	ldr	r3, [pc, #88]	; (1a003b20 <__sfp+0x88>)
1a003ac8:	60e3      	str	r3, [r4, #12]
1a003aca:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a003ace:	6665      	str	r5, [r4, #100]	; 0x64
1a003ad0:	f000 f86a 	bl	1a003ba8 <__retarget_lock_init_recursive>
1a003ad4:	f7ff ff96 	bl	1a003a04 <__sfp_lock_release>
1a003ad8:	6025      	str	r5, [r4, #0]
1a003ada:	e9c4 5501 	strd	r5, r5, [r4, #4]
1a003ade:	e9c4 5504 	strd	r5, r5, [r4, #16]
1a003ae2:	61a5      	str	r5, [r4, #24]
1a003ae4:	2208      	movs	r2, #8
1a003ae6:	4629      	mov	r1, r5
1a003ae8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a003aec:	f000 f86d 	bl	1a003bca <memset>
1a003af0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a003af4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a003af8:	4620      	mov	r0, r4
1a003afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003afc:	3468      	adds	r4, #104	; 0x68
1a003afe:	e7d9      	b.n	1a003ab4 <__sfp+0x1c>
1a003b00:	2104      	movs	r1, #4
1a003b02:	4638      	mov	r0, r7
1a003b04:	f7ff ff62 	bl	1a0039cc <__sfmoreglue>
1a003b08:	4604      	mov	r4, r0
1a003b0a:	6030      	str	r0, [r6, #0]
1a003b0c:	2800      	cmp	r0, #0
1a003b0e:	d1d5      	bne.n	1a003abc <__sfp+0x24>
1a003b10:	f7ff ff78 	bl	1a003a04 <__sfp_lock_release>
1a003b14:	230c      	movs	r3, #12
1a003b16:	603b      	str	r3, [r7, #0]
1a003b18:	e7ee      	b.n	1a003af8 <__sfp+0x60>
1a003b1a:	bf00      	nop
1a003b1c:	1a004bc0 	.word	0x1a004bc0
1a003b20:	ffff0001 	.word	0xffff0001

1a003b24 <_fwalk_reent>:
1a003b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a003b28:	4680      	mov	r8, r0
1a003b2a:	4689      	mov	r9, r1
1a003b2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a003b30:	2600      	movs	r6, #0
1a003b32:	b914      	cbnz	r4, 1a003b3a <_fwalk_reent+0x16>
1a003b34:	4630      	mov	r0, r6
1a003b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a003b3a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a003b3e:	3f01      	subs	r7, #1
1a003b40:	d501      	bpl.n	1a003b46 <_fwalk_reent+0x22>
1a003b42:	6824      	ldr	r4, [r4, #0]
1a003b44:	e7f5      	b.n	1a003b32 <_fwalk_reent+0xe>
1a003b46:	89ab      	ldrh	r3, [r5, #12]
1a003b48:	2b01      	cmp	r3, #1
1a003b4a:	d907      	bls.n	1a003b5c <_fwalk_reent+0x38>
1a003b4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a003b50:	3301      	adds	r3, #1
1a003b52:	d003      	beq.n	1a003b5c <_fwalk_reent+0x38>
1a003b54:	4629      	mov	r1, r5
1a003b56:	4640      	mov	r0, r8
1a003b58:	47c8      	blx	r9
1a003b5a:	4306      	orrs	r6, r0
1a003b5c:	3568      	adds	r5, #104	; 0x68
1a003b5e:	e7ee      	b.n	1a003b3e <_fwalk_reent+0x1a>

1a003b60 <__libc_init_array>:
1a003b60:	b570      	push	{r4, r5, r6, lr}
1a003b62:	4d0d      	ldr	r5, [pc, #52]	; (1a003b98 <__libc_init_array+0x38>)
1a003b64:	4c0d      	ldr	r4, [pc, #52]	; (1a003b9c <__libc_init_array+0x3c>)
1a003b66:	1b64      	subs	r4, r4, r5
1a003b68:	10a4      	asrs	r4, r4, #2
1a003b6a:	2600      	movs	r6, #0
1a003b6c:	42a6      	cmp	r6, r4
1a003b6e:	d109      	bne.n	1a003b84 <__libc_init_array+0x24>
1a003b70:	4d0b      	ldr	r5, [pc, #44]	; (1a003ba0 <__libc_init_array+0x40>)
1a003b72:	4c0c      	ldr	r4, [pc, #48]	; (1a003ba4 <__libc_init_array+0x44>)
1a003b74:	f7fc fd1f 	bl	1a0005b6 <_init>
1a003b78:	1b64      	subs	r4, r4, r5
1a003b7a:	10a4      	asrs	r4, r4, #2
1a003b7c:	2600      	movs	r6, #0
1a003b7e:	42a6      	cmp	r6, r4
1a003b80:	d105      	bne.n	1a003b8e <__libc_init_array+0x2e>
1a003b82:	bd70      	pop	{r4, r5, r6, pc}
1a003b84:	f855 3b04 	ldr.w	r3, [r5], #4
1a003b88:	4798      	blx	r3
1a003b8a:	3601      	adds	r6, #1
1a003b8c:	e7ee      	b.n	1a003b6c <__libc_init_array+0xc>
1a003b8e:	f855 3b04 	ldr.w	r3, [r5], #4
1a003b92:	4798      	blx	r3
1a003b94:	3601      	adds	r6, #1
1a003b96:	e7f2      	b.n	1a003b7e <__libc_init_array+0x1e>
1a003b98:	1a004bf8 	.word	0x1a004bf8
1a003b9c:	1a004bf8 	.word	0x1a004bf8
1a003ba0:	1a004bf8 	.word	0x1a004bf8
1a003ba4:	1a004bfc 	.word	0x1a004bfc

1a003ba8 <__retarget_lock_init_recursive>:
1a003ba8:	4770      	bx	lr

1a003baa <__retarget_lock_acquire_recursive>:
1a003baa:	4770      	bx	lr

1a003bac <__retarget_lock_release_recursive>:
1a003bac:	4770      	bx	lr

1a003bae <memcpy>:
1a003bae:	440a      	add	r2, r1
1a003bb0:	4291      	cmp	r1, r2
1a003bb2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003bb6:	d100      	bne.n	1a003bba <memcpy+0xc>
1a003bb8:	4770      	bx	lr
1a003bba:	b510      	push	{r4, lr}
1a003bbc:	f811 4b01 	ldrb.w	r4, [r1], #1
1a003bc0:	f803 4f01 	strb.w	r4, [r3, #1]!
1a003bc4:	4291      	cmp	r1, r2
1a003bc6:	d1f9      	bne.n	1a003bbc <memcpy+0xe>
1a003bc8:	bd10      	pop	{r4, pc}

1a003bca <memset>:
1a003bca:	4402      	add	r2, r0
1a003bcc:	4603      	mov	r3, r0
1a003bce:	4293      	cmp	r3, r2
1a003bd0:	d100      	bne.n	1a003bd4 <memset+0xa>
1a003bd2:	4770      	bx	lr
1a003bd4:	f803 1b01 	strb.w	r1, [r3], #1
1a003bd8:	e7f9      	b.n	1a003bce <memset+0x4>
1a003bda:	Address 0x000000001a003bda is out of bounds.


1a003bdc <_free_r>:
1a003bdc:	b538      	push	{r3, r4, r5, lr}
1a003bde:	4605      	mov	r5, r0
1a003be0:	2900      	cmp	r1, #0
1a003be2:	d045      	beq.n	1a003c70 <_free_r+0x94>
1a003be4:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a003be8:	1f0c      	subs	r4, r1, #4
1a003bea:	2b00      	cmp	r3, #0
1a003bec:	bfb8      	it	lt
1a003bee:	18e4      	addlt	r4, r4, r3
1a003bf0:	f000 fdbe 	bl	1a004770 <__malloc_lock>
1a003bf4:	4a1f      	ldr	r2, [pc, #124]	; (1a003c74 <_free_r+0x98>)
1a003bf6:	6813      	ldr	r3, [r2, #0]
1a003bf8:	4610      	mov	r0, r2
1a003bfa:	b933      	cbnz	r3, 1a003c0a <_free_r+0x2e>
1a003bfc:	6063      	str	r3, [r4, #4]
1a003bfe:	6014      	str	r4, [r2, #0]
1a003c00:	4628      	mov	r0, r5
1a003c02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a003c06:	f000 bdb9 	b.w	1a00477c <__malloc_unlock>
1a003c0a:	42a3      	cmp	r3, r4
1a003c0c:	d90c      	bls.n	1a003c28 <_free_r+0x4c>
1a003c0e:	6821      	ldr	r1, [r4, #0]
1a003c10:	1862      	adds	r2, r4, r1
1a003c12:	4293      	cmp	r3, r2
1a003c14:	bf04      	itt	eq
1a003c16:	681a      	ldreq	r2, [r3, #0]
1a003c18:	685b      	ldreq	r3, [r3, #4]
1a003c1a:	6063      	str	r3, [r4, #4]
1a003c1c:	bf04      	itt	eq
1a003c1e:	1852      	addeq	r2, r2, r1
1a003c20:	6022      	streq	r2, [r4, #0]
1a003c22:	6004      	str	r4, [r0, #0]
1a003c24:	e7ec      	b.n	1a003c00 <_free_r+0x24>
1a003c26:	4613      	mov	r3, r2
1a003c28:	685a      	ldr	r2, [r3, #4]
1a003c2a:	b10a      	cbz	r2, 1a003c30 <_free_r+0x54>
1a003c2c:	42a2      	cmp	r2, r4
1a003c2e:	d9fa      	bls.n	1a003c26 <_free_r+0x4a>
1a003c30:	6819      	ldr	r1, [r3, #0]
1a003c32:	1858      	adds	r0, r3, r1
1a003c34:	42a0      	cmp	r0, r4
1a003c36:	d10b      	bne.n	1a003c50 <_free_r+0x74>
1a003c38:	6820      	ldr	r0, [r4, #0]
1a003c3a:	4401      	add	r1, r0
1a003c3c:	1858      	adds	r0, r3, r1
1a003c3e:	4282      	cmp	r2, r0
1a003c40:	6019      	str	r1, [r3, #0]
1a003c42:	d1dd      	bne.n	1a003c00 <_free_r+0x24>
1a003c44:	6810      	ldr	r0, [r2, #0]
1a003c46:	6852      	ldr	r2, [r2, #4]
1a003c48:	605a      	str	r2, [r3, #4]
1a003c4a:	4401      	add	r1, r0
1a003c4c:	6019      	str	r1, [r3, #0]
1a003c4e:	e7d7      	b.n	1a003c00 <_free_r+0x24>
1a003c50:	d902      	bls.n	1a003c58 <_free_r+0x7c>
1a003c52:	230c      	movs	r3, #12
1a003c54:	602b      	str	r3, [r5, #0]
1a003c56:	e7d3      	b.n	1a003c00 <_free_r+0x24>
1a003c58:	6820      	ldr	r0, [r4, #0]
1a003c5a:	1821      	adds	r1, r4, r0
1a003c5c:	428a      	cmp	r2, r1
1a003c5e:	bf04      	itt	eq
1a003c60:	6811      	ldreq	r1, [r2, #0]
1a003c62:	6852      	ldreq	r2, [r2, #4]
1a003c64:	6062      	str	r2, [r4, #4]
1a003c66:	bf04      	itt	eq
1a003c68:	1809      	addeq	r1, r1, r0
1a003c6a:	6021      	streq	r1, [r4, #0]
1a003c6c:	605c      	str	r4, [r3, #4]
1a003c6e:	e7c7      	b.n	1a003c00 <_free_r+0x24>
1a003c70:	bd38      	pop	{r3, r4, r5, pc}
1a003c72:	bf00      	nop
1a003c74:	10002234 	.word	0x10002234

1a003c78 <_malloc_r>:
1a003c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003c7a:	1ccd      	adds	r5, r1, #3
1a003c7c:	f025 0503 	bic.w	r5, r5, #3
1a003c80:	3508      	adds	r5, #8
1a003c82:	2d0c      	cmp	r5, #12
1a003c84:	bf38      	it	cc
1a003c86:	250c      	movcc	r5, #12
1a003c88:	2d00      	cmp	r5, #0
1a003c8a:	4606      	mov	r6, r0
1a003c8c:	db01      	blt.n	1a003c92 <_malloc_r+0x1a>
1a003c8e:	42a9      	cmp	r1, r5
1a003c90:	d903      	bls.n	1a003c9a <_malloc_r+0x22>
1a003c92:	230c      	movs	r3, #12
1a003c94:	6033      	str	r3, [r6, #0]
1a003c96:	2000      	movs	r0, #0
1a003c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003c9a:	f000 fd69 	bl	1a004770 <__malloc_lock>
1a003c9e:	4921      	ldr	r1, [pc, #132]	; (1a003d24 <_malloc_r+0xac>)
1a003ca0:	680a      	ldr	r2, [r1, #0]
1a003ca2:	4614      	mov	r4, r2
1a003ca4:	b99c      	cbnz	r4, 1a003cce <_malloc_r+0x56>
1a003ca6:	4f20      	ldr	r7, [pc, #128]	; (1a003d28 <_malloc_r+0xb0>)
1a003ca8:	683b      	ldr	r3, [r7, #0]
1a003caa:	b923      	cbnz	r3, 1a003cb6 <_malloc_r+0x3e>
1a003cac:	4621      	mov	r1, r4
1a003cae:	4630      	mov	r0, r6
1a003cb0:	f7fc fcd6 	bl	1a000660 <_sbrk_r>
1a003cb4:	6038      	str	r0, [r7, #0]
1a003cb6:	4629      	mov	r1, r5
1a003cb8:	4630      	mov	r0, r6
1a003cba:	f7fc fcd1 	bl	1a000660 <_sbrk_r>
1a003cbe:	1c43      	adds	r3, r0, #1
1a003cc0:	d123      	bne.n	1a003d0a <_malloc_r+0x92>
1a003cc2:	230c      	movs	r3, #12
1a003cc4:	6033      	str	r3, [r6, #0]
1a003cc6:	4630      	mov	r0, r6
1a003cc8:	f000 fd58 	bl	1a00477c <__malloc_unlock>
1a003ccc:	e7e3      	b.n	1a003c96 <_malloc_r+0x1e>
1a003cce:	6823      	ldr	r3, [r4, #0]
1a003cd0:	1b5b      	subs	r3, r3, r5
1a003cd2:	d417      	bmi.n	1a003d04 <_malloc_r+0x8c>
1a003cd4:	2b0b      	cmp	r3, #11
1a003cd6:	d903      	bls.n	1a003ce0 <_malloc_r+0x68>
1a003cd8:	6023      	str	r3, [r4, #0]
1a003cda:	441c      	add	r4, r3
1a003cdc:	6025      	str	r5, [r4, #0]
1a003cde:	e004      	b.n	1a003cea <_malloc_r+0x72>
1a003ce0:	6863      	ldr	r3, [r4, #4]
1a003ce2:	42a2      	cmp	r2, r4
1a003ce4:	bf0c      	ite	eq
1a003ce6:	600b      	streq	r3, [r1, #0]
1a003ce8:	6053      	strne	r3, [r2, #4]
1a003cea:	4630      	mov	r0, r6
1a003cec:	f000 fd46 	bl	1a00477c <__malloc_unlock>
1a003cf0:	f104 000b 	add.w	r0, r4, #11
1a003cf4:	1d23      	adds	r3, r4, #4
1a003cf6:	f020 0007 	bic.w	r0, r0, #7
1a003cfa:	1ac2      	subs	r2, r0, r3
1a003cfc:	d0cc      	beq.n	1a003c98 <_malloc_r+0x20>
1a003cfe:	1a1b      	subs	r3, r3, r0
1a003d00:	50a3      	str	r3, [r4, r2]
1a003d02:	e7c9      	b.n	1a003c98 <_malloc_r+0x20>
1a003d04:	4622      	mov	r2, r4
1a003d06:	6864      	ldr	r4, [r4, #4]
1a003d08:	e7cc      	b.n	1a003ca4 <_malloc_r+0x2c>
1a003d0a:	1cc4      	adds	r4, r0, #3
1a003d0c:	f024 0403 	bic.w	r4, r4, #3
1a003d10:	42a0      	cmp	r0, r4
1a003d12:	d0e3      	beq.n	1a003cdc <_malloc_r+0x64>
1a003d14:	1a21      	subs	r1, r4, r0
1a003d16:	4630      	mov	r0, r6
1a003d18:	f7fc fca2 	bl	1a000660 <_sbrk_r>
1a003d1c:	3001      	adds	r0, #1
1a003d1e:	d1dd      	bne.n	1a003cdc <_malloc_r+0x64>
1a003d20:	e7cf      	b.n	1a003cc2 <_malloc_r+0x4a>
1a003d22:	bf00      	nop
1a003d24:	10002234 	.word	0x10002234
1a003d28:	10002238 	.word	0x10002238

1a003d2c <__sfputc_r>:
1a003d2c:	6893      	ldr	r3, [r2, #8]
1a003d2e:	3b01      	subs	r3, #1
1a003d30:	2b00      	cmp	r3, #0
1a003d32:	b410      	push	{r4}
1a003d34:	6093      	str	r3, [r2, #8]
1a003d36:	da08      	bge.n	1a003d4a <__sfputc_r+0x1e>
1a003d38:	6994      	ldr	r4, [r2, #24]
1a003d3a:	42a3      	cmp	r3, r4
1a003d3c:	db01      	blt.n	1a003d42 <__sfputc_r+0x16>
1a003d3e:	290a      	cmp	r1, #10
1a003d40:	d103      	bne.n	1a003d4a <__sfputc_r+0x1e>
1a003d42:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003d46:	f000 bb9f 	b.w	1a004488 <__swbuf_r>
1a003d4a:	6813      	ldr	r3, [r2, #0]
1a003d4c:	1c58      	adds	r0, r3, #1
1a003d4e:	6010      	str	r0, [r2, #0]
1a003d50:	7019      	strb	r1, [r3, #0]
1a003d52:	4608      	mov	r0, r1
1a003d54:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003d58:	4770      	bx	lr

1a003d5a <__sfputs_r>:
1a003d5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003d5c:	4606      	mov	r6, r0
1a003d5e:	460f      	mov	r7, r1
1a003d60:	4614      	mov	r4, r2
1a003d62:	18d5      	adds	r5, r2, r3
1a003d64:	42ac      	cmp	r4, r5
1a003d66:	d101      	bne.n	1a003d6c <__sfputs_r+0x12>
1a003d68:	2000      	movs	r0, #0
1a003d6a:	e007      	b.n	1a003d7c <__sfputs_r+0x22>
1a003d6c:	463a      	mov	r2, r7
1a003d6e:	f814 1b01 	ldrb.w	r1, [r4], #1
1a003d72:	4630      	mov	r0, r6
1a003d74:	f7ff ffda 	bl	1a003d2c <__sfputc_r>
1a003d78:	1c43      	adds	r3, r0, #1
1a003d7a:	d1f3      	bne.n	1a003d64 <__sfputs_r+0xa>
1a003d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003d7e:	Address 0x000000001a003d7e is out of bounds.


1a003d80 <_vfiprintf_r>:
1a003d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003d84:	460d      	mov	r5, r1
1a003d86:	b09d      	sub	sp, #116	; 0x74
1a003d88:	4614      	mov	r4, r2
1a003d8a:	461e      	mov	r6, r3
1a003d8c:	4607      	mov	r7, r0
1a003d8e:	b118      	cbz	r0, 1a003d98 <_vfiprintf_r+0x18>
1a003d90:	6983      	ldr	r3, [r0, #24]
1a003d92:	b90b      	cbnz	r3, 1a003d98 <_vfiprintf_r+0x18>
1a003d94:	f7ff fe48 	bl	1a003a28 <__sinit>
1a003d98:	4b85      	ldr	r3, [pc, #532]	; (1a003fb0 <_vfiprintf_r+0x230>)
1a003d9a:	429d      	cmp	r5, r3
1a003d9c:	d11b      	bne.n	1a003dd6 <_vfiprintf_r+0x56>
1a003d9e:	687d      	ldr	r5, [r7, #4]
1a003da0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a003da2:	07d9      	lsls	r1, r3, #31
1a003da4:	d405      	bmi.n	1a003db2 <_vfiprintf_r+0x32>
1a003da6:	89ab      	ldrh	r3, [r5, #12]
1a003da8:	059a      	lsls	r2, r3, #22
1a003daa:	d402      	bmi.n	1a003db2 <_vfiprintf_r+0x32>
1a003dac:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a003dae:	f7ff fefc 	bl	1a003baa <__retarget_lock_acquire_recursive>
1a003db2:	89ab      	ldrh	r3, [r5, #12]
1a003db4:	071b      	lsls	r3, r3, #28
1a003db6:	d501      	bpl.n	1a003dbc <_vfiprintf_r+0x3c>
1a003db8:	692b      	ldr	r3, [r5, #16]
1a003dba:	b9eb      	cbnz	r3, 1a003df8 <_vfiprintf_r+0x78>
1a003dbc:	4629      	mov	r1, r5
1a003dbe:	4638      	mov	r0, r7
1a003dc0:	f000 fbb4 	bl	1a00452c <__swsetup_r>
1a003dc4:	b1c0      	cbz	r0, 1a003df8 <_vfiprintf_r+0x78>
1a003dc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a003dc8:	07d8      	lsls	r0, r3, #31
1a003dca:	d50e      	bpl.n	1a003dea <_vfiprintf_r+0x6a>
1a003dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003dd0:	b01d      	add	sp, #116	; 0x74
1a003dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003dd6:	4b77      	ldr	r3, [pc, #476]	; (1a003fb4 <_vfiprintf_r+0x234>)
1a003dd8:	429d      	cmp	r5, r3
1a003dda:	d101      	bne.n	1a003de0 <_vfiprintf_r+0x60>
1a003ddc:	68bd      	ldr	r5, [r7, #8]
1a003dde:	e7df      	b.n	1a003da0 <_vfiprintf_r+0x20>
1a003de0:	4b75      	ldr	r3, [pc, #468]	; (1a003fb8 <_vfiprintf_r+0x238>)
1a003de2:	429d      	cmp	r5, r3
1a003de4:	bf08      	it	eq
1a003de6:	68fd      	ldreq	r5, [r7, #12]
1a003de8:	e7da      	b.n	1a003da0 <_vfiprintf_r+0x20>
1a003dea:	89ab      	ldrh	r3, [r5, #12]
1a003dec:	0599      	lsls	r1, r3, #22
1a003dee:	d4ed      	bmi.n	1a003dcc <_vfiprintf_r+0x4c>
1a003df0:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a003df2:	f7ff fedb 	bl	1a003bac <__retarget_lock_release_recursive>
1a003df6:	e7e9      	b.n	1a003dcc <_vfiprintf_r+0x4c>
1a003df8:	2300      	movs	r3, #0
1a003dfa:	9309      	str	r3, [sp, #36]	; 0x24
1a003dfc:	2320      	movs	r3, #32
1a003dfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a003e02:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 1a003fbc <_vfiprintf_r+0x23c>
1a003e06:	9603      	str	r6, [sp, #12]
1a003e08:	2330      	movs	r3, #48	; 0x30
1a003e0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a003e0e:	f04f 0a01 	mov.w	sl, #1
1a003e12:	4623      	mov	r3, r4
1a003e14:	461e      	mov	r6, r3
1a003e16:	f813 2b01 	ldrb.w	r2, [r3], #1
1a003e1a:	b10a      	cbz	r2, 1a003e20 <_vfiprintf_r+0xa0>
1a003e1c:	2a25      	cmp	r2, #37	; 0x25
1a003e1e:	d1f9      	bne.n	1a003e14 <_vfiprintf_r+0x94>
1a003e20:	ebb6 0b04 	subs.w	fp, r6, r4
1a003e24:	d00b      	beq.n	1a003e3e <_vfiprintf_r+0xbe>
1a003e26:	465b      	mov	r3, fp
1a003e28:	4622      	mov	r2, r4
1a003e2a:	4629      	mov	r1, r5
1a003e2c:	4638      	mov	r0, r7
1a003e2e:	f7ff ff94 	bl	1a003d5a <__sfputs_r>
1a003e32:	3001      	adds	r0, #1
1a003e34:	f000 80a3 	beq.w	1a003f7e <_vfiprintf_r+0x1fe>
1a003e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003e3a:	445b      	add	r3, fp
1a003e3c:	9309      	str	r3, [sp, #36]	; 0x24
1a003e3e:	7833      	ldrb	r3, [r6, #0]
1a003e40:	2b00      	cmp	r3, #0
1a003e42:	f000 809c 	beq.w	1a003f7e <_vfiprintf_r+0x1fe>
1a003e46:	2300      	movs	r3, #0
1a003e48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a003e4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a003e50:	3601      	adds	r6, #1
1a003e52:	9304      	str	r3, [sp, #16]
1a003e54:	9307      	str	r3, [sp, #28]
1a003e56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a003e5a:	931a      	str	r3, [sp, #104]	; 0x68
1a003e5c:	4634      	mov	r4, r6
1a003e5e:	2205      	movs	r2, #5
1a003e60:	f814 1b01 	ldrb.w	r1, [r4], #1
1a003e64:	4855      	ldr	r0, [pc, #340]	; (1a003fbc <_vfiprintf_r+0x23c>)
1a003e66:	f000 fc33 	bl	1a0046d0 <memchr>
1a003e6a:	9b04      	ldr	r3, [sp, #16]
1a003e6c:	b9c0      	cbnz	r0, 1a003ea0 <_vfiprintf_r+0x120>
1a003e6e:	06da      	lsls	r2, r3, #27
1a003e70:	bf44      	itt	mi
1a003e72:	2220      	movmi	r2, #32
1a003e74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a003e78:	0718      	lsls	r0, r3, #28
1a003e7a:	bf44      	itt	mi
1a003e7c:	222b      	movmi	r2, #43	; 0x2b
1a003e7e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a003e82:	7832      	ldrb	r2, [r6, #0]
1a003e84:	2a2a      	cmp	r2, #42	; 0x2a
1a003e86:	d013      	beq.n	1a003eb0 <_vfiprintf_r+0x130>
1a003e88:	9a07      	ldr	r2, [sp, #28]
1a003e8a:	4634      	mov	r4, r6
1a003e8c:	2000      	movs	r0, #0
1a003e8e:	260a      	movs	r6, #10
1a003e90:	4621      	mov	r1, r4
1a003e92:	f811 3b01 	ldrb.w	r3, [r1], #1
1a003e96:	3b30      	subs	r3, #48	; 0x30
1a003e98:	2b09      	cmp	r3, #9
1a003e9a:	d94b      	bls.n	1a003f34 <_vfiprintf_r+0x1b4>
1a003e9c:	b970      	cbnz	r0, 1a003ebc <_vfiprintf_r+0x13c>
1a003e9e:	e014      	b.n	1a003eca <_vfiprintf_r+0x14a>
1a003ea0:	eba0 0009 	sub.w	r0, r0, r9
1a003ea4:	fa0a f000 	lsl.w	r0, sl, r0
1a003ea8:	4318      	orrs	r0, r3
1a003eaa:	9004      	str	r0, [sp, #16]
1a003eac:	4626      	mov	r6, r4
1a003eae:	e7d5      	b.n	1a003e5c <_vfiprintf_r+0xdc>
1a003eb0:	9a03      	ldr	r2, [sp, #12]
1a003eb2:	1d11      	adds	r1, r2, #4
1a003eb4:	6812      	ldr	r2, [r2, #0]
1a003eb6:	9103      	str	r1, [sp, #12]
1a003eb8:	2a00      	cmp	r2, #0
1a003eba:	db01      	blt.n	1a003ec0 <_vfiprintf_r+0x140>
1a003ebc:	9207      	str	r2, [sp, #28]
1a003ebe:	e004      	b.n	1a003eca <_vfiprintf_r+0x14a>
1a003ec0:	4252      	negs	r2, r2
1a003ec2:	f043 0302 	orr.w	r3, r3, #2
1a003ec6:	9207      	str	r2, [sp, #28]
1a003ec8:	9304      	str	r3, [sp, #16]
1a003eca:	7823      	ldrb	r3, [r4, #0]
1a003ecc:	2b2e      	cmp	r3, #46	; 0x2e
1a003ece:	d10c      	bne.n	1a003eea <_vfiprintf_r+0x16a>
1a003ed0:	7863      	ldrb	r3, [r4, #1]
1a003ed2:	2b2a      	cmp	r3, #42	; 0x2a
1a003ed4:	d133      	bne.n	1a003f3e <_vfiprintf_r+0x1be>
1a003ed6:	9b03      	ldr	r3, [sp, #12]
1a003ed8:	1d1a      	adds	r2, r3, #4
1a003eda:	681b      	ldr	r3, [r3, #0]
1a003edc:	9203      	str	r2, [sp, #12]
1a003ede:	2b00      	cmp	r3, #0
1a003ee0:	bfb8      	it	lt
1a003ee2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a003ee6:	3402      	adds	r4, #2
1a003ee8:	9305      	str	r3, [sp, #20]
1a003eea:	4e35      	ldr	r6, [pc, #212]	; (1a003fc0 <_vfiprintf_r+0x240>)
1a003eec:	7821      	ldrb	r1, [r4, #0]
1a003eee:	2203      	movs	r2, #3
1a003ef0:	4630      	mov	r0, r6
1a003ef2:	f000 fbed 	bl	1a0046d0 <memchr>
1a003ef6:	b138      	cbz	r0, 1a003f08 <_vfiprintf_r+0x188>
1a003ef8:	2340      	movs	r3, #64	; 0x40
1a003efa:	1b80      	subs	r0, r0, r6
1a003efc:	fa03 f000 	lsl.w	r0, r3, r0
1a003f00:	9b04      	ldr	r3, [sp, #16]
1a003f02:	4303      	orrs	r3, r0
1a003f04:	3401      	adds	r4, #1
1a003f06:	9304      	str	r3, [sp, #16]
1a003f08:	f814 1b01 	ldrb.w	r1, [r4], #1
1a003f0c:	482d      	ldr	r0, [pc, #180]	; (1a003fc4 <_vfiprintf_r+0x244>)
1a003f0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a003f12:	2206      	movs	r2, #6
1a003f14:	f000 fbdc 	bl	1a0046d0 <memchr>
1a003f18:	2800      	cmp	r0, #0
1a003f1a:	d03f      	beq.n	1a003f9c <_vfiprintf_r+0x21c>
1a003f1c:	4b2a      	ldr	r3, [pc, #168]	; (1a003fc8 <_vfiprintf_r+0x248>)
1a003f1e:	bb13      	cbnz	r3, 1a003f66 <_vfiprintf_r+0x1e6>
1a003f20:	9b03      	ldr	r3, [sp, #12]
1a003f22:	3307      	adds	r3, #7
1a003f24:	f023 0307 	bic.w	r3, r3, #7
1a003f28:	3308      	adds	r3, #8
1a003f2a:	9303      	str	r3, [sp, #12]
1a003f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003f2e:	4443      	add	r3, r8
1a003f30:	9309      	str	r3, [sp, #36]	; 0x24
1a003f32:	e76e      	b.n	1a003e12 <_vfiprintf_r+0x92>
1a003f34:	fb06 3202 	mla	r2, r6, r2, r3
1a003f38:	2001      	movs	r0, #1
1a003f3a:	460c      	mov	r4, r1
1a003f3c:	e7a8      	b.n	1a003e90 <_vfiprintf_r+0x110>
1a003f3e:	2300      	movs	r3, #0
1a003f40:	3401      	adds	r4, #1
1a003f42:	9305      	str	r3, [sp, #20]
1a003f44:	4619      	mov	r1, r3
1a003f46:	260a      	movs	r6, #10
1a003f48:	4620      	mov	r0, r4
1a003f4a:	f810 2b01 	ldrb.w	r2, [r0], #1
1a003f4e:	3a30      	subs	r2, #48	; 0x30
1a003f50:	2a09      	cmp	r2, #9
1a003f52:	d903      	bls.n	1a003f5c <_vfiprintf_r+0x1dc>
1a003f54:	2b00      	cmp	r3, #0
1a003f56:	d0c8      	beq.n	1a003eea <_vfiprintf_r+0x16a>
1a003f58:	9105      	str	r1, [sp, #20]
1a003f5a:	e7c6      	b.n	1a003eea <_vfiprintf_r+0x16a>
1a003f5c:	fb06 2101 	mla	r1, r6, r1, r2
1a003f60:	2301      	movs	r3, #1
1a003f62:	4604      	mov	r4, r0
1a003f64:	e7f0      	b.n	1a003f48 <_vfiprintf_r+0x1c8>
1a003f66:	ab03      	add	r3, sp, #12
1a003f68:	9300      	str	r3, [sp, #0]
1a003f6a:	462a      	mov	r2, r5
1a003f6c:	4b17      	ldr	r3, [pc, #92]	; (1a003fcc <_vfiprintf_r+0x24c>)
1a003f6e:	a904      	add	r1, sp, #16
1a003f70:	4638      	mov	r0, r7
1a003f72:	f3af 8000 	nop.w
1a003f76:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a003f7a:	4680      	mov	r8, r0
1a003f7c:	d1d6      	bne.n	1a003f2c <_vfiprintf_r+0x1ac>
1a003f7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a003f80:	07d9      	lsls	r1, r3, #31
1a003f82:	d405      	bmi.n	1a003f90 <_vfiprintf_r+0x210>
1a003f84:	89ab      	ldrh	r3, [r5, #12]
1a003f86:	059a      	lsls	r2, r3, #22
1a003f88:	d402      	bmi.n	1a003f90 <_vfiprintf_r+0x210>
1a003f8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a003f8c:	f7ff fe0e 	bl	1a003bac <__retarget_lock_release_recursive>
1a003f90:	89ab      	ldrh	r3, [r5, #12]
1a003f92:	065b      	lsls	r3, r3, #25
1a003f94:	f53f af1a 	bmi.w	1a003dcc <_vfiprintf_r+0x4c>
1a003f98:	9809      	ldr	r0, [sp, #36]	; 0x24
1a003f9a:	e719      	b.n	1a003dd0 <_vfiprintf_r+0x50>
1a003f9c:	ab03      	add	r3, sp, #12
1a003f9e:	9300      	str	r3, [sp, #0]
1a003fa0:	462a      	mov	r2, r5
1a003fa2:	4b0a      	ldr	r3, [pc, #40]	; (1a003fcc <_vfiprintf_r+0x24c>)
1a003fa4:	a904      	add	r1, sp, #16
1a003fa6:	4638      	mov	r0, r7
1a003fa8:	f000 f888 	bl	1a0040bc <_printf_i>
1a003fac:	e7e3      	b.n	1a003f76 <_vfiprintf_r+0x1f6>
1a003fae:	bf00      	nop
1a003fb0:	1a004b80 	.word	0x1a004b80
1a003fb4:	1a004ba0 	.word	0x1a004ba0
1a003fb8:	1a004b60 	.word	0x1a004b60
1a003fbc:	1a004bc4 	.word	0x1a004bc4
1a003fc0:	1a004bca 	.word	0x1a004bca
1a003fc4:	1a004bce 	.word	0x1a004bce
1a003fc8:	00000000 	.word	0x00000000
1a003fcc:	1a003d5b 	.word	0x1a003d5b

1a003fd0 <_printf_common>:
1a003fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a003fd4:	4691      	mov	r9, r2
1a003fd6:	461f      	mov	r7, r3
1a003fd8:	688a      	ldr	r2, [r1, #8]
1a003fda:	690b      	ldr	r3, [r1, #16]
1a003fdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a003fe0:	4293      	cmp	r3, r2
1a003fe2:	bfb8      	it	lt
1a003fe4:	4613      	movlt	r3, r2
1a003fe6:	f8c9 3000 	str.w	r3, [r9]
1a003fea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a003fee:	4606      	mov	r6, r0
1a003ff0:	460c      	mov	r4, r1
1a003ff2:	b112      	cbz	r2, 1a003ffa <_printf_common+0x2a>
1a003ff4:	3301      	adds	r3, #1
1a003ff6:	f8c9 3000 	str.w	r3, [r9]
1a003ffa:	6823      	ldr	r3, [r4, #0]
1a003ffc:	0699      	lsls	r1, r3, #26
1a003ffe:	bf42      	ittt	mi
1a004000:	f8d9 3000 	ldrmi.w	r3, [r9]
1a004004:	3302      	addmi	r3, #2
1a004006:	f8c9 3000 	strmi.w	r3, [r9]
1a00400a:	6825      	ldr	r5, [r4, #0]
1a00400c:	f015 0506 	ands.w	r5, r5, #6
1a004010:	d107      	bne.n	1a004022 <_printf_common+0x52>
1a004012:	f104 0a19 	add.w	sl, r4, #25
1a004016:	68e3      	ldr	r3, [r4, #12]
1a004018:	f8d9 2000 	ldr.w	r2, [r9]
1a00401c:	1a9b      	subs	r3, r3, r2
1a00401e:	42ab      	cmp	r3, r5
1a004020:	dc28      	bgt.n	1a004074 <_printf_common+0xa4>
1a004022:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a004026:	6822      	ldr	r2, [r4, #0]
1a004028:	3300      	adds	r3, #0
1a00402a:	bf18      	it	ne
1a00402c:	2301      	movne	r3, #1
1a00402e:	0692      	lsls	r2, r2, #26
1a004030:	d42d      	bmi.n	1a00408e <_printf_common+0xbe>
1a004032:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a004036:	4639      	mov	r1, r7
1a004038:	4630      	mov	r0, r6
1a00403a:	47c0      	blx	r8
1a00403c:	3001      	adds	r0, #1
1a00403e:	d020      	beq.n	1a004082 <_printf_common+0xb2>
1a004040:	6823      	ldr	r3, [r4, #0]
1a004042:	68e5      	ldr	r5, [r4, #12]
1a004044:	f8d9 2000 	ldr.w	r2, [r9]
1a004048:	f003 0306 	and.w	r3, r3, #6
1a00404c:	2b04      	cmp	r3, #4
1a00404e:	bf08      	it	eq
1a004050:	1aad      	subeq	r5, r5, r2
1a004052:	68a3      	ldr	r3, [r4, #8]
1a004054:	6922      	ldr	r2, [r4, #16]
1a004056:	bf0c      	ite	eq
1a004058:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a00405c:	2500      	movne	r5, #0
1a00405e:	4293      	cmp	r3, r2
1a004060:	bfc4      	itt	gt
1a004062:	1a9b      	subgt	r3, r3, r2
1a004064:	18ed      	addgt	r5, r5, r3
1a004066:	f04f 0900 	mov.w	r9, #0
1a00406a:	341a      	adds	r4, #26
1a00406c:	454d      	cmp	r5, r9
1a00406e:	d11a      	bne.n	1a0040a6 <_printf_common+0xd6>
1a004070:	2000      	movs	r0, #0
1a004072:	e008      	b.n	1a004086 <_printf_common+0xb6>
1a004074:	2301      	movs	r3, #1
1a004076:	4652      	mov	r2, sl
1a004078:	4639      	mov	r1, r7
1a00407a:	4630      	mov	r0, r6
1a00407c:	47c0      	blx	r8
1a00407e:	3001      	adds	r0, #1
1a004080:	d103      	bne.n	1a00408a <_printf_common+0xba>
1a004082:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00408a:	3501      	adds	r5, #1
1a00408c:	e7c3      	b.n	1a004016 <_printf_common+0x46>
1a00408e:	18e1      	adds	r1, r4, r3
1a004090:	1c5a      	adds	r2, r3, #1
1a004092:	2030      	movs	r0, #48	; 0x30
1a004094:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a004098:	4422      	add	r2, r4
1a00409a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a00409e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a0040a2:	3302      	adds	r3, #2
1a0040a4:	e7c5      	b.n	1a004032 <_printf_common+0x62>
1a0040a6:	2301      	movs	r3, #1
1a0040a8:	4622      	mov	r2, r4
1a0040aa:	4639      	mov	r1, r7
1a0040ac:	4630      	mov	r0, r6
1a0040ae:	47c0      	blx	r8
1a0040b0:	3001      	adds	r0, #1
1a0040b2:	d0e6      	beq.n	1a004082 <_printf_common+0xb2>
1a0040b4:	f109 0901 	add.w	r9, r9, #1
1a0040b8:	e7d8      	b.n	1a00406c <_printf_common+0x9c>
1a0040ba:	Address 0x000000001a0040ba is out of bounds.


1a0040bc <_printf_i>:
1a0040bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0040c0:	4606      	mov	r6, r0
1a0040c2:	460c      	mov	r4, r1
1a0040c4:	f101 0043 	add.w	r0, r1, #67	; 0x43
1a0040c8:	7e09      	ldrb	r1, [r1, #24]
1a0040ca:	b085      	sub	sp, #20
1a0040cc:	296e      	cmp	r1, #110	; 0x6e
1a0040ce:	4698      	mov	r8, r3
1a0040d0:	4617      	mov	r7, r2
1a0040d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0040d4:	f000 80ba 	beq.w	1a00424c <_printf_i+0x190>
1a0040d8:	d824      	bhi.n	1a004124 <_printf_i+0x68>
1a0040da:	2963      	cmp	r1, #99	; 0x63
1a0040dc:	d039      	beq.n	1a004152 <_printf_i+0x96>
1a0040de:	d80a      	bhi.n	1a0040f6 <_printf_i+0x3a>
1a0040e0:	2900      	cmp	r1, #0
1a0040e2:	f000 80c3 	beq.w	1a00426c <_printf_i+0x1b0>
1a0040e6:	2958      	cmp	r1, #88	; 0x58
1a0040e8:	f000 8091 	beq.w	1a00420e <_printf_i+0x152>
1a0040ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a0040f0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a0040f4:	e035      	b.n	1a004162 <_printf_i+0xa6>
1a0040f6:	2964      	cmp	r1, #100	; 0x64
1a0040f8:	d001      	beq.n	1a0040fe <_printf_i+0x42>
1a0040fa:	2969      	cmp	r1, #105	; 0x69
1a0040fc:	d1f6      	bne.n	1a0040ec <_printf_i+0x30>
1a0040fe:	6825      	ldr	r5, [r4, #0]
1a004100:	681a      	ldr	r2, [r3, #0]
1a004102:	f015 0f80 	tst.w	r5, #128	; 0x80
1a004106:	f102 0104 	add.w	r1, r2, #4
1a00410a:	d02c      	beq.n	1a004166 <_printf_i+0xaa>
1a00410c:	6812      	ldr	r2, [r2, #0]
1a00410e:	6019      	str	r1, [r3, #0]
1a004110:	2a00      	cmp	r2, #0
1a004112:	da03      	bge.n	1a00411c <_printf_i+0x60>
1a004114:	232d      	movs	r3, #45	; 0x2d
1a004116:	4252      	negs	r2, r2
1a004118:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a00411c:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 1a0042dc <_printf_i+0x220>
1a004120:	230a      	movs	r3, #10
1a004122:	e03f      	b.n	1a0041a4 <_printf_i+0xe8>
1a004124:	2973      	cmp	r1, #115	; 0x73
1a004126:	f000 80a5 	beq.w	1a004274 <_printf_i+0x1b8>
1a00412a:	d808      	bhi.n	1a00413e <_printf_i+0x82>
1a00412c:	296f      	cmp	r1, #111	; 0x6f
1a00412e:	d021      	beq.n	1a004174 <_printf_i+0xb8>
1a004130:	2970      	cmp	r1, #112	; 0x70
1a004132:	d1db      	bne.n	1a0040ec <_printf_i+0x30>
1a004134:	6822      	ldr	r2, [r4, #0]
1a004136:	f042 0220 	orr.w	r2, r2, #32
1a00413a:	6022      	str	r2, [r4, #0]
1a00413c:	e003      	b.n	1a004146 <_printf_i+0x8a>
1a00413e:	2975      	cmp	r1, #117	; 0x75
1a004140:	d018      	beq.n	1a004174 <_printf_i+0xb8>
1a004142:	2978      	cmp	r1, #120	; 0x78
1a004144:	d1d2      	bne.n	1a0040ec <_printf_i+0x30>
1a004146:	2278      	movs	r2, #120	; 0x78
1a004148:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
1a00414c:	f8df c190 	ldr.w	ip, [pc, #400]	; 1a0042e0 <_printf_i+0x224>
1a004150:	e061      	b.n	1a004216 <_printf_i+0x15a>
1a004152:	681a      	ldr	r2, [r3, #0]
1a004154:	1d11      	adds	r1, r2, #4
1a004156:	6019      	str	r1, [r3, #0]
1a004158:	6813      	ldr	r3, [r2, #0]
1a00415a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a00415e:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a004162:	2301      	movs	r3, #1
1a004164:	e093      	b.n	1a00428e <_printf_i+0x1d2>
1a004166:	6812      	ldr	r2, [r2, #0]
1a004168:	6019      	str	r1, [r3, #0]
1a00416a:	f015 0f40 	tst.w	r5, #64	; 0x40
1a00416e:	bf18      	it	ne
1a004170:	b212      	sxthne	r2, r2
1a004172:	e7cd      	b.n	1a004110 <_printf_i+0x54>
1a004174:	f8d4 c000 	ldr.w	ip, [r4]
1a004178:	681a      	ldr	r2, [r3, #0]
1a00417a:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a00417e:	f102 0504 	add.w	r5, r2, #4
1a004182:	601d      	str	r5, [r3, #0]
1a004184:	d001      	beq.n	1a00418a <_printf_i+0xce>
1a004186:	6812      	ldr	r2, [r2, #0]
1a004188:	e003      	b.n	1a004192 <_printf_i+0xd6>
1a00418a:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a00418e:	d0fa      	beq.n	1a004186 <_printf_i+0xca>
1a004190:	8812      	ldrh	r2, [r2, #0]
1a004192:	f8df c148 	ldr.w	ip, [pc, #328]	; 1a0042dc <_printf_i+0x220>
1a004196:	296f      	cmp	r1, #111	; 0x6f
1a004198:	bf0c      	ite	eq
1a00419a:	2308      	moveq	r3, #8
1a00419c:	230a      	movne	r3, #10
1a00419e:	2100      	movs	r1, #0
1a0041a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a0041a4:	6865      	ldr	r5, [r4, #4]
1a0041a6:	60a5      	str	r5, [r4, #8]
1a0041a8:	2d00      	cmp	r5, #0
1a0041aa:	bfa2      	ittt	ge
1a0041ac:	6821      	ldrge	r1, [r4, #0]
1a0041ae:	f021 0104 	bicge.w	r1, r1, #4
1a0041b2:	6021      	strge	r1, [r4, #0]
1a0041b4:	b90a      	cbnz	r2, 1a0041ba <_printf_i+0xfe>
1a0041b6:	2d00      	cmp	r5, #0
1a0041b8:	d046      	beq.n	1a004248 <_printf_i+0x18c>
1a0041ba:	4605      	mov	r5, r0
1a0041bc:	fbb2 f1f3 	udiv	r1, r2, r3
1a0041c0:	fb03 2e11 	mls	lr, r3, r1, r2
1a0041c4:	4293      	cmp	r3, r2
1a0041c6:	f81c e00e 	ldrb.w	lr, [ip, lr]
1a0041ca:	f805 ed01 	strb.w	lr, [r5, #-1]!
1a0041ce:	d939      	bls.n	1a004244 <_printf_i+0x188>
1a0041d0:	2b08      	cmp	r3, #8
1a0041d2:	d10b      	bne.n	1a0041ec <_printf_i+0x130>
1a0041d4:	6823      	ldr	r3, [r4, #0]
1a0041d6:	07da      	lsls	r2, r3, #31
1a0041d8:	d508      	bpl.n	1a0041ec <_printf_i+0x130>
1a0041da:	6923      	ldr	r3, [r4, #16]
1a0041dc:	6862      	ldr	r2, [r4, #4]
1a0041de:	429a      	cmp	r2, r3
1a0041e0:	bfde      	ittt	le
1a0041e2:	2330      	movle	r3, #48	; 0x30
1a0041e4:	f805 3c01 	strble.w	r3, [r5, #-1]
1a0041e8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a0041ec:	1b40      	subs	r0, r0, r5
1a0041ee:	6120      	str	r0, [r4, #16]
1a0041f0:	f8cd 8000 	str.w	r8, [sp]
1a0041f4:	463b      	mov	r3, r7
1a0041f6:	aa03      	add	r2, sp, #12
1a0041f8:	4621      	mov	r1, r4
1a0041fa:	4630      	mov	r0, r6
1a0041fc:	f7ff fee8 	bl	1a003fd0 <_printf_common>
1a004200:	3001      	adds	r0, #1
1a004202:	d149      	bne.n	1a004298 <_printf_i+0x1dc>
1a004204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004208:	b005      	add	sp, #20
1a00420a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00420e:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 1a0042dc <_printf_i+0x220>
1a004212:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a004216:	681d      	ldr	r5, [r3, #0]
1a004218:	6821      	ldr	r1, [r4, #0]
1a00421a:	f855 2b04 	ldr.w	r2, [r5], #4
1a00421e:	601d      	str	r5, [r3, #0]
1a004220:	060d      	lsls	r5, r1, #24
1a004222:	d50b      	bpl.n	1a00423c <_printf_i+0x180>
1a004224:	07cd      	lsls	r5, r1, #31
1a004226:	bf44      	itt	mi
1a004228:	f041 0120 	orrmi.w	r1, r1, #32
1a00422c:	6021      	strmi	r1, [r4, #0]
1a00422e:	b91a      	cbnz	r2, 1a004238 <_printf_i+0x17c>
1a004230:	6823      	ldr	r3, [r4, #0]
1a004232:	f023 0320 	bic.w	r3, r3, #32
1a004236:	6023      	str	r3, [r4, #0]
1a004238:	2310      	movs	r3, #16
1a00423a:	e7b0      	b.n	1a00419e <_printf_i+0xe2>
1a00423c:	064b      	lsls	r3, r1, #25
1a00423e:	bf48      	it	mi
1a004240:	b292      	uxthmi	r2, r2
1a004242:	e7ef      	b.n	1a004224 <_printf_i+0x168>
1a004244:	460a      	mov	r2, r1
1a004246:	e7b9      	b.n	1a0041bc <_printf_i+0x100>
1a004248:	4605      	mov	r5, r0
1a00424a:	e7c1      	b.n	1a0041d0 <_printf_i+0x114>
1a00424c:	681a      	ldr	r2, [r3, #0]
1a00424e:	f8d4 c000 	ldr.w	ip, [r4]
1a004252:	6961      	ldr	r1, [r4, #20]
1a004254:	1d15      	adds	r5, r2, #4
1a004256:	601d      	str	r5, [r3, #0]
1a004258:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a00425c:	6813      	ldr	r3, [r2, #0]
1a00425e:	d001      	beq.n	1a004264 <_printf_i+0x1a8>
1a004260:	6019      	str	r1, [r3, #0]
1a004262:	e003      	b.n	1a00426c <_printf_i+0x1b0>
1a004264:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a004268:	d0fa      	beq.n	1a004260 <_printf_i+0x1a4>
1a00426a:	8019      	strh	r1, [r3, #0]
1a00426c:	2300      	movs	r3, #0
1a00426e:	6123      	str	r3, [r4, #16]
1a004270:	4605      	mov	r5, r0
1a004272:	e7bd      	b.n	1a0041f0 <_printf_i+0x134>
1a004274:	681a      	ldr	r2, [r3, #0]
1a004276:	1d11      	adds	r1, r2, #4
1a004278:	6019      	str	r1, [r3, #0]
1a00427a:	6815      	ldr	r5, [r2, #0]
1a00427c:	6862      	ldr	r2, [r4, #4]
1a00427e:	2100      	movs	r1, #0
1a004280:	4628      	mov	r0, r5
1a004282:	f000 fa25 	bl	1a0046d0 <memchr>
1a004286:	b108      	cbz	r0, 1a00428c <_printf_i+0x1d0>
1a004288:	1b40      	subs	r0, r0, r5
1a00428a:	6060      	str	r0, [r4, #4]
1a00428c:	6863      	ldr	r3, [r4, #4]
1a00428e:	6123      	str	r3, [r4, #16]
1a004290:	2300      	movs	r3, #0
1a004292:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a004296:	e7ab      	b.n	1a0041f0 <_printf_i+0x134>
1a004298:	6923      	ldr	r3, [r4, #16]
1a00429a:	462a      	mov	r2, r5
1a00429c:	4639      	mov	r1, r7
1a00429e:	4630      	mov	r0, r6
1a0042a0:	47c0      	blx	r8
1a0042a2:	3001      	adds	r0, #1
1a0042a4:	d0ae      	beq.n	1a004204 <_printf_i+0x148>
1a0042a6:	6823      	ldr	r3, [r4, #0]
1a0042a8:	079b      	lsls	r3, r3, #30
1a0042aa:	d413      	bmi.n	1a0042d4 <_printf_i+0x218>
1a0042ac:	68e0      	ldr	r0, [r4, #12]
1a0042ae:	9b03      	ldr	r3, [sp, #12]
1a0042b0:	4298      	cmp	r0, r3
1a0042b2:	bfb8      	it	lt
1a0042b4:	4618      	movlt	r0, r3
1a0042b6:	e7a7      	b.n	1a004208 <_printf_i+0x14c>
1a0042b8:	2301      	movs	r3, #1
1a0042ba:	464a      	mov	r2, r9
1a0042bc:	4639      	mov	r1, r7
1a0042be:	4630      	mov	r0, r6
1a0042c0:	47c0      	blx	r8
1a0042c2:	3001      	adds	r0, #1
1a0042c4:	d09e      	beq.n	1a004204 <_printf_i+0x148>
1a0042c6:	3501      	adds	r5, #1
1a0042c8:	68e3      	ldr	r3, [r4, #12]
1a0042ca:	9a03      	ldr	r2, [sp, #12]
1a0042cc:	1a9b      	subs	r3, r3, r2
1a0042ce:	42ab      	cmp	r3, r5
1a0042d0:	dcf2      	bgt.n	1a0042b8 <_printf_i+0x1fc>
1a0042d2:	e7eb      	b.n	1a0042ac <_printf_i+0x1f0>
1a0042d4:	2500      	movs	r5, #0
1a0042d6:	f104 0919 	add.w	r9, r4, #25
1a0042da:	e7f5      	b.n	1a0042c8 <_printf_i+0x20c>
1a0042dc:	1a004bd5 	.word	0x1a004bd5
1a0042e0:	1a004be6 	.word	0x1a004be6

1a0042e4 <iprintf>:
1a0042e4:	b40f      	push	{r0, r1, r2, r3}
1a0042e6:	4b0a      	ldr	r3, [pc, #40]	; (1a004310 <iprintf+0x2c>)
1a0042e8:	b513      	push	{r0, r1, r4, lr}
1a0042ea:	681c      	ldr	r4, [r3, #0]
1a0042ec:	b124      	cbz	r4, 1a0042f8 <iprintf+0x14>
1a0042ee:	69a3      	ldr	r3, [r4, #24]
1a0042f0:	b913      	cbnz	r3, 1a0042f8 <iprintf+0x14>
1a0042f2:	4620      	mov	r0, r4
1a0042f4:	f7ff fb98 	bl	1a003a28 <__sinit>
1a0042f8:	ab05      	add	r3, sp, #20
1a0042fa:	9a04      	ldr	r2, [sp, #16]
1a0042fc:	68a1      	ldr	r1, [r4, #8]
1a0042fe:	9301      	str	r3, [sp, #4]
1a004300:	4620      	mov	r0, r4
1a004302:	f7ff fd3d 	bl	1a003d80 <_vfiprintf_r>
1a004306:	b002      	add	sp, #8
1a004308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a00430c:	b004      	add	sp, #16
1a00430e:	4770      	bx	lr
1a004310:	10000040 	.word	0x10000040

1a004314 <_puts_r>:
1a004314:	b570      	push	{r4, r5, r6, lr}
1a004316:	460e      	mov	r6, r1
1a004318:	4605      	mov	r5, r0
1a00431a:	b118      	cbz	r0, 1a004324 <_puts_r+0x10>
1a00431c:	6983      	ldr	r3, [r0, #24]
1a00431e:	b90b      	cbnz	r3, 1a004324 <_puts_r+0x10>
1a004320:	f7ff fb82 	bl	1a003a28 <__sinit>
1a004324:	69ab      	ldr	r3, [r5, #24]
1a004326:	68ac      	ldr	r4, [r5, #8]
1a004328:	b913      	cbnz	r3, 1a004330 <_puts_r+0x1c>
1a00432a:	4628      	mov	r0, r5
1a00432c:	f7ff fb7c 	bl	1a003a28 <__sinit>
1a004330:	4b2c      	ldr	r3, [pc, #176]	; (1a0043e4 <_puts_r+0xd0>)
1a004332:	429c      	cmp	r4, r3
1a004334:	d120      	bne.n	1a004378 <_puts_r+0x64>
1a004336:	686c      	ldr	r4, [r5, #4]
1a004338:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a00433a:	07db      	lsls	r3, r3, #31
1a00433c:	d405      	bmi.n	1a00434a <_puts_r+0x36>
1a00433e:	89a3      	ldrh	r3, [r4, #12]
1a004340:	0598      	lsls	r0, r3, #22
1a004342:	d402      	bmi.n	1a00434a <_puts_r+0x36>
1a004344:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a004346:	f7ff fc30 	bl	1a003baa <__retarget_lock_acquire_recursive>
1a00434a:	89a3      	ldrh	r3, [r4, #12]
1a00434c:	0719      	lsls	r1, r3, #28
1a00434e:	d51d      	bpl.n	1a00438c <_puts_r+0x78>
1a004350:	6923      	ldr	r3, [r4, #16]
1a004352:	b1db      	cbz	r3, 1a00438c <_puts_r+0x78>
1a004354:	3e01      	subs	r6, #1
1a004356:	68a3      	ldr	r3, [r4, #8]
1a004358:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a00435c:	3b01      	subs	r3, #1
1a00435e:	60a3      	str	r3, [r4, #8]
1a004360:	bb39      	cbnz	r1, 1a0043b2 <_puts_r+0x9e>
1a004362:	2b00      	cmp	r3, #0
1a004364:	da38      	bge.n	1a0043d8 <_puts_r+0xc4>
1a004366:	4622      	mov	r2, r4
1a004368:	210a      	movs	r1, #10
1a00436a:	4628      	mov	r0, r5
1a00436c:	f000 f88c 	bl	1a004488 <__swbuf_r>
1a004370:	3001      	adds	r0, #1
1a004372:	d011      	beq.n	1a004398 <_puts_r+0x84>
1a004374:	250a      	movs	r5, #10
1a004376:	e011      	b.n	1a00439c <_puts_r+0x88>
1a004378:	4b1b      	ldr	r3, [pc, #108]	; (1a0043e8 <_puts_r+0xd4>)
1a00437a:	429c      	cmp	r4, r3
1a00437c:	d101      	bne.n	1a004382 <_puts_r+0x6e>
1a00437e:	68ac      	ldr	r4, [r5, #8]
1a004380:	e7da      	b.n	1a004338 <_puts_r+0x24>
1a004382:	4b1a      	ldr	r3, [pc, #104]	; (1a0043ec <_puts_r+0xd8>)
1a004384:	429c      	cmp	r4, r3
1a004386:	bf08      	it	eq
1a004388:	68ec      	ldreq	r4, [r5, #12]
1a00438a:	e7d5      	b.n	1a004338 <_puts_r+0x24>
1a00438c:	4621      	mov	r1, r4
1a00438e:	4628      	mov	r0, r5
1a004390:	f000 f8cc 	bl	1a00452c <__swsetup_r>
1a004394:	2800      	cmp	r0, #0
1a004396:	d0dd      	beq.n	1a004354 <_puts_r+0x40>
1a004398:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a00439c:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a00439e:	07da      	lsls	r2, r3, #31
1a0043a0:	d405      	bmi.n	1a0043ae <_puts_r+0x9a>
1a0043a2:	89a3      	ldrh	r3, [r4, #12]
1a0043a4:	059b      	lsls	r3, r3, #22
1a0043a6:	d402      	bmi.n	1a0043ae <_puts_r+0x9a>
1a0043a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0043aa:	f7ff fbff 	bl	1a003bac <__retarget_lock_release_recursive>
1a0043ae:	4628      	mov	r0, r5
1a0043b0:	bd70      	pop	{r4, r5, r6, pc}
1a0043b2:	2b00      	cmp	r3, #0
1a0043b4:	da04      	bge.n	1a0043c0 <_puts_r+0xac>
1a0043b6:	69a2      	ldr	r2, [r4, #24]
1a0043b8:	429a      	cmp	r2, r3
1a0043ba:	dc06      	bgt.n	1a0043ca <_puts_r+0xb6>
1a0043bc:	290a      	cmp	r1, #10
1a0043be:	d004      	beq.n	1a0043ca <_puts_r+0xb6>
1a0043c0:	6823      	ldr	r3, [r4, #0]
1a0043c2:	1c5a      	adds	r2, r3, #1
1a0043c4:	6022      	str	r2, [r4, #0]
1a0043c6:	7019      	strb	r1, [r3, #0]
1a0043c8:	e7c5      	b.n	1a004356 <_puts_r+0x42>
1a0043ca:	4622      	mov	r2, r4
1a0043cc:	4628      	mov	r0, r5
1a0043ce:	f000 f85b 	bl	1a004488 <__swbuf_r>
1a0043d2:	3001      	adds	r0, #1
1a0043d4:	d1bf      	bne.n	1a004356 <_puts_r+0x42>
1a0043d6:	e7df      	b.n	1a004398 <_puts_r+0x84>
1a0043d8:	6823      	ldr	r3, [r4, #0]
1a0043da:	250a      	movs	r5, #10
1a0043dc:	1c5a      	adds	r2, r3, #1
1a0043de:	6022      	str	r2, [r4, #0]
1a0043e0:	701d      	strb	r5, [r3, #0]
1a0043e2:	e7db      	b.n	1a00439c <_puts_r+0x88>
1a0043e4:	1a004b80 	.word	0x1a004b80
1a0043e8:	1a004ba0 	.word	0x1a004ba0
1a0043ec:	1a004b60 	.word	0x1a004b60

1a0043f0 <puts>:
1a0043f0:	4b02      	ldr	r3, [pc, #8]	; (1a0043fc <puts+0xc>)
1a0043f2:	4601      	mov	r1, r0
1a0043f4:	6818      	ldr	r0, [r3, #0]
1a0043f6:	f7ff bf8d 	b.w	1a004314 <_puts_r>
1a0043fa:	bf00      	nop
1a0043fc:	10000040 	.word	0x10000040

1a004400 <__sread>:
1a004400:	b510      	push	{r4, lr}
1a004402:	460c      	mov	r4, r1
1a004404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004408:	f7fc f8ee 	bl	1a0005e8 <_read_r>
1a00440c:	2800      	cmp	r0, #0
1a00440e:	bfab      	itete	ge
1a004410:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a004412:	89a3      	ldrhlt	r3, [r4, #12]
1a004414:	181b      	addge	r3, r3, r0
1a004416:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a00441a:	bfac      	ite	ge
1a00441c:	6563      	strge	r3, [r4, #84]	; 0x54
1a00441e:	81a3      	strhlt	r3, [r4, #12]
1a004420:	bd10      	pop	{r4, pc}

1a004422 <__swrite>:
1a004422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a004426:	461f      	mov	r7, r3
1a004428:	898b      	ldrh	r3, [r1, #12]
1a00442a:	05db      	lsls	r3, r3, #23
1a00442c:	4605      	mov	r5, r0
1a00442e:	460c      	mov	r4, r1
1a004430:	4616      	mov	r6, r2
1a004432:	d505      	bpl.n	1a004440 <__swrite+0x1e>
1a004434:	2302      	movs	r3, #2
1a004436:	2200      	movs	r2, #0
1a004438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00443c:	f7fc f8cf 	bl	1a0005de <_lseek_r>
1a004440:	89a3      	ldrh	r3, [r4, #12]
1a004442:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a004446:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a00444a:	81a3      	strh	r3, [r4, #12]
1a00444c:	4632      	mov	r2, r6
1a00444e:	463b      	mov	r3, r7
1a004450:	4628      	mov	r0, r5
1a004452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a004456:	f7fc b8ee 	b.w	1a000636 <_write_r>

1a00445a <__sseek>:
1a00445a:	b510      	push	{r4, lr}
1a00445c:	460c      	mov	r4, r1
1a00445e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004462:	f7fc f8bc 	bl	1a0005de <_lseek_r>
1a004466:	1c43      	adds	r3, r0, #1
1a004468:	89a3      	ldrh	r3, [r4, #12]
1a00446a:	bf15      	itete	ne
1a00446c:	6560      	strne	r0, [r4, #84]	; 0x54
1a00446e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a004472:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a004476:	81a3      	strheq	r3, [r4, #12]
1a004478:	bf18      	it	ne
1a00447a:	81a3      	strhne	r3, [r4, #12]
1a00447c:	bd10      	pop	{r4, pc}

1a00447e <__sclose>:
1a00447e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004482:	f7fc b899 	b.w	1a0005b8 <_close_r>
1a004486:	Address 0x000000001a004486 is out of bounds.


1a004488 <__swbuf_r>:
1a004488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00448a:	460e      	mov	r6, r1
1a00448c:	4614      	mov	r4, r2
1a00448e:	4605      	mov	r5, r0
1a004490:	b118      	cbz	r0, 1a00449a <__swbuf_r+0x12>
1a004492:	6983      	ldr	r3, [r0, #24]
1a004494:	b90b      	cbnz	r3, 1a00449a <__swbuf_r+0x12>
1a004496:	f7ff fac7 	bl	1a003a28 <__sinit>
1a00449a:	4b21      	ldr	r3, [pc, #132]	; (1a004520 <__swbuf_r+0x98>)
1a00449c:	429c      	cmp	r4, r3
1a00449e:	d12b      	bne.n	1a0044f8 <__swbuf_r+0x70>
1a0044a0:	686c      	ldr	r4, [r5, #4]
1a0044a2:	69a3      	ldr	r3, [r4, #24]
1a0044a4:	60a3      	str	r3, [r4, #8]
1a0044a6:	89a3      	ldrh	r3, [r4, #12]
1a0044a8:	071a      	lsls	r2, r3, #28
1a0044aa:	d52f      	bpl.n	1a00450c <__swbuf_r+0x84>
1a0044ac:	6923      	ldr	r3, [r4, #16]
1a0044ae:	b36b      	cbz	r3, 1a00450c <__swbuf_r+0x84>
1a0044b0:	6923      	ldr	r3, [r4, #16]
1a0044b2:	6820      	ldr	r0, [r4, #0]
1a0044b4:	1ac0      	subs	r0, r0, r3
1a0044b6:	6963      	ldr	r3, [r4, #20]
1a0044b8:	b2f6      	uxtb	r6, r6
1a0044ba:	4283      	cmp	r3, r0
1a0044bc:	4637      	mov	r7, r6
1a0044be:	dc04      	bgt.n	1a0044ca <__swbuf_r+0x42>
1a0044c0:	4621      	mov	r1, r4
1a0044c2:	4628      	mov	r0, r5
1a0044c4:	f7ff fa1c 	bl	1a003900 <_fflush_r>
1a0044c8:	bb30      	cbnz	r0, 1a004518 <__swbuf_r+0x90>
1a0044ca:	68a3      	ldr	r3, [r4, #8]
1a0044cc:	3b01      	subs	r3, #1
1a0044ce:	60a3      	str	r3, [r4, #8]
1a0044d0:	6823      	ldr	r3, [r4, #0]
1a0044d2:	1c5a      	adds	r2, r3, #1
1a0044d4:	6022      	str	r2, [r4, #0]
1a0044d6:	701e      	strb	r6, [r3, #0]
1a0044d8:	6963      	ldr	r3, [r4, #20]
1a0044da:	3001      	adds	r0, #1
1a0044dc:	4283      	cmp	r3, r0
1a0044de:	d004      	beq.n	1a0044ea <__swbuf_r+0x62>
1a0044e0:	89a3      	ldrh	r3, [r4, #12]
1a0044e2:	07db      	lsls	r3, r3, #31
1a0044e4:	d506      	bpl.n	1a0044f4 <__swbuf_r+0x6c>
1a0044e6:	2e0a      	cmp	r6, #10
1a0044e8:	d104      	bne.n	1a0044f4 <__swbuf_r+0x6c>
1a0044ea:	4621      	mov	r1, r4
1a0044ec:	4628      	mov	r0, r5
1a0044ee:	f7ff fa07 	bl	1a003900 <_fflush_r>
1a0044f2:	b988      	cbnz	r0, 1a004518 <__swbuf_r+0x90>
1a0044f4:	4638      	mov	r0, r7
1a0044f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0044f8:	4b0a      	ldr	r3, [pc, #40]	; (1a004524 <__swbuf_r+0x9c>)
1a0044fa:	429c      	cmp	r4, r3
1a0044fc:	d101      	bne.n	1a004502 <__swbuf_r+0x7a>
1a0044fe:	68ac      	ldr	r4, [r5, #8]
1a004500:	e7cf      	b.n	1a0044a2 <__swbuf_r+0x1a>
1a004502:	4b09      	ldr	r3, [pc, #36]	; (1a004528 <__swbuf_r+0xa0>)
1a004504:	429c      	cmp	r4, r3
1a004506:	bf08      	it	eq
1a004508:	68ec      	ldreq	r4, [r5, #12]
1a00450a:	e7ca      	b.n	1a0044a2 <__swbuf_r+0x1a>
1a00450c:	4621      	mov	r1, r4
1a00450e:	4628      	mov	r0, r5
1a004510:	f000 f80c 	bl	1a00452c <__swsetup_r>
1a004514:	2800      	cmp	r0, #0
1a004516:	d0cb      	beq.n	1a0044b0 <__swbuf_r+0x28>
1a004518:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a00451c:	e7ea      	b.n	1a0044f4 <__swbuf_r+0x6c>
1a00451e:	bf00      	nop
1a004520:	1a004b80 	.word	0x1a004b80
1a004524:	1a004ba0 	.word	0x1a004ba0
1a004528:	1a004b60 	.word	0x1a004b60

1a00452c <__swsetup_r>:
1a00452c:	4b32      	ldr	r3, [pc, #200]	; (1a0045f8 <__swsetup_r+0xcc>)
1a00452e:	b570      	push	{r4, r5, r6, lr}
1a004530:	681d      	ldr	r5, [r3, #0]
1a004532:	4606      	mov	r6, r0
1a004534:	460c      	mov	r4, r1
1a004536:	b125      	cbz	r5, 1a004542 <__swsetup_r+0x16>
1a004538:	69ab      	ldr	r3, [r5, #24]
1a00453a:	b913      	cbnz	r3, 1a004542 <__swsetup_r+0x16>
1a00453c:	4628      	mov	r0, r5
1a00453e:	f7ff fa73 	bl	1a003a28 <__sinit>
1a004542:	4b2e      	ldr	r3, [pc, #184]	; (1a0045fc <__swsetup_r+0xd0>)
1a004544:	429c      	cmp	r4, r3
1a004546:	d10f      	bne.n	1a004568 <__swsetup_r+0x3c>
1a004548:	686c      	ldr	r4, [r5, #4]
1a00454a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00454e:	b29a      	uxth	r2, r3
1a004550:	0715      	lsls	r5, r2, #28
1a004552:	d42c      	bmi.n	1a0045ae <__swsetup_r+0x82>
1a004554:	06d0      	lsls	r0, r2, #27
1a004556:	d411      	bmi.n	1a00457c <__swsetup_r+0x50>
1a004558:	2209      	movs	r2, #9
1a00455a:	6032      	str	r2, [r6, #0]
1a00455c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004560:	81a3      	strh	r3, [r4, #12]
1a004562:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004566:	e03e      	b.n	1a0045e6 <__swsetup_r+0xba>
1a004568:	4b25      	ldr	r3, [pc, #148]	; (1a004600 <__swsetup_r+0xd4>)
1a00456a:	429c      	cmp	r4, r3
1a00456c:	d101      	bne.n	1a004572 <__swsetup_r+0x46>
1a00456e:	68ac      	ldr	r4, [r5, #8]
1a004570:	e7eb      	b.n	1a00454a <__swsetup_r+0x1e>
1a004572:	4b24      	ldr	r3, [pc, #144]	; (1a004604 <__swsetup_r+0xd8>)
1a004574:	429c      	cmp	r4, r3
1a004576:	bf08      	it	eq
1a004578:	68ec      	ldreq	r4, [r5, #12]
1a00457a:	e7e6      	b.n	1a00454a <__swsetup_r+0x1e>
1a00457c:	0751      	lsls	r1, r2, #29
1a00457e:	d512      	bpl.n	1a0045a6 <__swsetup_r+0x7a>
1a004580:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a004582:	b141      	cbz	r1, 1a004596 <__swsetup_r+0x6a>
1a004584:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a004588:	4299      	cmp	r1, r3
1a00458a:	d002      	beq.n	1a004592 <__swsetup_r+0x66>
1a00458c:	4630      	mov	r0, r6
1a00458e:	f7ff fb25 	bl	1a003bdc <_free_r>
1a004592:	2300      	movs	r3, #0
1a004594:	6363      	str	r3, [r4, #52]	; 0x34
1a004596:	89a3      	ldrh	r3, [r4, #12]
1a004598:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a00459c:	81a3      	strh	r3, [r4, #12]
1a00459e:	2300      	movs	r3, #0
1a0045a0:	6063      	str	r3, [r4, #4]
1a0045a2:	6923      	ldr	r3, [r4, #16]
1a0045a4:	6023      	str	r3, [r4, #0]
1a0045a6:	89a3      	ldrh	r3, [r4, #12]
1a0045a8:	f043 0308 	orr.w	r3, r3, #8
1a0045ac:	81a3      	strh	r3, [r4, #12]
1a0045ae:	6923      	ldr	r3, [r4, #16]
1a0045b0:	b94b      	cbnz	r3, 1a0045c6 <__swsetup_r+0x9a>
1a0045b2:	89a3      	ldrh	r3, [r4, #12]
1a0045b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a0045b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a0045bc:	d003      	beq.n	1a0045c6 <__swsetup_r+0x9a>
1a0045be:	4621      	mov	r1, r4
1a0045c0:	4630      	mov	r0, r6
1a0045c2:	f000 f845 	bl	1a004650 <__smakebuf_r>
1a0045c6:	89a2      	ldrh	r2, [r4, #12]
1a0045c8:	f012 0301 	ands.w	r3, r2, #1
1a0045cc:	d00c      	beq.n	1a0045e8 <__swsetup_r+0xbc>
1a0045ce:	2300      	movs	r3, #0
1a0045d0:	60a3      	str	r3, [r4, #8]
1a0045d2:	6963      	ldr	r3, [r4, #20]
1a0045d4:	425b      	negs	r3, r3
1a0045d6:	61a3      	str	r3, [r4, #24]
1a0045d8:	6923      	ldr	r3, [r4, #16]
1a0045da:	b953      	cbnz	r3, 1a0045f2 <__swsetup_r+0xc6>
1a0045dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0045e0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a0045e4:	d1ba      	bne.n	1a00455c <__swsetup_r+0x30>
1a0045e6:	bd70      	pop	{r4, r5, r6, pc}
1a0045e8:	0792      	lsls	r2, r2, #30
1a0045ea:	bf58      	it	pl
1a0045ec:	6963      	ldrpl	r3, [r4, #20]
1a0045ee:	60a3      	str	r3, [r4, #8]
1a0045f0:	e7f2      	b.n	1a0045d8 <__swsetup_r+0xac>
1a0045f2:	2000      	movs	r0, #0
1a0045f4:	e7f7      	b.n	1a0045e6 <__swsetup_r+0xba>
1a0045f6:	bf00      	nop
1a0045f8:	10000040 	.word	0x10000040
1a0045fc:	1a004b80 	.word	0x1a004b80
1a004600:	1a004ba0 	.word	0x1a004ba0
1a004604:	1a004b60 	.word	0x1a004b60

1a004608 <__swhatbuf_r>:
1a004608:	b570      	push	{r4, r5, r6, lr}
1a00460a:	460e      	mov	r6, r1
1a00460c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004610:	2900      	cmp	r1, #0
1a004612:	b096      	sub	sp, #88	; 0x58
1a004614:	4614      	mov	r4, r2
1a004616:	461d      	mov	r5, r3
1a004618:	da07      	bge.n	1a00462a <__swhatbuf_r+0x22>
1a00461a:	2300      	movs	r3, #0
1a00461c:	602b      	str	r3, [r5, #0]
1a00461e:	89b3      	ldrh	r3, [r6, #12]
1a004620:	061a      	lsls	r2, r3, #24
1a004622:	d410      	bmi.n	1a004646 <__swhatbuf_r+0x3e>
1a004624:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a004628:	e00e      	b.n	1a004648 <__swhatbuf_r+0x40>
1a00462a:	466a      	mov	r2, sp
1a00462c:	f7fb ffc9 	bl	1a0005c2 <_fstat_r>
1a004630:	2800      	cmp	r0, #0
1a004632:	dbf2      	blt.n	1a00461a <__swhatbuf_r+0x12>
1a004634:	9a01      	ldr	r2, [sp, #4]
1a004636:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a00463a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a00463e:	425a      	negs	r2, r3
1a004640:	415a      	adcs	r2, r3
1a004642:	602a      	str	r2, [r5, #0]
1a004644:	e7ee      	b.n	1a004624 <__swhatbuf_r+0x1c>
1a004646:	2340      	movs	r3, #64	; 0x40
1a004648:	2000      	movs	r0, #0
1a00464a:	6023      	str	r3, [r4, #0]
1a00464c:	b016      	add	sp, #88	; 0x58
1a00464e:	bd70      	pop	{r4, r5, r6, pc}

1a004650 <__smakebuf_r>:
1a004650:	898b      	ldrh	r3, [r1, #12]
1a004652:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a004654:	079d      	lsls	r5, r3, #30
1a004656:	4606      	mov	r6, r0
1a004658:	460c      	mov	r4, r1
1a00465a:	d507      	bpl.n	1a00466c <__smakebuf_r+0x1c>
1a00465c:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a004660:	6023      	str	r3, [r4, #0]
1a004662:	6123      	str	r3, [r4, #16]
1a004664:	2301      	movs	r3, #1
1a004666:	6163      	str	r3, [r4, #20]
1a004668:	b002      	add	sp, #8
1a00466a:	bd70      	pop	{r4, r5, r6, pc}
1a00466c:	ab01      	add	r3, sp, #4
1a00466e:	466a      	mov	r2, sp
1a004670:	f7ff ffca 	bl	1a004608 <__swhatbuf_r>
1a004674:	9900      	ldr	r1, [sp, #0]
1a004676:	4605      	mov	r5, r0
1a004678:	4630      	mov	r0, r6
1a00467a:	f7ff fafd 	bl	1a003c78 <_malloc_r>
1a00467e:	b948      	cbnz	r0, 1a004694 <__smakebuf_r+0x44>
1a004680:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004684:	059a      	lsls	r2, r3, #22
1a004686:	d4ef      	bmi.n	1a004668 <__smakebuf_r+0x18>
1a004688:	f023 0303 	bic.w	r3, r3, #3
1a00468c:	f043 0302 	orr.w	r3, r3, #2
1a004690:	81a3      	strh	r3, [r4, #12]
1a004692:	e7e3      	b.n	1a00465c <__smakebuf_r+0xc>
1a004694:	4b0d      	ldr	r3, [pc, #52]	; (1a0046cc <__smakebuf_r+0x7c>)
1a004696:	62b3      	str	r3, [r6, #40]	; 0x28
1a004698:	89a3      	ldrh	r3, [r4, #12]
1a00469a:	6020      	str	r0, [r4, #0]
1a00469c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0046a0:	81a3      	strh	r3, [r4, #12]
1a0046a2:	9b00      	ldr	r3, [sp, #0]
1a0046a4:	6163      	str	r3, [r4, #20]
1a0046a6:	9b01      	ldr	r3, [sp, #4]
1a0046a8:	6120      	str	r0, [r4, #16]
1a0046aa:	b15b      	cbz	r3, 1a0046c4 <__smakebuf_r+0x74>
1a0046ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a0046b0:	4630      	mov	r0, r6
1a0046b2:	f7fb ff8b 	bl	1a0005cc <_isatty_r>
1a0046b6:	b128      	cbz	r0, 1a0046c4 <__smakebuf_r+0x74>
1a0046b8:	89a3      	ldrh	r3, [r4, #12]
1a0046ba:	f023 0303 	bic.w	r3, r3, #3
1a0046be:	f043 0301 	orr.w	r3, r3, #1
1a0046c2:	81a3      	strh	r3, [r4, #12]
1a0046c4:	89a3      	ldrh	r3, [r4, #12]
1a0046c6:	431d      	orrs	r5, r3
1a0046c8:	81a5      	strh	r5, [r4, #12]
1a0046ca:	e7cd      	b.n	1a004668 <__smakebuf_r+0x18>
1a0046cc:	1a0039c1 	.word	0x1a0039c1

1a0046d0 <memchr>:
1a0046d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a0046d4:	2a10      	cmp	r2, #16
1a0046d6:	db2b      	blt.n	1a004730 <memchr+0x60>
1a0046d8:	f010 0f07 	tst.w	r0, #7
1a0046dc:	d008      	beq.n	1a0046f0 <memchr+0x20>
1a0046de:	f810 3b01 	ldrb.w	r3, [r0], #1
1a0046e2:	3a01      	subs	r2, #1
1a0046e4:	428b      	cmp	r3, r1
1a0046e6:	d02d      	beq.n	1a004744 <memchr+0x74>
1a0046e8:	f010 0f07 	tst.w	r0, #7
1a0046ec:	b342      	cbz	r2, 1a004740 <memchr+0x70>
1a0046ee:	d1f6      	bne.n	1a0046de <memchr+0xe>
1a0046f0:	b4f0      	push	{r4, r5, r6, r7}
1a0046f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a0046f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a0046fa:	f022 0407 	bic.w	r4, r2, #7
1a0046fe:	f07f 0700 	mvns.w	r7, #0
1a004702:	2300      	movs	r3, #0
1a004704:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a004708:	3c08      	subs	r4, #8
1a00470a:	ea85 0501 	eor.w	r5, r5, r1
1a00470e:	ea86 0601 	eor.w	r6, r6, r1
1a004712:	fa85 f547 	uadd8	r5, r5, r7
1a004716:	faa3 f587 	sel	r5, r3, r7
1a00471a:	fa86 f647 	uadd8	r6, r6, r7
1a00471e:	faa5 f687 	sel	r6, r5, r7
1a004722:	b98e      	cbnz	r6, 1a004748 <memchr+0x78>
1a004724:	d1ee      	bne.n	1a004704 <memchr+0x34>
1a004726:	bcf0      	pop	{r4, r5, r6, r7}
1a004728:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a00472c:	f002 0207 	and.w	r2, r2, #7
1a004730:	b132      	cbz	r2, 1a004740 <memchr+0x70>
1a004732:	f810 3b01 	ldrb.w	r3, [r0], #1
1a004736:	3a01      	subs	r2, #1
1a004738:	ea83 0301 	eor.w	r3, r3, r1
1a00473c:	b113      	cbz	r3, 1a004744 <memchr+0x74>
1a00473e:	d1f8      	bne.n	1a004732 <memchr+0x62>
1a004740:	2000      	movs	r0, #0
1a004742:	4770      	bx	lr
1a004744:	3801      	subs	r0, #1
1a004746:	4770      	bx	lr
1a004748:	2d00      	cmp	r5, #0
1a00474a:	bf06      	itte	eq
1a00474c:	4635      	moveq	r5, r6
1a00474e:	3803      	subeq	r0, #3
1a004750:	3807      	subne	r0, #7
1a004752:	f015 0f01 	tst.w	r5, #1
1a004756:	d107      	bne.n	1a004768 <memchr+0x98>
1a004758:	3001      	adds	r0, #1
1a00475a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a00475e:	bf02      	ittt	eq
1a004760:	3001      	addeq	r0, #1
1a004762:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a004766:	3001      	addeq	r0, #1
1a004768:	bcf0      	pop	{r4, r5, r6, r7}
1a00476a:	3801      	subs	r0, #1
1a00476c:	4770      	bx	lr
1a00476e:	bf00      	nop

1a004770 <__malloc_lock>:
1a004770:	4801      	ldr	r0, [pc, #4]	; (1a004778 <__malloc_lock+0x8>)
1a004772:	f7ff ba1a 	b.w	1a003baa <__retarget_lock_acquire_recursive>
1a004776:	bf00      	nop
1a004778:	1000229c 	.word	0x1000229c

1a00477c <__malloc_unlock>:
1a00477c:	4801      	ldr	r0, [pc, #4]	; (1a004784 <__malloc_unlock+0x8>)
1a00477e:	f7ff ba15 	b.w	1a003bac <__retarget_lock_release_recursive>
1a004782:	bf00      	nop
1a004784:	1000229c 	.word	0x1000229c
1a004788:	72656a45 	.word	0x72656a45
1a00478c:	69636963 	.word	0x69636963
1a004790:	5f43206f 	.word	0x5f43206f
1a004794:	000d2e34 	.word	0x000d2e34
1a004798:	65726174 	.word	0x65726174
1a00479c:	656c5f61 	.word	0x656c5f61
1a0047a0:	00000064 	.word	0x00000064
1a0047a4:	65726174 	.word	0x65726174
1a0047a8:	65745f61 	.word	0x65745f61
1a0047ac:	00616c63 	.word	0x00616c63
1a0047b0:	6f727245 	.word	0x6f727245
1a0047b4:	6c612072 	.word	0x6c612072
1a0047b8:	65726320 	.word	0x65726320
1a0047bc:	6c207261 	.word	0x6c207261
1a0047c0:	74207361 	.word	0x74207361
1a0047c4:	61657261 	.word	0x61657261
1a0047c8:	000d2e73 	.word	0x000d2e73
1a0047cc:	6f727245 	.word	0x6f727245
1a0047d0:	6c612072 	.word	0x6c612072
1a0047d4:	65726320 	.word	0x65726320
1a0047d8:	6c207261 	.word	0x6c207261
1a0047dc:	7320736f 	.word	0x7320736f
1a0047e0:	66616d65 	.word	0x66616d65
1a0047e4:	736f726f 	.word	0x736f726f
1a0047e8:	ff000d2e 	.word	0xff000d2e
1a0047ec:	6c707041 	.word	0x6c707041
1a0047f0:	74616369 	.word	0x74616369
1a0047f4:	206e6f69 	.word	0x206e6f69
1a0047f8:	6c6c614d 	.word	0x6c6c614d
1a0047fc:	4620636f 	.word	0x4620636f
1a004800:	656c6961 	.word	0x656c6961
1a004804:	6f482064 	.word	0x6f482064
1a004808:	0d216b6f 	.word	0x0d216b6f
1a00480c:	00000000 	.word	0x00000000
1a004810:	7362696c 	.word	0x7362696c
1a004814:	6572662f 	.word	0x6572662f
1a004818:	6f747265 	.word	0x6f747265
1a00481c:	6f732f73 	.word	0x6f732f73
1a004820:	65637275 	.word	0x65637275
1a004824:	6f6f682f 	.word	0x6f6f682f
1a004828:	632e736b 	.word	0x632e736b
1a00482c:	ffffff00 	.word	0xffffff00
1a004830:	70410a0d 	.word	0x70410a0d
1a004834:	63696c70 	.word	0x63696c70
1a004838:	6f697461 	.word	0x6f697461
1a00483c:	7453206e 	.word	0x7453206e
1a004840:	206b6361 	.word	0x206b6361
1a004844:	7265764f 	.word	0x7265764f
1a004848:	776f6c66 	.word	0x776f6c66
1a00484c:	6f202121 	.word	0x6f202121
1a004850:	6154206e 	.word	0x6154206e
1a004854:	203a6b73 	.word	0x203a6b73
1a004858:	0a0d7325 	.word	0x0a0d7325
1a00485c:	ffffff00 	.word	0xffffff00
1a004860:	41760a0d 	.word	0x41760a0d
1a004864:	72657373 	.word	0x72657373
1a004868:	6c614374 	.word	0x6c614374
1a00486c:	2864656c 	.word	0x2864656c
1a004870:	200a0d29 	.word	0x200a0d29
1a004874:	4c4c2020 	.word	0x4c4c2020
1a004878:	20656e69 	.word	0x20656e69
1a00487c:	626d754e 	.word	0x626d754e
1a004880:	3d207265 	.word	0x3d207265
1a004884:	0d642520 	.word	0x0d642520
1a004888:	2020200a 	.word	0x2020200a
1a00488c:	656c6946 	.word	0x656c6946
1a004890:	6d614e20 	.word	0x6d614e20
1a004894:	203d2065 	.word	0x203d2065
1a004898:	0a0d7325 	.word	0x0a0d7325
1a00489c:	ff000a0d 	.word	0xff000a0d
1a0048a0:	454c4449 	.word	0x454c4449
1a0048a4:	ffffff00 	.word	0xffffff00
1a0048a8:	51726d54 	.word	0x51726d54
1a0048ac:	ffffff00 	.word	0xffffff00
1a0048b0:	20726d54 	.word	0x20726d54
1a0048b4:	00637653 	.word	0x00637653

1a0048b8 <ExtRateIn>:
1a0048b8:	00000000                                ....

1a0048bc <GpioButtons>:
1a0048bc:	08000400 09010900                       ........

1a0048c4 <GpioLeds>:
1a0048c4:	01050005 0e000205 0c010b01              ............

1a0048d0 <GpioPorts>:
1a0048d0:	03030003 0f050403 05031005 07030603     ................
1a0048e0:	ffff0802                                ....

1a0048e4 <OscRateIn>:
1a0048e4:	00b71b00                                ....

1a0048e8 <InitClkStates>:
1a0048e8:	01010f01                                ....

1a0048ec <pinmuxing>:
1a0048ec:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a0048fc:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a00490c:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a00491c:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a00492c:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a00493c:	00d50301 00d50401 00160107 00560207     ..............V.
1a00494c:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a00495c:	00570206                                ..W.

1a004960 <UART_BClock>:
1a004960:	01a201c2 01620182                       ......b.

1a004968 <UART_PClock>:
1a004968:	00820081 00a200a1 08040201 0f0f0f03     ................
1a004978:	000000ff                                ....

1a00497c <periph_to_base>:
1a00497c:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a00498c:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a00499c:	000100e0 01000100 01200003 00060120     .......... . ...
1a0049ac:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a0049bc:	01820013 00120182 01a201a2 01c20011     ................
1a0049cc:	001001c2 01e201e2 0202000f 000e0202     ................
1a0049dc:	02220222 0223000d 001c0223              "."...#.#...

1a0049e8 <InitClkStates>:
1a0049e8:	00010100 00010909 0001090a 01010701     ................
1a0049f8:	00010902 00010906 0101090c 0001090d     ................
1a004a08:	0001090e 0001090f 00010910 00010911     ................
1a004a18:	00010912 00010913 00011114 00011119     ................
1a004a28:	0001111a 0001111b                       ........

1a004a30 <lpcUarts>:
1a004a30:	40081000 06020406 00180205 40081000     ...@...........@
1a004a40:	09070509 00180706 40082000 00000000     ......... .@....
1a004a50:	00190000 400c1000 07060107 001a0602     .......@........
1a004a60:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a004a70:	02020302 001b0204                       ........

1a004a78 <gpioPinsInit>:
1a004a78:	02000104 00050701 05010d03 04080100     ................
1a004a88:	02020002 02000304 00000403 04070002     ................
1a004a98:	030c0300 09050402 05040103 04030208     ................
1a004aa8:	04020305 06040504 0802000c 03000b06     ................
1a004ab8:	00090607 07060503 060f0504 03030004     ................
1a004ac8:	02000404 00050404 06040502 04060200     ................
1a004ad8:	0c050408 05040a04 0003010e 14010a00     ................
1a004ae8:	010f0000 0d000012 00001101 0010010c     ................
1a004af8:	07070300 000f0300 01000001 00000000     ................
1a004b08:	000a0600 08060603 06100504 04030005     ................
1a004b18:	03000106 04090400 04010d05 010b0000     ................
1a004b28:	0200000f 00000001 00010104 02010800     ................
1a004b38:	01090000 09010006 05040002 04010200     ................
1a004b48:	02020105 02020504 0e00000a 01000b02     ................
1a004b58:	000c020b ffff0c01                       ........

1a004b60 <__sf_fake_stderr>:
	...

1a004b80 <__sf_fake_stdin>:
	...

1a004ba0 <__sf_fake_stdout>:
	...

1a004bc0 <_global_impure_ptr>:
1a004bc0:	10000044 2b302d23 6c680020 6665004c     D...#-0+ .hlL.ef
1a004bd0:	47464567 32313000 36353433 41393837     gEFG.0123456789A
1a004be0:	45444342 31300046 35343332 39383736     BCDEF.0123456789
1a004bf0:	64636261 ff006665                       abcdef..
